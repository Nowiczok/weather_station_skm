
stacja_pogodowa_SKM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  08009688  08009688  00019688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08009ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000788  24000088  08009f2c  00020088  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000810  08009f2c  00020810  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017a9b  00000000  00000000  000200b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003247  00000000  00000000  00037b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001038  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ec8  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030eaf  00000000  00000000  0003cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000193fb  00000000  00000000  0006db47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00135c68  00000000  00000000  00086f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bcbaa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000045fc  00000000  00000000  001bcbfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000088 	.word	0x24000088
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009670 	.word	0x08009670

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	08009670 	.word	0x08009670

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	; 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_uldivmod>:
 8000718:	b953      	cbnz	r3, 8000730 <__aeabi_uldivmod+0x18>
 800071a:	b94a      	cbnz	r2, 8000730 <__aeabi_uldivmod+0x18>
 800071c:	2900      	cmp	r1, #0
 800071e:	bf08      	it	eq
 8000720:	2800      	cmpeq	r0, #0
 8000722:	bf1c      	itt	ne
 8000724:	f04f 31ff 	movne.w	r1, #4294967295
 8000728:	f04f 30ff 	movne.w	r0, #4294967295
 800072c:	f000 b974 	b.w	8000a18 <__aeabi_idiv0>
 8000730:	f1ad 0c08 	sub.w	ip, sp, #8
 8000734:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000738:	f000 f806 	bl	8000748 <__udivmoddi4>
 800073c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000744:	b004      	add	sp, #16
 8000746:	4770      	bx	lr

08000748 <__udivmoddi4>:
 8000748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800074c:	9d08      	ldr	r5, [sp, #32]
 800074e:	4604      	mov	r4, r0
 8000750:	468e      	mov	lr, r1
 8000752:	2b00      	cmp	r3, #0
 8000754:	d14d      	bne.n	80007f2 <__udivmoddi4+0xaa>
 8000756:	428a      	cmp	r2, r1
 8000758:	4694      	mov	ip, r2
 800075a:	d969      	bls.n	8000830 <__udivmoddi4+0xe8>
 800075c:	fab2 f282 	clz	r2, r2
 8000760:	b152      	cbz	r2, 8000778 <__udivmoddi4+0x30>
 8000762:	fa01 f302 	lsl.w	r3, r1, r2
 8000766:	f1c2 0120 	rsb	r1, r2, #32
 800076a:	fa20 f101 	lsr.w	r1, r0, r1
 800076e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000772:	ea41 0e03 	orr.w	lr, r1, r3
 8000776:	4094      	lsls	r4, r2
 8000778:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800077c:	0c21      	lsrs	r1, r4, #16
 800077e:	fbbe f6f8 	udiv	r6, lr, r8
 8000782:	fa1f f78c 	uxth.w	r7, ip
 8000786:	fb08 e316 	mls	r3, r8, r6, lr
 800078a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800078e:	fb06 f107 	mul.w	r1, r6, r7
 8000792:	4299      	cmp	r1, r3
 8000794:	d90a      	bls.n	80007ac <__udivmoddi4+0x64>
 8000796:	eb1c 0303 	adds.w	r3, ip, r3
 800079a:	f106 30ff 	add.w	r0, r6, #4294967295
 800079e:	f080 811f 	bcs.w	80009e0 <__udivmoddi4+0x298>
 80007a2:	4299      	cmp	r1, r3
 80007a4:	f240 811c 	bls.w	80009e0 <__udivmoddi4+0x298>
 80007a8:	3e02      	subs	r6, #2
 80007aa:	4463      	add	r3, ip
 80007ac:	1a5b      	subs	r3, r3, r1
 80007ae:	b2a4      	uxth	r4, r4
 80007b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007b4:	fb08 3310 	mls	r3, r8, r0, r3
 80007b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007bc:	fb00 f707 	mul.w	r7, r0, r7
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	d90a      	bls.n	80007da <__udivmoddi4+0x92>
 80007c4:	eb1c 0404 	adds.w	r4, ip, r4
 80007c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007cc:	f080 810a 	bcs.w	80009e4 <__udivmoddi4+0x29c>
 80007d0:	42a7      	cmp	r7, r4
 80007d2:	f240 8107 	bls.w	80009e4 <__udivmoddi4+0x29c>
 80007d6:	4464      	add	r4, ip
 80007d8:	3802      	subs	r0, #2
 80007da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007de:	1be4      	subs	r4, r4, r7
 80007e0:	2600      	movs	r6, #0
 80007e2:	b11d      	cbz	r5, 80007ec <__udivmoddi4+0xa4>
 80007e4:	40d4      	lsrs	r4, r2
 80007e6:	2300      	movs	r3, #0
 80007e8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ec:	4631      	mov	r1, r6
 80007ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007f2:	428b      	cmp	r3, r1
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0xc2>
 80007f6:	2d00      	cmp	r5, #0
 80007f8:	f000 80ef 	beq.w	80009da <__udivmoddi4+0x292>
 80007fc:	2600      	movs	r6, #0
 80007fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000802:	4630      	mov	r0, r6
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	fab3 f683 	clz	r6, r3
 800080e:	2e00      	cmp	r6, #0
 8000810:	d14a      	bne.n	80008a8 <__udivmoddi4+0x160>
 8000812:	428b      	cmp	r3, r1
 8000814:	d302      	bcc.n	800081c <__udivmoddi4+0xd4>
 8000816:	4282      	cmp	r2, r0
 8000818:	f200 80f9 	bhi.w	8000a0e <__udivmoddi4+0x2c6>
 800081c:	1a84      	subs	r4, r0, r2
 800081e:	eb61 0303 	sbc.w	r3, r1, r3
 8000822:	2001      	movs	r0, #1
 8000824:	469e      	mov	lr, r3
 8000826:	2d00      	cmp	r5, #0
 8000828:	d0e0      	beq.n	80007ec <__udivmoddi4+0xa4>
 800082a:	e9c5 4e00 	strd	r4, lr, [r5]
 800082e:	e7dd      	b.n	80007ec <__udivmoddi4+0xa4>
 8000830:	b902      	cbnz	r2, 8000834 <__udivmoddi4+0xec>
 8000832:	deff      	udf	#255	; 0xff
 8000834:	fab2 f282 	clz	r2, r2
 8000838:	2a00      	cmp	r2, #0
 800083a:	f040 8092 	bne.w	8000962 <__udivmoddi4+0x21a>
 800083e:	eba1 010c 	sub.w	r1, r1, ip
 8000842:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000846:	fa1f fe8c 	uxth.w	lr, ip
 800084a:	2601      	movs	r6, #1
 800084c:	0c20      	lsrs	r0, r4, #16
 800084e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000852:	fb07 1113 	mls	r1, r7, r3, r1
 8000856:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800085a:	fb0e f003 	mul.w	r0, lr, r3
 800085e:	4288      	cmp	r0, r1
 8000860:	d908      	bls.n	8000874 <__udivmoddi4+0x12c>
 8000862:	eb1c 0101 	adds.w	r1, ip, r1
 8000866:	f103 38ff 	add.w	r8, r3, #4294967295
 800086a:	d202      	bcs.n	8000872 <__udivmoddi4+0x12a>
 800086c:	4288      	cmp	r0, r1
 800086e:	f200 80cb 	bhi.w	8000a08 <__udivmoddi4+0x2c0>
 8000872:	4643      	mov	r3, r8
 8000874:	1a09      	subs	r1, r1, r0
 8000876:	b2a4      	uxth	r4, r4
 8000878:	fbb1 f0f7 	udiv	r0, r1, r7
 800087c:	fb07 1110 	mls	r1, r7, r0, r1
 8000880:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000884:	fb0e fe00 	mul.w	lr, lr, r0
 8000888:	45a6      	cmp	lr, r4
 800088a:	d908      	bls.n	800089e <__udivmoddi4+0x156>
 800088c:	eb1c 0404 	adds.w	r4, ip, r4
 8000890:	f100 31ff 	add.w	r1, r0, #4294967295
 8000894:	d202      	bcs.n	800089c <__udivmoddi4+0x154>
 8000896:	45a6      	cmp	lr, r4
 8000898:	f200 80bb 	bhi.w	8000a12 <__udivmoddi4+0x2ca>
 800089c:	4608      	mov	r0, r1
 800089e:	eba4 040e 	sub.w	r4, r4, lr
 80008a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008a6:	e79c      	b.n	80007e2 <__udivmoddi4+0x9a>
 80008a8:	f1c6 0720 	rsb	r7, r6, #32
 80008ac:	40b3      	lsls	r3, r6
 80008ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80008b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008b6:	fa20 f407 	lsr.w	r4, r0, r7
 80008ba:	fa01 f306 	lsl.w	r3, r1, r6
 80008be:	431c      	orrs	r4, r3
 80008c0:	40f9      	lsrs	r1, r7
 80008c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008c6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80008ce:	0c20      	lsrs	r0, r4, #16
 80008d0:	fa1f fe8c 	uxth.w	lr, ip
 80008d4:	fb09 1118 	mls	r1, r9, r8, r1
 80008d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008dc:	fb08 f00e 	mul.w	r0, r8, lr
 80008e0:	4288      	cmp	r0, r1
 80008e2:	fa02 f206 	lsl.w	r2, r2, r6
 80008e6:	d90b      	bls.n	8000900 <__udivmoddi4+0x1b8>
 80008e8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80008f0:	f080 8088 	bcs.w	8000a04 <__udivmoddi4+0x2bc>
 80008f4:	4288      	cmp	r0, r1
 80008f6:	f240 8085 	bls.w	8000a04 <__udivmoddi4+0x2bc>
 80008fa:	f1a8 0802 	sub.w	r8, r8, #2
 80008fe:	4461      	add	r1, ip
 8000900:	1a09      	subs	r1, r1, r0
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb1 f0f9 	udiv	r0, r1, r9
 8000908:	fb09 1110 	mls	r1, r9, r0, r1
 800090c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000910:	fb00 fe0e 	mul.w	lr, r0, lr
 8000914:	458e      	cmp	lr, r1
 8000916:	d908      	bls.n	800092a <__udivmoddi4+0x1e2>
 8000918:	eb1c 0101 	adds.w	r1, ip, r1
 800091c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000920:	d26c      	bcs.n	80009fc <__udivmoddi4+0x2b4>
 8000922:	458e      	cmp	lr, r1
 8000924:	d96a      	bls.n	80009fc <__udivmoddi4+0x2b4>
 8000926:	3802      	subs	r0, #2
 8000928:	4461      	add	r1, ip
 800092a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800092e:	fba0 9402 	umull	r9, r4, r0, r2
 8000932:	eba1 010e 	sub.w	r1, r1, lr
 8000936:	42a1      	cmp	r1, r4
 8000938:	46c8      	mov	r8, r9
 800093a:	46a6      	mov	lr, r4
 800093c:	d356      	bcc.n	80009ec <__udivmoddi4+0x2a4>
 800093e:	d053      	beq.n	80009e8 <__udivmoddi4+0x2a0>
 8000940:	b15d      	cbz	r5, 800095a <__udivmoddi4+0x212>
 8000942:	ebb3 0208 	subs.w	r2, r3, r8
 8000946:	eb61 010e 	sbc.w	r1, r1, lr
 800094a:	fa01 f707 	lsl.w	r7, r1, r7
 800094e:	fa22 f306 	lsr.w	r3, r2, r6
 8000952:	40f1      	lsrs	r1, r6
 8000954:	431f      	orrs	r7, r3
 8000956:	e9c5 7100 	strd	r7, r1, [r5]
 800095a:	2600      	movs	r6, #0
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	f1c2 0320 	rsb	r3, r2, #32
 8000966:	40d8      	lsrs	r0, r3
 8000968:	fa0c fc02 	lsl.w	ip, ip, r2
 800096c:	fa21 f303 	lsr.w	r3, r1, r3
 8000970:	4091      	lsls	r1, r2
 8000972:	4301      	orrs	r1, r0
 8000974:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000978:	fa1f fe8c 	uxth.w	lr, ip
 800097c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000980:	fb07 3610 	mls	r6, r7, r0, r3
 8000984:	0c0b      	lsrs	r3, r1, #16
 8000986:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800098a:	fb00 f60e 	mul.w	r6, r0, lr
 800098e:	429e      	cmp	r6, r3
 8000990:	fa04 f402 	lsl.w	r4, r4, r2
 8000994:	d908      	bls.n	80009a8 <__udivmoddi4+0x260>
 8000996:	eb1c 0303 	adds.w	r3, ip, r3
 800099a:	f100 38ff 	add.w	r8, r0, #4294967295
 800099e:	d22f      	bcs.n	8000a00 <__udivmoddi4+0x2b8>
 80009a0:	429e      	cmp	r6, r3
 80009a2:	d92d      	bls.n	8000a00 <__udivmoddi4+0x2b8>
 80009a4:	3802      	subs	r0, #2
 80009a6:	4463      	add	r3, ip
 80009a8:	1b9b      	subs	r3, r3, r6
 80009aa:	b289      	uxth	r1, r1
 80009ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80009b0:	fb07 3316 	mls	r3, r7, r6, r3
 80009b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b8:	fb06 f30e 	mul.w	r3, r6, lr
 80009bc:	428b      	cmp	r3, r1
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x28a>
 80009c0:	eb1c 0101 	adds.w	r1, ip, r1
 80009c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009c8:	d216      	bcs.n	80009f8 <__udivmoddi4+0x2b0>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d914      	bls.n	80009f8 <__udivmoddi4+0x2b0>
 80009ce:	3e02      	subs	r6, #2
 80009d0:	4461      	add	r1, ip
 80009d2:	1ac9      	subs	r1, r1, r3
 80009d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009d8:	e738      	b.n	800084c <__udivmoddi4+0x104>
 80009da:	462e      	mov	r6, r5
 80009dc:	4628      	mov	r0, r5
 80009de:	e705      	b.n	80007ec <__udivmoddi4+0xa4>
 80009e0:	4606      	mov	r6, r0
 80009e2:	e6e3      	b.n	80007ac <__udivmoddi4+0x64>
 80009e4:	4618      	mov	r0, r3
 80009e6:	e6f8      	b.n	80007da <__udivmoddi4+0x92>
 80009e8:	454b      	cmp	r3, r9
 80009ea:	d2a9      	bcs.n	8000940 <__udivmoddi4+0x1f8>
 80009ec:	ebb9 0802 	subs.w	r8, r9, r2
 80009f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009f4:	3801      	subs	r0, #1
 80009f6:	e7a3      	b.n	8000940 <__udivmoddi4+0x1f8>
 80009f8:	4646      	mov	r6, r8
 80009fa:	e7ea      	b.n	80009d2 <__udivmoddi4+0x28a>
 80009fc:	4620      	mov	r0, r4
 80009fe:	e794      	b.n	800092a <__udivmoddi4+0x1e2>
 8000a00:	4640      	mov	r0, r8
 8000a02:	e7d1      	b.n	80009a8 <__udivmoddi4+0x260>
 8000a04:	46d0      	mov	r8, sl
 8000a06:	e77b      	b.n	8000900 <__udivmoddi4+0x1b8>
 8000a08:	3b02      	subs	r3, #2
 8000a0a:	4461      	add	r1, ip
 8000a0c:	e732      	b.n	8000874 <__udivmoddi4+0x12c>
 8000a0e:	4630      	mov	r0, r6
 8000a10:	e709      	b.n	8000826 <__udivmoddi4+0xde>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	e742      	b.n	800089e <__udivmoddi4+0x156>

08000a18 <__aeabi_idiv0>:
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <ssd1306_Reset>:
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9301      	str	r3, [sp, #4]
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2200      	movs	r2, #0
 8000a48:	2178      	movs	r1, #120	; 0x78
 8000a4a:	4803      	ldr	r0, [pc, #12]	; (8000a58 <ssd1306_WriteCommand+0x2c>)
 8000a4c:	f003 ffd6 	bl	80049fc <HAL_I2C_Mem_Write>
}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	240002f8 	.word	0x240002f8

08000a5c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6e:	9202      	str	r2, [sp, #8]
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2301      	movs	r3, #1
 8000a78:	2240      	movs	r2, #64	; 0x40
 8000a7a:	2178      	movs	r1, #120	; 0x78
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <ssd1306_WriteData+0x30>)
 8000a7e:	f003 ffbd 	bl	80049fc <HAL_I2C_Mem_Write>
    //HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	240002f8 	.word	0x240002f8

08000a90 <ssd1306_Init>:
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000a94:	f7ff ffc2 	bl	8000a1c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f001 fd09 	bl	80024b0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f9e6 	bl	8000e70 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000aa4:	2020      	movs	r0, #32
 8000aa6:	f7ff ffc1 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff ffbe 	bl	8000a2c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ab0:	20b0      	movs	r0, #176	; 0xb0
 8000ab2:	f7ff ffbb 	bl	8000a2c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000ab6:	20c8      	movs	r0, #200	; 0xc8
 8000ab8:	f7ff ffb8 	bl	8000a2c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff ffb5 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000ac2:	2010      	movs	r0, #16
 8000ac4:	f7ff ffb2 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ac8:	2040      	movs	r0, #64	; 0x40
 8000aca:	f7ff ffaf 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	f000 f9ba 	bl	8000e48 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ad4:	20a1      	movs	r0, #161	; 0xa1
 8000ad6:	f7ff ffa9 	bl	8000a2c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000ada:	20a6      	movs	r0, #166	; 0xa6
 8000adc:	f7ff ffa6 	bl	8000a2c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000ae0:	20a8      	movs	r0, #168	; 0xa8
 8000ae2:	f7ff ffa3 	bl	8000a2c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000ae6:	201f      	movs	r0, #31
 8000ae8:	f7ff ffa0 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000aec:	20a4      	movs	r0, #164	; 0xa4
 8000aee:	f7ff ff9d 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000af2:	20d3      	movs	r0, #211	; 0xd3
 8000af4:	f7ff ff9a 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000af8:	2000      	movs	r0, #0
 8000afa:	f7ff ff97 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000afe:	20d5      	movs	r0, #213	; 0xd5
 8000b00:	f7ff ff94 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000b04:	20f0      	movs	r0, #240	; 0xf0
 8000b06:	f7ff ff91 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000b0a:	20d9      	movs	r0, #217	; 0xd9
 8000b0c:	f7ff ff8e 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000b10:	2022      	movs	r0, #34	; 0x22
 8000b12:	f7ff ff8b 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000b16:	20da      	movs	r0, #218	; 0xda
 8000b18:	f7ff ff88 	bl	8000a2c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff ff85 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000b22:	20db      	movs	r0, #219	; 0xdb
 8000b24:	f7ff ff82 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f7ff ff7f 	bl	8000a2c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000b2e:	208d      	movs	r0, #141	; 0x8d
 8000b30:	f7ff ff7c 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000b34:	2014      	movs	r0, #20
 8000b36:	f7ff ff79 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f000 f998 	bl	8000e70 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f80f 	bl	8000b64 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000b46:	f000 f831 	bl	8000bac <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ssd1306_Init+0xd0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <ssd1306_Init+0xd0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000b56:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <ssd1306_Init+0xd0>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	715a      	strb	r2, [r3, #5]
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240002a4 	.word	0x240002a4

08000b64 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	e00d      	b.n	8000b90 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <ssd1306_Fill+0x1a>
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	e000      	b.n	8000b80 <ssd1306_Fill+0x1c>
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <ssd1306_Fill+0x44>)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	4413      	add	r3, r2
 8000b86:	460a      	mov	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b96:	d3ed      	bcc.n	8000b74 <ssd1306_Fill+0x10>
    }
}
 8000b98:	bf00      	nop
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	240000a4 	.word	0x240000a4

08000bac <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++)
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	71fb      	strb	r3, [r7, #7]
 8000bb6:	e016      	b.n	8000be6 <ssd1306_UpdateScreen+0x3a>
    {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	3b50      	subs	r3, #80	; 0x50
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff34 	bl	8000a2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f7ff ff31 	bl	8000a2c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f7ff ff2e 	bl	8000a2c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	01db      	lsls	r3, r3, #7
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <ssd1306_UpdateScreen+0x4c>)
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff3e 	bl	8000a5c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	3301      	adds	r3, #1
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d9e5      	bls.n	8000bb8 <ssd1306_UpdateScreen+0xc>
    }
}
 8000bec:	bf00      	nop
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	240000a4 	.word	0x240000a4

08000bfc <ssd1306_DrawPixel>:
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
 8000c06:	460b      	mov	r3, r1
 8000c08:	71bb      	strb	r3, [r7, #6]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db48      	blt.n	8000ca8 <ssd1306_DrawPixel+0xac>
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d845      	bhi.n	8000ca8 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted)
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <ssd1306_DrawPixel+0xb8>)
 8000c1e:	791b      	ldrb	r3, [r3, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <ssd1306_DrawPixel+0x36>
    {
        color = (SSD1306_COLOR)!color;
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf0c      	ite	eq
 8000c2a:	2301      	moveq	r3, #1
 8000c2c:	2300      	movne	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White)
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d11a      	bne.n	8000c6e <ssd1306_DrawPixel+0x72>
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000c38:	79fa      	ldrb	r2, [r7, #7]
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	b2d8      	uxtb	r0, r3
 8000c40:	4603      	mov	r3, r0
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	4413      	add	r3, r2
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <ssd1306_DrawPixel+0xbc>)
 8000c48:	5cd3      	ldrb	r3, [r2, r3]
 8000c4a:	b25a      	sxtb	r2, r3
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f303 	lsl.w	r3, r1, r3
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b259      	sxtb	r1, r3
 8000c5e:	79fa      	ldrb	r2, [r7, #7]
 8000c60:	4603      	mov	r3, r0
 8000c62:	01db      	lsls	r3, r3, #7
 8000c64:	4413      	add	r3, r2
 8000c66:	b2c9      	uxtb	r1, r1
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <ssd1306_DrawPixel+0xbc>)
 8000c6a:	54d1      	strb	r1, [r2, r3]
 8000c6c:	e01d      	b.n	8000caa <ssd1306_DrawPixel+0xae>
    } else
    {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	79bb      	ldrb	r3, [r7, #6]
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	b2d8      	uxtb	r0, r3
 8000c76:	4603      	mov	r3, r0
 8000c78:	01db      	lsls	r3, r3, #7
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <ssd1306_DrawPixel+0xbc>)
 8000c7e:	5cd3      	ldrb	r3, [r2, r3]
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	f003 0307 	and.w	r3, r3, #7
 8000c88:	2101      	movs	r1, #1
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	43db      	mvns	r3, r3
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	4013      	ands	r3, r2
 8000c96:	b259      	sxtb	r1, r3
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	01db      	lsls	r3, r3, #7
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2c9      	uxtb	r1, r1
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <ssd1306_DrawPixel+0xbc>)
 8000ca4:	54d1      	strb	r1, [r2, r3]
 8000ca6:	e000      	b.n	8000caa <ssd1306_DrawPixel+0xae>
        return;
 8000ca8:	bf00      	nop
    }
}
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	240002a4 	.word	0x240002a4
 8000cb8:	240000a4 	.word	0x240000a4

08000cbc <ssd1306_WriteChar>:
// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	1d38      	adds	r0, r7, #4
 8000cc6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4623      	mov	r3, r4
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000cd4:	7bfb      	ldrb	r3, [r7, #15]
 8000cd6:	2b1f      	cmp	r3, #31
 8000cd8:	d902      	bls.n	8000ce0 <ssd1306_WriteChar+0x24>
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b7e      	cmp	r3, #126	; 0x7e
 8000cde:	d901      	bls.n	8000ce4 <ssd1306_WriteChar+0x28>
        return 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	e06d      	b.n	8000dc0 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ce4:	4b38      	ldr	r3, [pc, #224]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	2b80      	cmp	r3, #128	; 0x80
 8000cf0:	dc06      	bgt.n	8000d00 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000cf2:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000cf4:	885b      	ldrh	r3, [r3, #2]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000cfc:	2b20      	cmp	r3, #32
 8000cfe:	dd01      	ble.n	8000d04 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	e05d      	b.n	8000dc0 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	e04c      	b.n	8000da4 <ssd1306_WriteChar+0xe8>
    {
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	3b20      	subs	r3, #32
 8000d10:	7979      	ldrb	r1, [r7, #5]
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	440b      	add	r3, r1
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++)
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	e034      	b.n	8000d94 <ssd1306_WriteChar+0xd8>
        {
            if((b << j) & 0x8000)
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d012      	beq.n	8000d60 <ssd1306_WriteChar+0xa4>
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b2d8      	uxtb	r0, r3
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000d4a:	885b      	ldrh	r3, [r3, #2]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	7bba      	ldrb	r2, [r7, #14]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff ff4f 	bl	8000bfc <ssd1306_DrawPixel>
 8000d5e:	e016      	b.n	8000d8e <ssd1306_WriteChar+0xd2>
            } else
            {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000d60:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	b2d8      	uxtb	r0, r3
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000d70:	885b      	ldrh	r3, [r3, #2]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	b2d9      	uxtb	r1, r3
 8000d7c:	7bbb      	ldrb	r3, [r7, #14]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf0c      	ite	eq
 8000d82:	2301      	moveq	r3, #1
 8000d84:	2300      	movne	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f7ff ff37 	bl	8000bfc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++)
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	793b      	ldrb	r3, [r7, #4]
 8000d96:	461a      	mov	r2, r3
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d3c5      	bcc.n	8000d2a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++)
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3301      	adds	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	797b      	ldrb	r3, [r7, #5]
 8000da6:	461a      	mov	r2, r3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d3ad      	bcc.n	8000d0a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4413      	add	r3, r2
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <ssd1306_WriteChar+0x10c>)
 8000dbc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3724      	adds	r7, #36	; 0x24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	240002a4 	.word	0x240002a4

08000dcc <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	1d38      	adds	r0, r7, #4
 8000dd6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000dda:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str)
 8000ddc:	e012      	b.n	8000e04 <ssd1306_WriteString+0x38>
    {
        if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	7818      	ldrb	r0, [r3, #0]
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	1d3a      	adds	r2, r7, #4
 8000de6:	ca06      	ldmia	r2, {r1, r2}
 8000de8:	f7ff ff68 	bl	8000cbc <ssd1306_WriteChar>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d002      	beq.n	8000dfe <ssd1306_WriteString+0x32>
        {
            // Char could not be written
            return *str;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	e008      	b.n	8000e10 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	3301      	adds	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
    while (*str)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1e8      	bne.n	8000dde <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <ssd1306_SetCursor+0x2c>)
 8000e2e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000e30:	79bb      	ldrb	r3, [r7, #6]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <ssd1306_SetCursor+0x2c>)
 8000e36:	805a      	strh	r2, [r3, #2]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	240002a4 	.word	0x240002a4

08000e48 <ssd1306_SetContrast>:

  return;
}

void ssd1306_SetContrast(const uint8_t value)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000e52:	2381      	movs	r3, #129	; 0x81
 8000e54:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fde7 	bl	8000a2c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fde3 	bl	8000a2c <ssd1306_WriteCommand>
}
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on)
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <ssd1306_SetDisplayOn+0x1c>
    {
        value = 0xAF;   // Display on
 8000e80:	23af      	movs	r3, #175	; 0xaf
 8000e82:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <ssd1306_SetDisplayOn+0x38>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	719a      	strb	r2, [r3, #6]
 8000e8a:	e004      	b.n	8000e96 <ssd1306_SetDisplayOn+0x26>
    } else
    {
        value = 0xAE;   // Display off
 8000e8c:	23ae      	movs	r3, #174	; 0xae
 8000e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <ssd1306_SetDisplayOn+0x38>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fdc7 	bl	8000a2c <ssd1306_WriteCommand>
}
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	240002a4 	.word	0x240002a4

08000eac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_DMA_Init+0x4c>)
 8000eb4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ef8 <MX_DMA_Init+0x4c>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_DMA_Init+0x4c>)
 8000ec4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200b      	movs	r0, #11
 8000ed6:	f001 fbea 	bl	80026ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eda:	200b      	movs	r0, #11
 8000edc:	f001 fc01 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	200c      	movs	r0, #12
 8000ee6:	f001 fbe2 	bl	80026ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eea:	200c      	movs	r0, #12
 8000eec:	f001 fbf9 	bl	80026e2 <HAL_NVIC_EnableIRQ>

}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400

08000efc <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	4b80      	ldr	r3, [pc, #512]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f18:	4a7e      	ldr	r2, [pc, #504]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f22:	4b7c      	ldr	r3, [pc, #496]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f30:	4b78      	ldr	r3, [pc, #480]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f36:	4a77      	ldr	r2, [pc, #476]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f38:	f043 0320 	orr.w	r3, r3, #32
 8000f3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f40:	4b74      	ldr	r3, [pc, #464]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f46:	f003 0320 	and.w	r3, r3, #32
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b71      	ldr	r3, [pc, #452]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f54:	4a6f      	ldr	r2, [pc, #444]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f5e:	4b6d      	ldr	r3, [pc, #436]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b69      	ldr	r3, [pc, #420]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f72:	4a68      	ldr	r2, [pc, #416]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f7c:	4b65      	ldr	r3, [pc, #404]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f90:	4a60      	ldr	r2, [pc, #384]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	; (8001114 <MX_GPIO_Init+0x218>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fa0:	f003 0308 	and.w	r3, r3, #8
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	; (8001114 <MX_GPIO_Init+0x218>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fae:	4a59      	ldr	r2, [pc, #356]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fb8:	4b56      	ldr	r3, [pc, #344]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fcc:	4a51      	ldr	r2, [pc, #324]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd6:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fea:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <MX_GPIO_Init+0x218>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <MX_GPIO_Init+0x218>)
 8000ff6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001008:	4843      	ldr	r0, [pc, #268]	; (8001118 <MX_GPIO_Init+0x21c>)
 800100a:	f003 fa63 	bl	80044d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f244 0101 	movw	r1, #16385	; 0x4001
 8001014:	4841      	ldr	r0, [pc, #260]	; (800111c <MX_GPIO_Init+0x220>)
 8001016:	f003 fa5d 	bl	80044d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	4840      	ldr	r0, [pc, #256]	; (8001120 <MX_GPIO_Init+0x224>)
 8001020:	f003 fa58 	bl	80044d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	483a      	ldr	r0, [pc, #232]	; (8001124 <MX_GPIO_Init+0x228>)
 800103a:	f003 f89b 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800103e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4830      	ldr	r0, [pc, #192]	; (8001118 <MX_GPIO_Init+0x21c>)
 8001058:	f003 f88c 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800105c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4829      	ldr	r0, [pc, #164]	; (800111c <MX_GPIO_Init+0x220>)
 8001076:	f003 f87d 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	4826      	ldr	r0, [pc, #152]	; (8001128 <MX_GPIO_Init+0x22c>)
 8001090:	f003 f870 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a6:	4619      	mov	r1, r3
 80010a8:	4820      	ldr	r0, [pc, #128]	; (800112c <MX_GPIO_Init+0x230>)
 80010aa:	f003 f863 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80010c0:	230a      	movs	r3, #10
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4818      	ldr	r0, [pc, #96]	; (800112c <MX_GPIO_Init+0x230>)
 80010cc:	f003 f852 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80010d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <MX_GPIO_Init+0x230>)
 80010ea:	f003 f843 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ee:	2302      	movs	r3, #2
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_GPIO_Init+0x224>)
 8001106:	f003 f835 	bl	8004174 <HAL_GPIO_Init>

}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	58024400 	.word	0x58024400
 8001118:	58021400 	.word	0x58021400
 800111c:	58020400 	.word	0x58020400
 8001120:	58021000 	.word	0x58021000
 8001124:	58020800 	.word	0x58020800
 8001128:	58021800 	.word	0x58021800
 800112c:	58020000 	.word	0x58020000

08001130 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <MX_I2C1_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_I2C1_Init+0x74>)
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <MX_I2C1_Init+0x7c>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x74>)
 800116c:	f003 f9cc 	bl	8004508 <HAL_I2C_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 fa7d 	bl	8001674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x74>)
 800117e:	f004 f81d 	bl	80051bc <HAL_I2CEx_ConfigAnalogFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 fa74 	bl	8001674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001190:	f004 f85f 	bl	8005252 <HAL_I2CEx_ConfigDigitalFilter>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 fa6b 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	240002ac 	.word	0x240002ac
 80011a8:	40005400 	.word	0x40005400
 80011ac:	20b0ccff 	.word	0x20b0ccff

080011b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_I2C2_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_I2C2_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_I2C2_Init+0x74>)
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <MX_I2C2_Init+0x7c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_I2C2_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_I2C2_Init+0x74>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_I2C2_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_I2C2_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C2_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_I2C2_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C2_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ea:	480e      	ldr	r0, [pc, #56]	; (8001224 <MX_I2C2_Init+0x74>)
 80011ec:	f003 f98c 	bl	8004508 <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 fa3d 	bl	8001674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_I2C2_Init+0x74>)
 80011fe:	f003 ffdd 	bl	80051bc <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 fa34 	bl	8001674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_I2C2_Init+0x74>)
 8001210:	f004 f81f 	bl	8005252 <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fa2b 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	240002f8 	.word	0x240002f8
 8001228:	40005800 	.word	0x40005800
 800122c:	20b0ccff 	.word	0x20b0ccff

08001230 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ba      	sub	sp, #232	; 0xe8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	22b8      	movs	r2, #184	; 0xb8
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fdbf 	bl	8008dd4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a60      	ldr	r2, [pc, #384]	; (80013dc <HAL_I2C_MspInit+0x1ac>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d143      	bne.n	80012e8 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001260:	2308      	movs	r3, #8
 8001262:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	4618      	mov	r0, r3
 8001270:	f005 f826 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800127a:	f000 f9fb 	bl	8001674 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001284:	4a56      	ldr	r2, [pc, #344]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001290:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800129c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b6:	2304      	movs	r3, #4
 80012b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012c0:	4619      	mov	r1, r3
 80012c2:	4848      	ldr	r0, [pc, #288]	; (80013e4 <HAL_I2C_MspInit+0x1b4>)
 80012c4:	f002 ff56 	bl	8004174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c8:	4b45      	ldr	r3, [pc, #276]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 80012ca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012ce:	4a44      	ldr	r2, [pc, #272]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 80012da:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012e6:	e075      	b.n	80013d4 <HAL_I2C_MspInit+0x1a4>
  else if(i2cHandle->Instance==I2C2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <HAL_I2C_MspInit+0x1b8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d170      	bne.n	80013d4 <HAL_I2C_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012f2:	2308      	movs	r3, #8
 80012f4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ffdd 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_I2C_MspInit+0xe0>
      Error_Handler();
 800130c:	f000 f9b2 	bl	8001674 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001312:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001316:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001322:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800132e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001332:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001348:	2304      	movs	r3, #4
 800134a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001352:	4619      	mov	r1, r3
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <HAL_I2C_MspInit+0x1b4>)
 8001356:	f002 ff0d 	bl	8004174 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 800135c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 8001362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001366:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_I2C_MspInit+0x1b0>)
 800136c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream0;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_I2C_MspInit+0x1c0>)
 800137c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 800137e:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 8001380:	2224      	movs	r2, #36	; 0x24
 8001382:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 8001392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001396:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_CIRCULAR;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013aa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013ba:	f001 f9ad 	bl	8002718 <HAL_DMA_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0x198>
      Error_Handler();
 80013c4:	f000 f956 	bl	8001674 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_I2C_MspInit+0x1bc>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013d4:	bf00      	nop
 80013d6:	37e8      	adds	r7, #232	; 0xe8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40005400 	.word	0x40005400
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020400 	.word	0x58020400
 80013e8:	40005800 	.word	0x40005800
 80013ec:	24000344 	.word	0x24000344
 80013f0:	40020010 	.word	0x40020010

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 ffc7 	bl	800238c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f847 	bl	8001490 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8001402:	f7ff fd53 	bl	8000eac <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001406:	f7ff fd79 	bl	8000efc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800140a:	f000 fa41 	bl	8001890 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800140e:	f000 fb23 	bl	8001a58 <MX_USB_OTG_HS_USB_Init>
  MX_I2C2_Init();
 8001412:	f7ff fecd 	bl	80011b0 <MX_I2C2_Init>
  MX_I2C1_Init();
 8001416:	f7ff fe8b 	bl	8001130 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //sensor
  MS5611_Reset(&SENSOR_I2C, &MS5611);
 800141a:	4918      	ldr	r1, [pc, #96]	; (800147c <main+0x88>)
 800141c:	4818      	ldr	r0, [pc, #96]	; (8001480 <main+0x8c>)
 800141e:	f000 fb23 	bl	8001a68 <MS5611_Reset>
  MS5611_ReadProm(&SENSOR_I2C, &MS5611);
 8001422:	4916      	ldr	r1, [pc, #88]	; (800147c <main+0x88>)
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <main+0x8c>)
 8001426:	f000 fb41 	bl	8001aac <MS5611_ReadProm>
  TimerId timerIdMS5611;
  timerIdMS5611 = softTimerRegisterCallback(callbackMS5611, 100);
 800142a:	2164      	movs	r1, #100	; 0x64
 800142c:	4815      	ldr	r0, [pc, #84]	; (8001484 <main+0x90>)
 800142e:	f000 fdd3 	bl	8001fd8 <softTimerRegisterCallback>
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  softTimerChangeState(timerIdMS5611, timerRUN);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	2101      	movs	r1, #1
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe10 	bl	8002060 <softTimerChangeState>

  //display
  ssd1306_Init();
 8001440:	f7ff fb26 	bl	8000a90 <ssd1306_Init>
  TimerId timerIdSSD1306;
  timerIdSSD1306 = softTimerRegisterCallback(callbackSSD1306, 500);
 8001444:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <main+0x94>)
 800144a:	f000 fdc5 	bl	8001fd8 <softTimerRegisterCallback>
 800144e:	4603      	mov	r3, r0
 8001450:	71bb      	strb	r3, [r7, #6]
  softTimerChangeState(timerIdSSD1306, timerRUN);
 8001452:	79bb      	ldrb	r3, [r7, #6]
 8001454:	2101      	movs	r1, #1
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fe02 	bl	8002060 <softTimerChangeState>

  //uart
  TimerId timerIdUART;
  timerIdUART = softTimerRegisterCallback(callbackUart, 1000);
 800145c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001460:	480a      	ldr	r0, [pc, #40]	; (800148c <main+0x98>)
 8001462:	f000 fdb9 	bl	8001fd8 <softTimerRegisterCallback>
 8001466:	4603      	mov	r3, r0
 8001468:	717b      	strb	r3, [r7, #5]
  softTimerChangeState(timerIdUART, timerRUN);
 800146a:	797b      	ldrb	r3, [r7, #5]
 800146c:	2101      	movs	r1, #1
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fdf6 	bl	8002060 <softTimerChangeState>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	softTimerEvent();
 8001474:	f000 fe5c 	bl	8002130 <softTimerEvent>
 8001478:	e7fc      	b.n	8001474 <main+0x80>
 800147a:	bf00      	nop
 800147c:	24000530 	.word	0x24000530
 8001480:	240002ac 	.word	0x240002ac
 8001484:	08001571 	.word	0x08001571
 8001488:	0800160d 	.word	0x0800160d
 800148c:	080015b9 	.word	0x080015b9

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09c      	sub	sp, #112	; 0x70
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	224c      	movs	r2, #76	; 0x4c
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 fc98 	bl	8008dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	2220      	movs	r2, #32
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f007 fc92 	bl	8008dd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80014b0:	2004      	movs	r0, #4
 80014b2:	f003 ff1b 	bl	80052ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SystemClock_Config+0xdc>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	4a2b      	ldr	r2, [pc, #172]	; (800156c <SystemClock_Config+0xdc>)
 80014c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c4:	6193      	str	r3, [r2, #24]
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <SystemClock_Config+0xdc>)
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d2:	bf00      	nop
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xdc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014e0:	d1f8      	bne.n	80014d4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014e2:	2321      	movs	r3, #33	; 0x21
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014e6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014ec:	2301      	movs	r3, #1
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f0:	2302      	movs	r3, #2
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f4:	2302      	movs	r3, #2
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014f8:	2301      	movs	r3, #1
 80014fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 80014fc:	2346      	movs	r3, #70	; 0x46
 80014fe:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800150c:	230c      	movs	r3, #12
 800150e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001510:	2300      	movs	r3, #0
 8001512:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151c:	4618      	mov	r0, r3
 800151e:	f003 ff3f 	bl	80053a0 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001528:	f000 f8a4 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	233f      	movs	r3, #63	; 0x3f
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2303      	movs	r3, #3
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800153c:	2340      	movs	r3, #64	; 0x40
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2107      	movs	r1, #7
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fb28 	bl	8005ba8 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800155e:	f000 f889 	bl	8001674 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3770      	adds	r7, #112	; 0x70
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	58024800 	.word	0x58024800

08001570 <callbackMS5611>:

/* USER CODE BEGIN 4 */

//periodically read data from MS5611 and transmit them
void callbackMS5611(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	MS5611_RequestTemperature(&SENSOR_I2C, OSR_4096);
 8001574:	2104      	movs	r1, #4
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <callbackMS5611+0x40>)
 8001578:	f000 fbb6 	bl	8001ce8 <MS5611_RequestTemperature>
	HAL_Delay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f000 ff97 	bl	80024b0 <HAL_Delay>
	MS5611_ReadTemperature(&SENSOR_I2C, &MS5611);
 8001582:	490c      	ldr	r1, [pc, #48]	; (80015b4 <callbackMS5611+0x44>)
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <callbackMS5611+0x40>)
 8001586:	f000 fbe7 	bl	8001d58 <MS5611_ReadTemperature>
	MS5611_CalculateTemperature(&MS5611);
 800158a:	480a      	ldr	r0, [pc, #40]	; (80015b4 <callbackMS5611+0x44>)
 800158c:	f000 fc40 	bl	8001e10 <MS5611_CalculateTemperature>

	MS5611_RequestPressure(&SENSOR_I2C, OSR_4096);
 8001590:	2104      	movs	r1, #4
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <callbackMS5611+0x40>)
 8001594:	f000 fbc4 	bl	8001d20 <MS5611_RequestPressure>
	HAL_Delay(10);
 8001598:	200a      	movs	r0, #10
 800159a:	f000 ff89 	bl	80024b0 <HAL_Delay>
	MS5611_ReadPressure(&SENSOR_I2C, &MS5611);
 800159e:	4905      	ldr	r1, [pc, #20]	; (80015b4 <callbackMS5611+0x44>)
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <callbackMS5611+0x40>)
 80015a2:	f000 fc07 	bl	8001db4 <MS5611_ReadPressure>
	MS5611_CalculatePressure(&MS5611);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <callbackMS5611+0x44>)
 80015a8:	f000 fc6a 	bl	8001e80 <MS5611_CalculatePressure>
	
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	240002ac 	.word	0x240002ac
 80015b4:	24000530 	.word	0x24000530

080015b8 <callbackUart>:

void callbackUart(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af02      	add	r7, sp, #8
	sprintf(messageUart, formatUart, HAL_GetTick(), MS5611.TEMP, MS5611.P);
 80015be:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <callbackUart+0x44>)
 80015c0:	681c      	ldr	r4, [r3, #0]
 80015c2:	f000 ff69 	bl	8002498 <HAL_GetTick>
 80015c6:	4601      	mov	r1, r0
 80015c8:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <callbackUart+0x48>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <callbackUart+0x48>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	460a      	mov	r2, r1
 80015d6:	4621      	mov	r1, r4
 80015d8:	480a      	ldr	r0, [pc, #40]	; (8001604 <callbackUart+0x4c>)
 80015da:	f007 fc03 	bl	8008de4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)messageUart, strlen(messageUart), HAL_MAX_DELAY);
 80015de:	4809      	ldr	r0, [pc, #36]	; (8001604 <callbackUart+0x4c>)
 80015e0:	f7fe fe86 	bl	80002f0 <strlen>
 80015e4:	4603      	mov	r3, r0
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ec:	4905      	ldr	r1, [pc, #20]	; (8001604 <callbackUart+0x4c>)
 80015ee:	4806      	ldr	r0, [pc, #24]	; (8001608 <callbackUart+0x50>)
 80015f0:	f006 f9e4 	bl	80079bc <HAL_UART_Transmit>
}
 80015f4:	bf00      	nop
 80015f6:	3704      	adds	r7, #4
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	2400000c 	.word	0x2400000c
 8001600:	24000530 	.word	0x24000530
 8001604:	240003e4 	.word	0x240003e4
 8001608:	24000410 	.word	0x24000410

0800160c <callbackSSD1306>:

//periodically display data on OLED
void callbackSSD1306(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff faa7 	bl	8000b64 <ssd1306_Fill>
	sprintf(messageSensor, formatSensor, MS5611.TEMP/100, MS5611.P/100);
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <callbackSSD1306+0x54>)
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <callbackSSD1306+0x58>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <callbackSSD1306+0x5c>)
 8001620:	fb82 0203 	smull	r0, r2, r2, r3
 8001624:	1152      	asrs	r2, r2, #5
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad0      	subs	r0, r2, r3
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <callbackSSD1306+0x58>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <callbackSSD1306+0x5c>)
 8001630:	fb82 c203 	smull	ip, r2, r2, r3
 8001634:	1152      	asrs	r2, r2, #5
 8001636:	17db      	asrs	r3, r3, #31
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	4602      	mov	r2, r0
 800163c:	480b      	ldr	r0, [pc, #44]	; (800166c <callbackSSD1306+0x60>)
 800163e:	f007 fbd1 	bl	8008de4 <siprintf>
	ssd1306_SetCursor(0, 0);
 8001642:	2100      	movs	r1, #0
 8001644:	2000      	movs	r0, #0
 8001646:	f7ff fbe7 	bl	8000e18 <ssd1306_SetCursor>
	ssd1306_WriteString(messageSensor, Font_7x10, White);
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <callbackSSD1306+0x64>)
 800164c:	2301      	movs	r3, #1
 800164e:	ca06      	ldmia	r2, {r1, r2}
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <callbackSSD1306+0x60>)
 8001652:	f7ff fbbb 	bl	8000dcc <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001656:	f7ff faa9 	bl	8000bac <ssd1306_UpdateScreen>
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	24000008 	.word	0x24000008
 8001664:	24000530 	.word	0x24000530
 8001668:	51eb851f 	.word	0x51eb851f
 800166c:	240003bc 	.word	0x240003bc
 8001670:	24000000 	.word	0x24000000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_MspInit+0x30>)
 8001688:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_MspInit+0x30>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_MspInit+0x30>)
 8001698:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	58024400 	.word	0x58024400

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 feb6 	bl	8002470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  softTimerTick();
 8001704:	f000 fd52 	bl	80021ac <softTimerTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <DMA1_Stream0_IRQHandler+0x10>)
 8001712:	f001 fb91 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	24000344 	.word	0x24000344

08001720 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <DMA1_Stream1_IRQHandler+0x10>)
 8001726:	f001 fb87 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240004a0 	.word	0x240004a0

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f007 fae4 	bl	8008d30 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	24100000 	.word	0x24100000
 8001794:	00000400 	.word	0x00000400
 8001798:	2400040c 	.word	0x2400040c
 800179c:	24000810 	.word	0x24000810

080017a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <SystemInit+0xd0>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a31      	ldr	r2, [pc, #196]	; (8001870 <SystemInit+0xd0>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017b4:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <SystemInit+0xd4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 030f 	and.w	r3, r3, #15
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d807      	bhi.n	80017d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017c0:	4b2c      	ldr	r3, [pc, #176]	; (8001874 <SystemInit+0xd4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f023 030f 	bic.w	r3, r3, #15
 80017c8:	4a2a      	ldr	r2, [pc, #168]	; (8001874 <SystemInit+0xd4>)
 80017ca:	f043 0303 	orr.w	r3, r3, #3
 80017ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <SystemInit+0xd8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a28      	ldr	r2, [pc, #160]	; (8001878 <SystemInit+0xd8>)
 80017d6:	f043 0301 	orr.w	r3, r3, #1
 80017da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <SystemInit+0xd8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017e2:	4b25      	ldr	r3, [pc, #148]	; (8001878 <SystemInit+0xd8>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4924      	ldr	r1, [pc, #144]	; (8001878 <SystemInit+0xd8>)
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <SystemInit+0xdc>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ee:	4b21      	ldr	r3, [pc, #132]	; (8001874 <SystemInit+0xd4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <SystemInit+0xd4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 030f 	bic.w	r3, r3, #15
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <SystemInit+0xd4>)
 8001804:	f043 0303 	orr.w	r3, r3, #3
 8001808:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800180a:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <SystemInit+0xd8>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <SystemInit+0xd8>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <SystemInit+0xd8>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <SystemInit+0xd8>)
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <SystemInit+0xe0>)
 8001820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <SystemInit+0xd8>)
 8001824:	4a17      	ldr	r2, [pc, #92]	; (8001884 <SystemInit+0xe4>)
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <SystemInit+0xd8>)
 800182a:	4a17      	ldr	r2, [pc, #92]	; (8001888 <SystemInit+0xe8>)
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800182e:	4b12      	ldr	r3, [pc, #72]	; (8001878 <SystemInit+0xd8>)
 8001830:	2200      	movs	r2, #0
 8001832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <SystemInit+0xd8>)
 8001836:	4a14      	ldr	r2, [pc, #80]	; (8001888 <SystemInit+0xe8>)
 8001838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <SystemInit+0xd8>)
 800183c:	2200      	movs	r2, #0
 800183e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <SystemInit+0xd8>)
 8001842:	4a11      	ldr	r2, [pc, #68]	; (8001888 <SystemInit+0xe8>)
 8001844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <SystemInit+0xd8>)
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <SystemInit+0xd8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a09      	ldr	r2, [pc, #36]	; (8001878 <SystemInit+0xd8>)
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <SystemInit+0xd8>)
 800185a:	2200      	movs	r2, #0
 800185c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <SystemInit+0xec>)
 8001860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001864:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	52002000 	.word	0x52002000
 8001878:	58024400 	.word	0x58024400
 800187c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001880:	02020200 	.word	0x02020200
 8001884:	01ff0000 	.word	0x01ff0000
 8001888:	01010280 	.word	0x01010280
 800188c:	52004000 	.word	0x52004000

08001890 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <MX_USART3_UART_Init+0x90>)
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <MX_USART3_UART_Init+0x94>)
 8001898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_USART3_UART_Init+0x90>)
 800189c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a2:	4b1f      	ldr	r3, [pc, #124]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018b6:	220c      	movs	r2, #12
 80018b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d2:	4b13      	ldr	r3, [pc, #76]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018da:	f006 f81f 	bl	800791c <HAL_UART_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018e4:	f7ff fec6 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018e8:	2100      	movs	r1, #0
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018ec:	f007 f956 	bl	8008b9c <HAL_UARTEx_SetTxFifoThreshold>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018f6:	f7ff febd 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018fa:	2100      	movs	r1, #0
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <MX_USART3_UART_Init+0x90>)
 80018fe:	f007 f98b 	bl	8008c18 <HAL_UARTEx_SetRxFifoThreshold>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001908:	f7ff feb4 	bl	8001674 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_USART3_UART_Init+0x90>)
 800190e:	f007 f90c 	bl	8008b2a <HAL_UARTEx_DisableFifoMode>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001918:	f7ff feac 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	24000410 	.word	0x24000410
 8001924:	40004800 	.word	0x40004800

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0b8      	sub	sp, #224	; 0xe0
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	22b8      	movs	r2, #184	; 0xb8
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f007 fa43 	bl	8008dd4 <memset>
  if(uartHandle->Instance==USART3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HAL_UART_MspInit+0x11c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d170      	bne.n	8001a3a <HAL_UART_MspInit+0x112>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001958:	2302      	movs	r3, #2
 800195a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4618      	mov	r0, r3
 8001968:	f004 fcaa 	bl	80062c0 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001972:	f7ff fe7f 	bl	8001674 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_UART_MspInit+0x120>)
 8001978:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800197c:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_UART_MspInit+0x120>)
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_UART_MspInit+0x120>)
 8001988:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800198c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001994:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_UART_MspInit+0x120>)
 8001996:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_UART_MspInit+0x120>)
 800199c:	f043 0308 	orr.w	r3, r3, #8
 80019a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_UART_MspInit+0x120>)
 80019a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80019b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019cc:	2307      	movs	r3, #7
 80019ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d6:	4619      	mov	r1, r3
 80019d8:	481c      	ldr	r0, [pc, #112]	; (8001a4c <HAL_UART_MspInit+0x124>)
 80019da:	f002 fbcb 	bl	8004174 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_UART_MspInit+0x128>)
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_UART_MspInit+0x12c>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_UART_MspInit+0x128>)
 80019e6:	222e      	movs	r2, #46	; 0x2e
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_UART_MspInit+0x128>)
 80019ec:	2240      	movs	r2, #64	; 0x40
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <HAL_UART_MspInit+0x128>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_UART_MspInit+0x128>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_CIRCULAR;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a10:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a1e:	480c      	ldr	r0, [pc, #48]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a20:	f000 fe7a 	bl	8002718 <HAL_DMA_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8001a2a:	f7ff fe23 	bl	8001674 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a32:	679a      	str	r2, [r3, #120]	; 0x78
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_UART_MspInit+0x128>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	37e0      	adds	r7, #224	; 0xe0
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40004800 	.word	0x40004800
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	58020c00 	.word	0x58020c00
 8001a50:	240004a0 	.word	0x240004a0
 8001a54:	40020028 	.word	0x40020028

08001a58 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <MS5611_Reset>:
uint8_t MS5611_rx;

MS5611_t MS5611;

void MS5611_Reset(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	MS5611_tx = CMD_RESET;
 8001a72:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <MS5611_Reset+0x40>)
 8001a74:	221e      	movs	r2, #30
 8001a76:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1 , &MS5611_tx, 1, 100);
 8001a78:	2364      	movs	r3, #100	; 0x64
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <MS5611_Reset+0x40>)
 8001a80:	21ee      	movs	r1, #238	; 0xee
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f002 fdd0 	bl	8004628 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f000 fd11 	bl	80024b0 <HAL_Delay>
	//For Temperature > 20 Celsius
	DataStruct->T2 = 0;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->OFF2 = 0;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStruct->SENS2 = 0;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2400052b 	.word	0x2400052b

08001aac <MS5611_ReadProm>:

void MS5611_ReadProm(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
		MS5611_tx = CMD_PROM_C0;
 8001ab6:	4b8a      	ldr	r3, [pc, #552]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001ab8:	22a0      	movs	r2, #160	; 0xa0
 8001aba:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	4a87      	ldr	r2, [pc, #540]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001ac4:	21ee      	movs	r1, #238	; 0xee
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f002 fdae 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001acc:	2364      	movs	r3, #100	; 0x64
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	4a84      	ldr	r2, [pc, #528]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001ad4:	21ee      	movs	r1, #238	; 0xee
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f002 fe9a 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[0] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001adc:	4b81      	ldr	r3, [pc, #516]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001ae6:	785b      	ldrb	r3, [r3, #1]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 8001af4:	200a      	movs	r0, #10
 8001af6:	f000 fcdb 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C1;
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001afc:	22a2      	movs	r2, #162	; 0xa2
 8001afe:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001b00:	2364      	movs	r3, #100	; 0x64
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	4a76      	ldr	r2, [pc, #472]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001b08:	21ee      	movs	r1, #238	; 0xee
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f002 fd8c 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2302      	movs	r3, #2
 8001b16:	4a73      	ldr	r2, [pc, #460]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b18:	21ee      	movs	r1, #238	; 0xee
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f002 fe78 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[1] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001b20:	4b70      	ldr	r3, [pc, #448]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b2a:	785b      	ldrb	r3, [r3, #1]
 8001b2c:	b21b      	sxth	r3, r3
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	805a      	strh	r2, [r3, #2]
		HAL_Delay(10);
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f000 fcb9 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C2;
 8001b3e:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001b40:	22a4      	movs	r2, #164	; 0xa4
 8001b42:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001b44:	2364      	movs	r3, #100	; 0x64
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	4a65      	ldr	r2, [pc, #404]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001b4c:	21ee      	movs	r1, #238	; 0xee
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f002 fd6a 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b5c:	21ee      	movs	r1, #238	; 0xee
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f002 fe56 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[2] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001b64:	4b5f      	ldr	r3, [pc, #380]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	4b5d      	ldr	r3, [pc, #372]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f000 fc97 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C3;
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001b84:	22a6      	movs	r2, #166	; 0xa6
 8001b86:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001b88:	2364      	movs	r3, #100	; 0x64
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	4a54      	ldr	r2, [pc, #336]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001b90:	21ee      	movs	r1, #238	; 0xee
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f002 fd48 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001b98:	2364      	movs	r3, #100	; 0x64
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001ba0:	21ee      	movs	r1, #238	; 0xee
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f002 fe34 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[3] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001ba8:	4b4e      	ldr	r3, [pc, #312]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	4b4c      	ldr	r3, [pc, #304]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	b21b      	sxth	r3, r3
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	80da      	strh	r2, [r3, #6]
		HAL_Delay(10);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f000 fc75 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C4;
 8001bc6:	4b46      	ldr	r3, [pc, #280]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001bc8:	22a8      	movs	r2, #168	; 0xa8
 8001bca:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001bcc:	2364      	movs	r3, #100	; 0x64
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001bd4:	21ee      	movs	r1, #238	; 0xee
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f002 fd26 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	2302      	movs	r3, #2
 8001be2:	4a40      	ldr	r2, [pc, #256]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001be4:	21ee      	movs	r1, #238	; 0xee
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f002 fe12 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[4] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	b21b      	sxth	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b21b      	sxth	r3, r3
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	811a      	strh	r2, [r3, #8]
		HAL_Delay(10);
 8001c04:	200a      	movs	r0, #10
 8001c06:	f000 fc53 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C5;
 8001c0a:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001c0c:	22aa      	movs	r2, #170	; 0xaa
 8001c0e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	2301      	movs	r3, #1
 8001c16:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001c18:	21ee      	movs	r1, #238	; 0xee
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f002 fd04 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2302      	movs	r3, #2
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c28:	21ee      	movs	r1, #238	; 0xee
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f002 fdf0 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[5] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	815a      	strh	r2, [r3, #10]
		HAL_Delay(10);
 8001c48:	200a      	movs	r0, #10
 8001c4a:	f000 fc31 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C6;
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001c50:	22ac      	movs	r2, #172	; 0xac
 8001c52:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001c54:	2364      	movs	r3, #100	; 0x64
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001c5c:	21ee      	movs	r1, #238	; 0xee
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f002 fce2 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001c64:	2364      	movs	r3, #100	; 0x64
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c6c:	21ee      	movs	r1, #238	; 0xee
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f002 fdce 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[6] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b21b      	sxth	r3, r3
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	819a      	strh	r2, [r3, #12]
		HAL_Delay(10);
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	f000 fc0f 	bl	80024b0 <HAL_Delay>

		MS5611_tx = CMD_PROM_C7;
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001c94:	22ae      	movs	r2, #174	; 0xae
 8001c96:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001c98:	2364      	movs	r3, #100	; 0x64
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <MS5611_ReadProm+0x234>)
 8001ca0:	21ee      	movs	r1, #238	; 0xee
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f002 fcc0 	bl	8004628 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001ca8:	2364      	movs	r3, #100	; 0x64
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2302      	movs	r3, #2
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001cb0:	21ee      	movs	r1, #238	; 0xee
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f002 fdac 	bl	8004810 <HAL_I2C_Master_Receive>
		DataStruct->C[7] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MS5611_ReadProm+0x238>)
 8001cc2:	785b      	ldrb	r3, [r3, #1]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b21b      	sxth	r3, r3
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	81da      	strh	r2, [r3, #14]
		HAL_Delay(10);
 8001cd0:	200a      	movs	r0, #10
 8001cd2:	f000 fbed 	bl	80024b0 <HAL_Delay>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2400052b 	.word	0x2400052b
 8001ce4:	24000518 	.word	0x24000518

08001ce8 <MS5611_RequestTemperature>:


void MS5611_RequestTemperature(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = TEMP_OSR_256 + (2 * osr);
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	3328      	adds	r3, #40	; 0x28
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MS5611_RequestTemperature+0x34>)
 8001d00:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR <<1, &MS5611_tx, 1, 100);
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2301      	movs	r3, #1
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <MS5611_RequestTemperature+0x34>)
 8001d0a:	21ee      	movs	r1, #238	; 0xee
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f002 fc8b 	bl	8004628 <HAL_I2C_Master_Transmit>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2400052b 	.word	0x2400052b

08001d20 <MS5611_RequestPressure>:

void MS5611_RequestPressure(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = PRESSURE_OSR_256 + (2 * osr);
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	3320      	adds	r3, #32
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MS5611_RequestPressure+0x34>)
 8001d38:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <MS5611_RequestPressure+0x34>)
 8001d42:	21ee      	movs	r1, #238	; 0xee
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f002 fc6f 	bl	8004628 <HAL_I2C_Master_Transmit>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	2400052b 	.word	0x2400052b

08001d58 <MS5611_ReadTemperature>:

void MS5611_ReadTemperature(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MS5611_ReadTemperature+0x54>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001d68:	2364      	movs	r3, #100	; 0x64
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <MS5611_ReadTemperature+0x54>)
 8001d70:	21ee      	movs	r1, #238	; 0xee
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f002 fc58 	bl	8004628 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_temp, 3, 100);
 8001d78:	2364      	movs	r3, #100	; 0x64
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <MS5611_ReadTemperature+0x58>)
 8001d80:	21ef      	movs	r1, #239	; 0xef
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f002 fd44 	bl	8004810 <HAL_I2C_Master_Receive>
//	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1 , 0x00, 1, MS5611_rx_temp, 3, 100);

	DataStruct->DigitalTemperature_D2 = (MS5611_rx_temp[0] << 16) | (MS5611_rx_temp[1] << 8) | MS5611_rx_temp[2];
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MS5611_ReadTemperature+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MS5611_ReadTemperature+0x58>)
 8001d90:	785b      	ldrb	r3, [r3, #1]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	4313      	orrs	r3, r2
 8001d96:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <MS5611_ReadTemperature+0x58>)
 8001d98:	7892      	ldrb	r2, [r2, #2]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	615a      	str	r2, [r3, #20]
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2400052b 	.word	0x2400052b
 8001db0:	24000524 	.word	0x24000524

08001db4 <MS5611_ReadPressure>:

void MS5611_ReadPressure(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MS5611_ReadPressure+0x54>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001dc4:	2364      	movs	r3, #100	; 0x64
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <MS5611_ReadPressure+0x54>)
 8001dcc:	21ee      	movs	r1, #238	; 0xee
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f002 fc2a 	bl	8004628 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_press, 3, 100);
 8001dd4:	2364      	movs	r3, #100	; 0x64
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2303      	movs	r3, #3
 8001dda:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <MS5611_ReadPressure+0x58>)
 8001ddc:	21ef      	movs	r1, #239	; 0xef
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f002 fd16 	bl	8004810 <HAL_I2C_Master_Receive>
	//HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1, 0x00, 1, MS5611_rx_press, 3, 100);

	DataStruct->DigitalPressure_D1 = MS5611_rx_press[0] << 16 | MS5611_rx_press[1] << 8 | MS5611_rx_press[2];
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MS5611_ReadPressure+0x58>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	041a      	lsls	r2, r3, #16
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MS5611_ReadPressure+0x58>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	4313      	orrs	r3, r2
 8001df2:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <MS5611_ReadPressure+0x58>)
 8001df4:	7892      	ldrb	r2, [r2, #2]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	611a      	str	r2, [r3, #16]
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2400052b 	.word	0x2400052b
 8001e0c:	24000528 	.word	0x24000528

08001e10 <MS5611_CalculateTemperature>:

void MS5611_CalculateTemperature(MS5611_t *DataStruct)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	DataStruct->dT = DataStruct->C[5];
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	895b      	ldrh	r3, [r3, #10]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	619a      	str	r2, [r3, #24]
	DataStruct->dT <<= 8; //Calculated up to C5 * 2^8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	021a      	lsls	r2, r3, #8
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
	DataStruct->dT *= -1; //Apply negative sign
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	425a      	negs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	619a      	str	r2, [r3, #24]
	DataStruct->dT += DataStruct->DigitalTemperature_D2; // = D2 - C5 * 2^8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	4413      	add	r3, r2
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	619a      	str	r2, [r3, #24]

	DataStruct->TEMP = DataStruct->dT * DataStruct->C[6];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	8992      	ldrh	r2, [r2, #12]
 8001e50:	fb03 f202 	mul.w	r2, r3, r2
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	15da      	asrs	r2, r3, #23
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP += 2000;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	61da      	str	r2, [r3, #28]
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	0000      	movs	r0, r0
 8001e7c:	0000      	movs	r0, r0
	...

08001e80 <MS5611_CalculatePressure>:

void MS5611_CalculatePressure(MS5611_t *DataStruct)
{
 8001e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e84:	ed2d 8b02 	vpush	{d8}
 8001e88:	b08c      	sub	sp, #48	; 0x30
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
	DataStruct->OFF = DataStruct->C[2];
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	889b      	ldrh	r3, [r3, #4]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	61fa      	str	r2, [r7, #28]
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001ea0:	e9c3 1208 	strd	r1, r2, [r3, #32]
	DataStruct->OFF <<= 16; //Calculated up to C2 * 2^16
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001eaa:	f04f 0000 	mov.w	r0, #0
 8001eae:	f04f 0100 	mov.w	r1, #0
 8001eb2:	0419      	lsls	r1, r3, #16
 8001eb4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001eb8:	0410      	lsls	r0, r2, #16
 8001eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebc:	e9c3 0108 	strd	r0, r1, [r3, #32]
	DataStruct->OFF += (DataStruct->C[4] * DataStruct->dT) >> 7;
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec8:	891b      	ldrh	r3, [r3, #8]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	fb02 f303 	mul.w	r3, r2, r3
 8001ed4:	11db      	asrs	r3, r3, #7
 8001ed6:	17da      	asrs	r2, r3, #31
 8001ed8:	623b      	str	r3, [r7, #32]
 8001eda:	627a      	str	r2, [r7, #36]	; 0x24
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	18c3      	adds	r3, r0, r3
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	eb41 0303 	adc.w	r3, r1, r3
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ef0:	e9c3 1208 	strd	r1, r2, [r3, #32]


	DataStruct->SENS = DataStruct->C[1];
 8001ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2200      	movs	r2, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f06:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
	DataStruct->SENS <<= 15; // Calculated up to C1 * 2^15
 8001f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	03cb      	lsls	r3, r1, #15
 8001f1a:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8001f1e:	03c2      	lsls	r2, r0, #15
 8001f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->SENS += (DataStruct->C[3] * DataStruct->dT) >>8;
 8001f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f28:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f2e:	88c9      	ldrh	r1, [r1, #6]
 8001f30:	4608      	mov	r0, r1
 8001f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f34:	6989      	ldr	r1, [r1, #24]
 8001f36:	fb00 f101 	mul.w	r1, r0, r1
 8001f3a:	1209      	asrs	r1, r1, #8
 8001f3c:	17c8      	asrs	r0, r1, #31
 8001f3e:	468a      	mov	sl, r1
 8001f40:	4683      	mov	fp, r0
 8001f42:	eb12 010a 	adds.w	r1, r2, sl
 8001f46:	6039      	str	r1, [r7, #0]
 8001f48:	eb43 030b 	adc.w	r3, r3, fp
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f50:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f54:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	DataStruct->P = ((DataStruct->DigitalPressure_D1 * DataStruct->SENS) / pow(2, 21) - DataStruct->OFF) / pow(2, 15);
 8001f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4698      	mov	r8, r3
 8001f60:	4691      	mov	r9, r2
 8001f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f64:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f68:	fb02 f009 	mul.w	r0, r2, r9
 8001f6c:	fb08 f103 	mul.w	r1, r8, r3
 8001f70:	4401      	add	r1, r0
 8001f72:	fba8 4502 	umull	r4, r5, r8, r2
 8001f76:	194b      	adds	r3, r1, r5
 8001f78:	461d      	mov	r5, r3
 8001f7a:	4620      	mov	r0, r4
 8001f7c:	4629      	mov	r1, r5
 8001f7e:	f7fe fb9d 	bl	80006bc <__aeabi_l2d>
 8001f82:	ec41 0b16 	vmov	d6, r0, r1
 8001f86:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8001fc8 <MS5611_CalculatePressure+0x148>
 8001f8a:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fb90 	bl	80006bc <__aeabi_l2d>
 8001f9c:	ec41 0b17 	vmov	d7, r0, r1
 8001fa0:	ee38 6b47 	vsub.f64	d6, d8, d7
 8001fa4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8001fd0 <MS5611_CalculatePressure+0x150>
 8001fa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001fb0:	ee17 2a90 	vmov	r2, s15
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fb8:	bf00      	nop
 8001fba:	3730      	adds	r7, #48	; 0x30
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	ecbd 8b02 	vpop	{d8}
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	41400000 	.word	0x41400000
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	40e00000 	.word	0x40e00000

08001fd8 <softTimerRegisterCallback>:

void softTimerFunctionEvent(void);



TimerId softTimerRegisterCallback( void (*ptr)(void), uint16_t time){
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]

	if(time==0)
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <softTimerRegisterCallback+0x18>
		time=1000;
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	807b      	strh	r3, [r7, #2]

	timerTab[timerCnt].time=time;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <softTimerRegisterCallback+0x80>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4a19      	ldr	r2, [pc, #100]	; (800205c <softTimerRegisterCallback+0x84>)
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	440b      	add	r3, r1
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	3302      	adds	r3, #2
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	801a      	strh	r2, [r3, #0]
	timerTab[timerCnt].state =timerSTOP;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <softTimerRegisterCallback+0x80>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4a13      	ldr	r2, [pc, #76]	; (800205c <softTimerRegisterCallback+0x84>)
 8002010:	460b      	mov	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3301      	adds	r3, #1
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
	timerTab[timerCnt].ptr = ptr;
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <softTimerRegisterCallback+0x80>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	4a0d      	ldr	r2, [pc, #52]	; (800205c <softTimerRegisterCallback+0x84>)
 8002028:	460b      	mov	r3, r1
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3308      	adds	r3, #8
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	601a      	str	r2, [r3, #0]

	timerCnt++;
 8002038:	4b07      	ldr	r3, [pc, #28]	; (8002058 <softTimerRegisterCallback+0x80>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <softTimerRegisterCallback+0x80>)
 8002042:	701a      	strb	r2, [r3, #0]
	return timerCnt-1;
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <softTimerRegisterCallback+0x80>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	240007f8 	.word	0x240007f8
 800205c:	24000578 	.word	0x24000578

08002060 <softTimerChangeState>:

void softTimerChangeState(TimerId timerID, uint8_t newState){
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	460a      	mov	r2, r1
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	4613      	mov	r3, r2
 800206e:	71bb      	strb	r3, [r7, #6]
	if(timerID>=MAX_TIMERS_NUMBER) return;
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	2b1f      	cmp	r3, #31
 8002074:	d82d      	bhi.n	80020d2 <softTimerChangeState+0x72>

	if(newState==timerRUN && timerTab[timerID].state==timerSTOP ) timerTab[timerID].counter=timerTab[timerID].time;
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d11f      	bne.n	80020bc <softTimerChangeState+0x5c>
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4918      	ldr	r1, [pc, #96]	; (80020e0 <softTimerChangeState+0x80>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3301      	adds	r3, #1
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d113      	bne.n	80020bc <softTimerChangeState+0x5c>
 8002094:	79f9      	ldrb	r1, [r7, #7]
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	4811      	ldr	r0, [pc, #68]	; (80020e0 <softTimerChangeState+0x80>)
 800209a:	460b      	mov	r3, r1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	440b      	add	r3, r1
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4403      	add	r3, r0
 80020a4:	3302      	adds	r3, #2
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	b298      	uxth	r0, r3
 80020aa:	490d      	ldr	r1, [pc, #52]	; (80020e0 <softTimerChangeState+0x80>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	3304      	adds	r3, #4
 80020b8:	4602      	mov	r2, r0
 80020ba:	801a      	strh	r2, [r3, #0]
	timerTab[timerID].state=newState;
 80020bc:	79fa      	ldrb	r2, [r7, #7]
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <softTimerChangeState+0x80>)
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3301      	adds	r3, #1
 80020cc:	79ba      	ldrb	r2, [r7, #6]
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e000      	b.n	80020d4 <softTimerChangeState+0x74>
	if(timerID>=MAX_TIMERS_NUMBER) return;
 80020d2:	bf00      	nop

}
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	24000578 	.word	0x24000578

080020e4 <softTimerRefresh>:

void softTimerRefresh(TimerId timerID){
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	if(timerID>=MAX_TIMERS_NUMBER) return;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	2b1f      	cmp	r3, #31
 80020f2:	d814      	bhi.n	800211e <softTimerRefresh+0x3a>

	timerTab[timerID].counter=timerTab[timerID].time;
 80020f4:	79f9      	ldrb	r1, [r7, #7]
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <softTimerRefresh+0x48>)
 80020fa:	460b      	mov	r3, r1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	440b      	add	r3, r1
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4403      	add	r3, r0
 8002104:	3302      	adds	r3, #2
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b298      	uxth	r0, r3
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <softTimerRefresh+0x48>)
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3304      	adds	r3, #4
 8002118:	4602      	mov	r2, r0
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e000      	b.n	8002120 <softTimerRefresh+0x3c>
	if(timerID>=MAX_TIMERS_NUMBER) return;
 800211e:	bf00      	nop

}
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	24000578 	.word	0x24000578

08002130 <softTimerEvent>:

void softTimerEvent(void){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<timerCnt; i++){
 8002136:	2300      	movs	r3, #0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e028      	b.n	800218e <softTimerEvent+0x5e>

		if(timerTab[i].state==timerRUN && timerTab[i].counter==0){
 800213c:	79fa      	ldrb	r2, [r7, #7]
 800213e:	4919      	ldr	r1, [pc, #100]	; (80021a4 <softTimerEvent+0x74>)
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3301      	adds	r3, #1
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d119      	bne.n	8002188 <softTimerEvent+0x58>
 8002154:	79fa      	ldrb	r2, [r7, #7]
 8002156:	4913      	ldr	r1, [pc, #76]	; (80021a4 <softTimerEvent+0x74>)
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	3304      	adds	r3, #4
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <softTimerEvent+0x58>
			timerTab[i].ptr();
 800216c:	79fa      	ldrb	r2, [r7, #7]
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <softTimerEvent+0x74>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3308      	adds	r3, #8
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4798      	blx	r3
			softTimerRefresh(i);
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ffae 	bl	80020e4 <softTimerRefresh>
	for(uint8_t i=0; i<timerCnt; i++){
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3301      	adds	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <softTimerEvent+0x78>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	79fa      	ldrb	r2, [r7, #7]
 8002194:	429a      	cmp	r2, r3
 8002196:	d3d1      	bcc.n	800213c <softTimerEvent+0xc>

		}
	}

	softTimerFunctionEvent();
 8002198:	f000 f8ac 	bl	80022f4 <softTimerFunctionEvent>

}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24000578 	.word	0x24000578
 80021a8:	240007f8 	.word	0x240007f8

080021ac <softTimerTick>:

void softTimerTick(void){
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<timerCnt; i++){
 80021b2:	2300      	movs	r3, #0
 80021b4:	71fb      	strb	r3, [r7, #7]
 80021b6:	e02f      	b.n	8002218 <softTimerTick+0x6c>
		if(timerTab[i].state==timerRUN && timerTab[i].counter) timerTab[i].counter--;
 80021b8:	79fa      	ldrb	r2, [r7, #7]
 80021ba:	4930      	ldr	r1, [pc, #192]	; (800227c <softTimerTick+0xd0>)
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3301      	adds	r3, #1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d120      	bne.n	8002212 <softTimerTick+0x66>
 80021d0:	79fa      	ldrb	r2, [r7, #7]
 80021d2:	492a      	ldr	r1, [pc, #168]	; (800227c <softTimerTick+0xd0>)
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3304      	adds	r3, #4
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d014      	beq.n	8002212 <softTimerTick+0x66>
 80021e8:	79fa      	ldrb	r2, [r7, #7]
 80021ea:	4924      	ldr	r1, [pc, #144]	; (800227c <softTimerTick+0xd0>)
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	3304      	adds	r3, #4
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b298      	uxth	r0, r3
 8002200:	491e      	ldr	r1, [pc, #120]	; (800227c <softTimerTick+0xd0>)
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	4602      	mov	r2, r0
 8002210:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<timerCnt; i++){
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	3301      	adds	r3, #1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <softTimerTick+0xd4>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3ca      	bcc.n	80021b8 <softTimerTick+0xc>
	}

	for(uint8_t i=0; i<functionDelayCnt;i++)
 8002222:	2300      	movs	r3, #0
 8002224:	71bb      	strb	r3, [r7, #6]
 8002226:	e013      	b.n	8002250 <softTimerTick+0xa4>
		if(functionDelayTab[i].time) functionDelayTab[i].time--;
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	4a16      	ldr	r2, [pc, #88]	; (8002284 <softTimerTick+0xd8>)
 800222c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <softTimerTick+0x9e>
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	4a12      	ldr	r2, [pc, #72]	; (8002284 <softTimerTick+0xd8>)
 800223a:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 800223e:	b292      	uxth	r2, r2
 8002240:	3a01      	subs	r2, #1
 8002242:	b291      	uxth	r1, r2
 8002244:	4a0f      	ldr	r2, [pc, #60]	; (8002284 <softTimerTick+0xd8>)
 8002246:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	for(uint8_t i=0; i<functionDelayCnt;i++)
 800224a:	79bb      	ldrb	r3, [r7, #6]
 800224c:	3301      	adds	r3, #1
 800224e:	71bb      	strb	r3, [r7, #6]
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <softTimerTick+0xdc>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	79ba      	ldrb	r2, [r7, #6]
 8002256:	429a      	cmp	r2, r3
 8002258:	d3e6      	bcc.n	8002228 <softTimerTick+0x7c>

	if(oneTimeTimer)oneTimeTimer--;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <softTimerTick+0xe0>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <softTimerTick+0xc2>
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <softTimerTick+0xe0>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <softTimerTick+0xe0>)
 800226c:	801a      	strh	r2, [r3, #0]

}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	24000578 	.word	0x24000578
 8002280:	240007f8 	.word	0x240007f8
 8002284:	240006f8 	.word	0x240006f8
 8002288:	240007f9 	.word	0x240007f9
 800228c:	240007fa 	.word	0x240007fa

08002290 <softTimerFunctionExeAndRemove>:
	if(!oneTimeTimer) return 1;
//	if(mainEvents)gloabalEvents();	//TODO

	return 0;
}
void softTimerFunctionExeAndRemove(uint8_t Id){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]

	functionDelayTab[Id].ptr();
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <softTimerFunctionExeAndRemove+0x5c>)
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4798      	blx	r3
	for(uint8_t i=(Id+1); i<functionDelayCnt;i++){
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	3301      	adds	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
 80022ac:	e00f      	b.n	80022ce <softTimerFunctionExeAndRemove+0x3e>

		functionDelayTab[i-1]=functionDelayTab[i];
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <softTimerFunctionExeAndRemove+0x5c>)
 80022b6:	490d      	ldr	r1, [pc, #52]	; (80022ec <softTimerFunctionExeAndRemove+0x5c>)
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4403      	add	r3, r0
 80022bc:	00d2      	lsls	r2, r2, #3
 80022be:	440a      	add	r2, r1
 80022c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c4:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint8_t i=(Id+1); i<functionDelayCnt;i++){
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	3301      	adds	r3, #1
 80022cc:	73fb      	strb	r3, [r7, #15]
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <softTimerFunctionExeAndRemove+0x60>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d3ea      	bcc.n	80022ae <softTimerFunctionExeAndRemove+0x1e>

	}
	functionDelayCnt--;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <softTimerFunctionExeAndRemove+0x60>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <softTimerFunctionExeAndRemove+0x60>)
 80022e2:	701a      	strb	r2, [r3, #0]

}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	240006f8 	.word	0x240006f8
 80022f0:	240007f9 	.word	0x240007f9

080022f4 <softTimerFunctionEvent>:
void softTimerFunctionEvent(void){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<functionDelayCnt;i++){
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	e00d      	b.n	800231c <softTimerFunctionEvent+0x28>

		if(functionDelayTab[i].time==0) softTimerFunctionExeAndRemove(i);
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <softTimerFunctionEvent+0x3c>)
 8002304:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d103      	bne.n	8002316 <softTimerFunctionEvent+0x22>
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ffbd 	bl	8002290 <softTimerFunctionExeAndRemove>
	for(uint8_t i=0; i<functionDelayCnt;i++){
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <softTimerFunctionEvent+0x40>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	79fa      	ldrb	r2, [r7, #7]
 8002322:	429a      	cmp	r2, r3
 8002324:	d3ec      	bcc.n	8002300 <softTimerFunctionEvent+0xc>

	}

}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	240006f8 	.word	0x240006f8
 8002334:	240007f9 	.word	0x240007f9

08002338 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002338:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002370 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800233c:	f7ff fa30 	bl	80017a0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002342:	490d      	ldr	r1, [pc, #52]	; (8002378 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002358:	4c0a      	ldr	r4, [pc, #40]	; (8002384 <LoopFillZerobss+0x22>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002366:	f006 fce9 	bl	8008d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236a:	f7ff f843 	bl	80013f4 <main>
  bx  lr
 800236e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002370:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002374:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002378:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 800237c:	08009ea8 	.word	0x08009ea8
  ldr r2, =_sbss
 8002380:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8002384:	24000810 	.word	0x24000810

08002388 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002388:	e7fe      	b.n	8002388 <ADC_IRQHandler>
	...

0800238c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002392:	2003      	movs	r0, #3
 8002394:	f000 f980 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002398:	f003 fdbc 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_Init+0x68>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	4913      	ldr	r1, [pc, #76]	; (80023f8 <HAL_Init+0x6c>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
 80023b4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_Init+0x68>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	4a0e      	ldr	r2, [pc, #56]	; (80023f8 <HAL_Init+0x6c>)
 80023c0:	5cd3      	ldrb	r3, [r2, r3]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
 80023cc:	4a0b      	ldr	r2, [pc, #44]	; (80023fc <HAL_Init+0x70>)
 80023ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_Init+0x74>)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 f814 	bl	8002404 <HAL_InitTick>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e002      	b.n	80023ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023e6:	f7ff f94b 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	58024400 	.word	0x58024400
 80023f8:	08009e24 	.word	0x08009e24
 80023fc:	24000014 	.word	0x24000014
 8002400:	24000010 	.word	0x24000010

08002404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_InitTick+0x60>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e021      	b.n	800245c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <HAL_InitTick+0x64>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_InitTick+0x60>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4619      	mov	r1, r3
 8002422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002426:	fbb3 f3f1 	udiv	r3, r3, r1
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f965 	bl	80026fe <HAL_SYSTICK_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e00e      	b.n	800245c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d80a      	bhi.n	800245a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f000 f92f 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002450:	4a06      	ldr	r2, [pc, #24]	; (800246c <HAL_InitTick+0x68>)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	e000      	b.n	800245c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	2400001c 	.word	0x2400001c
 8002468:	24000010 	.word	0x24000010
 800246c:	24000018 	.word	0x24000018

08002470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_IncTick+0x20>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_IncTick+0x24>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4413      	add	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_IncTick+0x24>)
 8002482:	6013      	str	r3, [r2, #0]
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2400001c 	.word	0x2400001c
 8002494:	240007fc 	.word	0x240007fc

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	240007fc 	.word	0x240007fc

080024b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7ff ffee 	bl	8002498 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c8:	d005      	beq.n	80024d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_Delay+0x44>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024d6:	bf00      	nop
 80024d8:	f7ff ffde 	bl	8002498 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d8f7      	bhi.n	80024d8 <HAL_Delay+0x28>
  {
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2400001c 	.word	0x2400001c

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <__NVIC_SetPriorityGrouping+0x44>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x40>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	05fa0000 	.word	0x05fa0000

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	; (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	88fb      	ldrh	r3, [r7, #6]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f7ff ff8e 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff29 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff40 	bl	8002540 <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff90 	bl	80025ec <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5f 	bl	8002598 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff33 	bl	800255c <__NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffa4 	bl	8002654 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002720:	f7ff feba 	bl	8002498 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e37f      	b.n	8002e30 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a66      	ldr	r2, [pc, #408]	; (80028d0 <HAL_DMA_Init+0x1b8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d04a      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_DMA_Init+0x1bc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d045      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a63      	ldr	r2, [pc, #396]	; (80028d8 <HAL_DMA_Init+0x1c0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d040      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a62      	ldr	r2, [pc, #392]	; (80028dc <HAL_DMA_Init+0x1c4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d03b      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a60      	ldr	r2, [pc, #384]	; (80028e0 <HAL_DMA_Init+0x1c8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d036      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5f      	ldr	r2, [pc, #380]	; (80028e4 <HAL_DMA_Init+0x1cc>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d031      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a5d      	ldr	r2, [pc, #372]	; (80028e8 <HAL_DMA_Init+0x1d0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02c      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a5c      	ldr	r2, [pc, #368]	; (80028ec <HAL_DMA_Init+0x1d4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d027      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a5a      	ldr	r2, [pc, #360]	; (80028f0 <HAL_DMA_Init+0x1d8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d022      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a59      	ldr	r2, [pc, #356]	; (80028f4 <HAL_DMA_Init+0x1dc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d01d      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a57      	ldr	r2, [pc, #348]	; (80028f8 <HAL_DMA_Init+0x1e0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d018      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <HAL_DMA_Init+0x1e4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d013      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_DMA_Init+0x1e8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00e      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a53      	ldr	r2, [pc, #332]	; (8002904 <HAL_DMA_Init+0x1ec>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d009      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a51      	ldr	r2, [pc, #324]	; (8002908 <HAL_DMA_Init+0x1f0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_DMA_Init+0xb8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a50      	ldr	r2, [pc, #320]	; (800290c <HAL_DMA_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d101      	bne.n	80027d4 <HAL_DMA_Init+0xbc>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_DMA_Init+0xbe>
 80027d4:	2300      	movs	r3, #0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 813c 	beq.w	8002a54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <HAL_DMA_Init+0x1b8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d04a      	beq.n	800288c <HAL_DMA_Init+0x174>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a36      	ldr	r2, [pc, #216]	; (80028d4 <HAL_DMA_Init+0x1bc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d045      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_DMA_Init+0x1c0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d040      	beq.n	800288c <HAL_DMA_Init+0x174>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a33      	ldr	r2, [pc, #204]	; (80028dc <HAL_DMA_Init+0x1c4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d03b      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_DMA_Init+0x1c8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d036      	beq.n	800288c <HAL_DMA_Init+0x174>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <HAL_DMA_Init+0x1cc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d031      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a2e      	ldr	r2, [pc, #184]	; (80028e8 <HAL_DMA_Init+0x1d0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d02c      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_DMA_Init+0x1d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d027      	beq.n	800288c <HAL_DMA_Init+0x174>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2b      	ldr	r2, [pc, #172]	; (80028f0 <HAL_DMA_Init+0x1d8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d022      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <HAL_DMA_Init+0x1dc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d01d      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_DMA_Init+0x1e0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d018      	beq.n	800288c <HAL_DMA_Init+0x174>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_DMA_Init+0x1e4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d013      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_DMA_Init+0x1e8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_DMA_Init+0x174>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_DMA_Init+0x1ec>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d009      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_DMA_Init+0x1f0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_DMA_Init+0x174>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a21      	ldr	r2, [pc, #132]	; (800290c <HAL_DMA_Init+0x1f4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <HAL_DMA_Init+0x186>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e007      	b.n	80028ae <HAL_DMA_Init+0x196>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028ae:	e02f      	b.n	8002910 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028b0:	f7ff fdf2 	bl	8002498 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d928      	bls.n	8002910 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e2af      	b.n	8002e30 <HAL_DMA_Init+0x718>
 80028d0:	40020010 	.word	0x40020010
 80028d4:	40020028 	.word	0x40020028
 80028d8:	40020040 	.word	0x40020040
 80028dc:	40020058 	.word	0x40020058
 80028e0:	40020070 	.word	0x40020070
 80028e4:	40020088 	.word	0x40020088
 80028e8:	400200a0 	.word	0x400200a0
 80028ec:	400200b8 	.word	0x400200b8
 80028f0:	40020410 	.word	0x40020410
 80028f4:	40020428 	.word	0x40020428
 80028f8:	40020440 	.word	0x40020440
 80028fc:	40020458 	.word	0x40020458
 8002900:	40020470 	.word	0x40020470
 8002904:	40020488 	.word	0x40020488
 8002908:	400204a0 	.word	0x400204a0
 800290c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1c8      	bne.n	80028b0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_DMA_Init+0x3e0>)
 800292a:	4013      	ands	r3, r2
 800292c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002936:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002942:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2b04      	cmp	r3, #4
 8002962:	d107      	bne.n	8002974 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4313      	orrs	r3, r2
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b28      	cmp	r3, #40	; 0x28
 800297a:	d903      	bls.n	8002984 <HAL_DMA_Init+0x26c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b2e      	cmp	r3, #46	; 0x2e
 8002982:	d91f      	bls.n	80029c4 <HAL_DMA_Init+0x2ac>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b3e      	cmp	r3, #62	; 0x3e
 800298a:	d903      	bls.n	8002994 <HAL_DMA_Init+0x27c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	2b42      	cmp	r3, #66	; 0x42
 8002992:	d917      	bls.n	80029c4 <HAL_DMA_Init+0x2ac>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b46      	cmp	r3, #70	; 0x46
 800299a:	d903      	bls.n	80029a4 <HAL_DMA_Init+0x28c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b48      	cmp	r3, #72	; 0x48
 80029a2:	d90f      	bls.n	80029c4 <HAL_DMA_Init+0x2ac>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b4e      	cmp	r3, #78	; 0x4e
 80029aa:	d903      	bls.n	80029b4 <HAL_DMA_Init+0x29c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b52      	cmp	r3, #82	; 0x52
 80029b2:	d907      	bls.n	80029c4 <HAL_DMA_Init+0x2ac>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b73      	cmp	r3, #115	; 0x73
 80029ba:	d905      	bls.n	80029c8 <HAL_DMA_Init+0x2b0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b77      	cmp	r3, #119	; 0x77
 80029c2:	d801      	bhi.n	80029c8 <HAL_DMA_Init+0x2b0>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_DMA_Init+0x2b2>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	697a      	ldr	r2, [r7, #20]
 80029dc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 0307 	bic.w	r3, r3, #7
 80029ec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d117      	bne.n	8002a30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00e      	beq.n	8002a30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f001 fa24 	bl	8003e60 <DMA_CheckFifoParam>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e1ff      	b.n	8002e30 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 f95f 	bl	8003cfc <DMA_CalcBaseAndBitshift>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f003 031f 	and.w	r3, r3, #31
 8002a4a:	223f      	movs	r2, #63	; 0x3f
 8002a4c:	409a      	lsls	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	e0fe      	b.n	8002c52 <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_DMA_Init+0x3e4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_DMA_Init+0x3e8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <HAL_DMA_Init+0x3ec>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a24      	ldr	r2, [pc, #144]	; (8002b08 <HAL_DMA_Init+0x3f0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a22      	ldr	r2, [pc, #136]	; (8002b0c <HAL_DMA_Init+0x3f4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <HAL_DMA_Init+0x3f8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <HAL_DMA_Init+0x3fc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <HAL_DMA_Init+0x400>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_DMA_Init+0x404>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_DMA_Init+0x408>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a19      	ldr	r2, [pc, #100]	; (8002b24 <HAL_DMA_Init+0x40c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_DMA_Init+0x410>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <HAL_DMA_Init+0x414>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_DMA_Init+0x418>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_DMA_Init+0x41c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Init+0x3dc>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <HAL_DMA_Init+0x420>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d123      	bne.n	8002b3c <HAL_DMA_Init+0x424>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e022      	b.n	8002b3e <HAL_DMA_Init+0x426>
 8002af8:	fe10803f 	.word	0xfe10803f
 8002afc:	48022c08 	.word	0x48022c08
 8002b00:	48022c1c 	.word	0x48022c1c
 8002b04:	48022c30 	.word	0x48022c30
 8002b08:	48022c44 	.word	0x48022c44
 8002b0c:	48022c58 	.word	0x48022c58
 8002b10:	48022c6c 	.word	0x48022c6c
 8002b14:	48022c80 	.word	0x48022c80
 8002b18:	48022c94 	.word	0x48022c94
 8002b1c:	58025408 	.word	0x58025408
 8002b20:	5802541c 	.word	0x5802541c
 8002b24:	58025430 	.word	0x58025430
 8002b28:	58025444 	.word	0x58025444
 8002b2c:	58025458 	.word	0x58025458
 8002b30:	5802546c 	.word	0x5802546c
 8002b34:	58025480 	.word	0x58025480
 8002b38:	58025494 	.word	0x58025494
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d07e      	beq.n	8002c40 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a80      	ldr	r2, [pc, #512]	; (8002d48 <HAL_DMA_Init+0x630>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d021      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_DMA_Init+0x634>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01c      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a7d      	ldr	r2, [pc, #500]	; (8002d50 <HAL_DMA_Init+0x638>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d017      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a7b      	ldr	r2, [pc, #492]	; (8002d54 <HAL_DMA_Init+0x63c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d012      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a7a      	ldr	r2, [pc, #488]	; (8002d58 <HAL_DMA_Init+0x640>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00d      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <HAL_DMA_Init+0x644>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d008      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a77      	ldr	r2, [pc, #476]	; (8002d60 <HAL_DMA_Init+0x648>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <HAL_DMA_Init+0x478>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a75      	ldr	r2, [pc, #468]	; (8002d64 <HAL_DMA_Init+0x64c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <HAL_DMA_Init+0x650>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b40      	cmp	r3, #64	; 0x40
 8002bb8:	d008      	beq.n	8002bcc <HAL_DMA_Init+0x4b4>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b80      	cmp	r3, #128	; 0x80
 8002bc0:	d102      	bne.n	8002bc8 <HAL_DMA_Init+0x4b0>
 8002bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bc6:	e002      	b.n	8002bce <HAL_DMA_Init+0x4b6>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_DMA_Init+0x4b6>
 8002bcc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bfc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b56      	ldr	r3, [pc, #344]	; (8002d6c <HAL_DMA_Init+0x654>)
 8002c14:	4413      	add	r3, r2
 8002c16:	4a56      	ldr	r2, [pc, #344]	; (8002d70 <HAL_DMA_Init+0x658>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f001 f869 	bl	8003cfc <DMA_CalcBaseAndBitshift>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	2201      	movs	r2, #1
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	e008      	b.n	8002c52 <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2240      	movs	r2, #64	; 0x40
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0ee      	b.n	8002e30 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a47      	ldr	r2, [pc, #284]	; (8002d74 <HAL_DMA_Init+0x65c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d072      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a45      	ldr	r2, [pc, #276]	; (8002d78 <HAL_DMA_Init+0x660>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d06d      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a44      	ldr	r2, [pc, #272]	; (8002d7c <HAL_DMA_Init+0x664>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d068      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a42      	ldr	r2, [pc, #264]	; (8002d80 <HAL_DMA_Init+0x668>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d063      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a41      	ldr	r2, [pc, #260]	; (8002d84 <HAL_DMA_Init+0x66c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d05e      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <HAL_DMA_Init+0x670>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d059      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a3e      	ldr	r2, [pc, #248]	; (8002d8c <HAL_DMA_Init+0x674>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d054      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a3c      	ldr	r2, [pc, #240]	; (8002d90 <HAL_DMA_Init+0x678>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d04f      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <HAL_DMA_Init+0x67c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a39      	ldr	r2, [pc, #228]	; (8002d98 <HAL_DMA_Init+0x680>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <HAL_DMA_Init+0x684>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <HAL_DMA_Init+0x688>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <HAL_DMA_Init+0x68c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a33      	ldr	r2, [pc, #204]	; (8002da8 <HAL_DMA_Init+0x690>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a32      	ldr	r2, [pc, #200]	; (8002dac <HAL_DMA_Init+0x694>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <HAL_DMA_Init+0x698>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a14      	ldr	r2, [pc, #80]	; (8002d48 <HAL_DMA_Init+0x630>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <HAL_DMA_Init+0x634>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <HAL_DMA_Init+0x638>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_DMA_Init+0x63c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_DMA_Init+0x640>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <HAL_DMA_Init+0x644>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <HAL_DMA_Init+0x648>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Init+0x62a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_DMA_Init+0x64c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d138      	bne.n	8002db4 <HAL_DMA_Init+0x69c>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e037      	b.n	8002db6 <HAL_DMA_Init+0x69e>
 8002d46:	bf00      	nop
 8002d48:	58025408 	.word	0x58025408
 8002d4c:	5802541c 	.word	0x5802541c
 8002d50:	58025430 	.word	0x58025430
 8002d54:	58025444 	.word	0x58025444
 8002d58:	58025458 	.word	0x58025458
 8002d5c:	5802546c 	.word	0x5802546c
 8002d60:	58025480 	.word	0x58025480
 8002d64:	58025494 	.word	0x58025494
 8002d68:	fffe000f 	.word	0xfffe000f
 8002d6c:	a7fdabf8 	.word	0xa7fdabf8
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	40020010 	.word	0x40020010
 8002d78:	40020028 	.word	0x40020028
 8002d7c:	40020040 	.word	0x40020040
 8002d80:	40020058 	.word	0x40020058
 8002d84:	40020070 	.word	0x40020070
 8002d88:	40020088 	.word	0x40020088
 8002d8c:	400200a0 	.word	0x400200a0
 8002d90:	400200b8 	.word	0x400200b8
 8002d94:	40020410 	.word	0x40020410
 8002d98:	40020428 	.word	0x40020428
 8002d9c:	40020440 	.word	0x40020440
 8002da0:	40020458 	.word	0x40020458
 8002da4:	40020470 	.word	0x40020470
 8002da8:	40020488 	.word	0x40020488
 8002dac:	400204a0 	.word	0x400204a0
 8002db0:	400204b8 	.word	0x400204b8
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d032      	beq.n	8002e20 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f001 f8cc 	bl	8003f58 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d102      	bne.n	8002dce <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002de2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_DMA_Init+0x6f6>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d80c      	bhi.n	8002e0e <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f001 f949 	bl	800408c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	e008      	b.n	8002e20 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08a      	sub	sp, #40	; 0x28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e44:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_DMA_IRQHandler+0x1ac>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a67      	ldr	r2, [pc, #412]	; (8002fe8 <HAL_DMA_IRQHandler+0x1b0>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0a9b      	lsrs	r3, r3, #10
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a5f      	ldr	r2, [pc, #380]	; (8002fec <HAL_DMA_IRQHandler+0x1b4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04a      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a5d      	ldr	r2, [pc, #372]	; (8002ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d045      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a5c      	ldr	r2, [pc, #368]	; (8002ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d040      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d03b      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a59      	ldr	r2, [pc, #356]	; (8002ffc <HAL_DMA_IRQHandler+0x1c4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d036      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a57      	ldr	r2, [pc, #348]	; (8003000 <HAL_DMA_IRQHandler+0x1c8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a56      	ldr	r2, [pc, #344]	; (8003004 <HAL_DMA_IRQHandler+0x1cc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d02c      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a54      	ldr	r2, [pc, #336]	; (8003008 <HAL_DMA_IRQHandler+0x1d0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d027      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a53      	ldr	r2, [pc, #332]	; (800300c <HAL_DMA_IRQHandler+0x1d4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a51      	ldr	r2, [pc, #324]	; (8003010 <HAL_DMA_IRQHandler+0x1d8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01d      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a50      	ldr	r2, [pc, #320]	; (8003014 <HAL_DMA_IRQHandler+0x1dc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d018      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_DMA_IRQHandler+0x1e0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_DMA_IRQHandler+0x1e4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a4b      	ldr	r2, [pc, #300]	; (8003020 <HAL_DMA_IRQHandler+0x1e8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a4a      	ldr	r2, [pc, #296]	; (8003024 <HAL_DMA_IRQHandler+0x1ec>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_DMA_IRQHandler+0xd2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a48      	ldr	r2, [pc, #288]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_IRQHandler+0xd6>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_DMA_IRQHandler+0xd8>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 842b 	beq.w	800376c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	f003 031f 	and.w	r3, r3, #31
 8002f1e:	2208      	movs	r2, #8
 8002f20:	409a      	lsls	r2, r3
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80a2 	beq.w	8003070 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_DMA_IRQHandler+0x1b4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d04a      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_DMA_IRQHandler+0x1b8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d045      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	; (8002ff4 <HAL_DMA_IRQHandler+0x1bc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d040      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	; (8002ff8 <HAL_DMA_IRQHandler+0x1c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d03b      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	; (8002ffc <HAL_DMA_IRQHandler+0x1c4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d036      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	; (8003000 <HAL_DMA_IRQHandler+0x1c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d031      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	; (8003004 <HAL_DMA_IRQHandler+0x1cc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02c      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_DMA_IRQHandler+0x1d0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d027      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_DMA_IRQHandler+0x1d4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d022      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <HAL_DMA_IRQHandler+0x1d8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d01d      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_DMA_IRQHandler+0x1dc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d018      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	; (8003018 <HAL_DMA_IRQHandler+0x1e0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d013      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a1c      	ldr	r2, [pc, #112]	; (800301c <HAL_DMA_IRQHandler+0x1e4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00e      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1b      	ldr	r2, [pc, #108]	; (8003020 <HAL_DMA_IRQHandler+0x1e8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d009      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a19      	ldr	r2, [pc, #100]	; (8003024 <HAL_DMA_IRQHandler+0x1ec>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d004      	beq.n	8002fcc <HAL_DMA_IRQHandler+0x194>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d12f      	bne.n	800302c <HAL_DMA_IRQHandler+0x1f4>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0304 	and.w	r3, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e02e      	b.n	8003040 <HAL_DMA_IRQHandler+0x208>
 8002fe2:	bf00      	nop
 8002fe4:	24000010 	.word	0x24000010
 8002fe8:	1b4e81b5 	.word	0x1b4e81b5
 8002fec:	40020010 	.word	0x40020010
 8002ff0:	40020028 	.word	0x40020028
 8002ff4:	40020040 	.word	0x40020040
 8002ff8:	40020058 	.word	0x40020058
 8002ffc:	40020070 	.word	0x40020070
 8003000:	40020088 	.word	0x40020088
 8003004:	400200a0 	.word	0x400200a0
 8003008:	400200b8 	.word	0x400200b8
 800300c:	40020410 	.word	0x40020410
 8003010:	40020428 	.word	0x40020428
 8003014:	40020440 	.word	0x40020440
 8003018:	40020458 	.word	0x40020458
 800301c:	40020470 	.word	0x40020470
 8003020:	40020488 	.word	0x40020488
 8003024:	400204a0 	.word	0x400204a0
 8003028:	400204b8 	.word	0x400204b8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d015      	beq.n	8003070 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	2208      	movs	r2, #8
 800305e:	409a      	lsls	r2, r3
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	fa22 f303 	lsr.w	r3, r2, r3
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d06e      	beq.n	8003164 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a69      	ldr	r2, [pc, #420]	; (8003230 <HAL_DMA_IRQHandler+0x3f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04a      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a67      	ldr	r2, [pc, #412]	; (8003234 <HAL_DMA_IRQHandler+0x3fc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d045      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a66      	ldr	r2, [pc, #408]	; (8003238 <HAL_DMA_IRQHandler+0x400>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d040      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a64      	ldr	r2, [pc, #400]	; (800323c <HAL_DMA_IRQHandler+0x404>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d03b      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a63      	ldr	r2, [pc, #396]	; (8003240 <HAL_DMA_IRQHandler+0x408>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d036      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a61      	ldr	r2, [pc, #388]	; (8003244 <HAL_DMA_IRQHandler+0x40c>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d031      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a60      	ldr	r2, [pc, #384]	; (8003248 <HAL_DMA_IRQHandler+0x410>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d02c      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5e      	ldr	r2, [pc, #376]	; (800324c <HAL_DMA_IRQHandler+0x414>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d027      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a5d      	ldr	r2, [pc, #372]	; (8003250 <HAL_DMA_IRQHandler+0x418>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5b      	ldr	r2, [pc, #364]	; (8003254 <HAL_DMA_IRQHandler+0x41c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <HAL_DMA_IRQHandler+0x420>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a58      	ldr	r2, [pc, #352]	; (800325c <HAL_DMA_IRQHandler+0x424>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a57      	ldr	r2, [pc, #348]	; (8003260 <HAL_DMA_IRQHandler+0x428>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <HAL_DMA_IRQHandler+0x42c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a54      	ldr	r2, [pc, #336]	; (8003268 <HAL_DMA_IRQHandler+0x430>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_IRQHandler+0x2ee>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a52      	ldr	r2, [pc, #328]	; (800326c <HAL_DMA_IRQHandler+0x434>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10a      	bne.n	800313c <HAL_DMA_IRQHandler+0x304>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e003      	b.n	8003144 <HAL_DMA_IRQHandler+0x30c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00d      	beq.n	8003164 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	2201      	movs	r2, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0202 	orr.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2204      	movs	r2, #4
 800316e:	409a      	lsls	r2, r3
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 808f 	beq.w	8003298 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2c      	ldr	r2, [pc, #176]	; (8003230 <HAL_DMA_IRQHandler+0x3f8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d04a      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2a      	ldr	r2, [pc, #168]	; (8003234 <HAL_DMA_IRQHandler+0x3fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d045      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a29      	ldr	r2, [pc, #164]	; (8003238 <HAL_DMA_IRQHandler+0x400>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a27      	ldr	r2, [pc, #156]	; (800323c <HAL_DMA_IRQHandler+0x404>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d03b      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_DMA_IRQHandler+0x408>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d036      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a24      	ldr	r2, [pc, #144]	; (8003244 <HAL_DMA_IRQHandler+0x40c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <HAL_DMA_IRQHandler+0x410>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02c      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a21      	ldr	r2, [pc, #132]	; (800324c <HAL_DMA_IRQHandler+0x414>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d027      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a20      	ldr	r2, [pc, #128]	; (8003250 <HAL_DMA_IRQHandler+0x418>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1e      	ldr	r2, [pc, #120]	; (8003254 <HAL_DMA_IRQHandler+0x41c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01d      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1d      	ldr	r2, [pc, #116]	; (8003258 <HAL_DMA_IRQHandler+0x420>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_DMA_IRQHandler+0x424>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <HAL_DMA_IRQHandler+0x428>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a18      	ldr	r2, [pc, #96]	; (8003264 <HAL_DMA_IRQHandler+0x42c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a17      	ldr	r2, [pc, #92]	; (8003268 <HAL_DMA_IRQHandler+0x430>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_DMA_IRQHandler+0x3e2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a15      	ldr	r2, [pc, #84]	; (800326c <HAL_DMA_IRQHandler+0x434>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d12a      	bne.n	8003270 <HAL_DMA_IRQHandler+0x438>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e023      	b.n	8003278 <HAL_DMA_IRQHandler+0x440>
 8003230:	40020010 	.word	0x40020010
 8003234:	40020028 	.word	0x40020028
 8003238:	40020040 	.word	0x40020040
 800323c:	40020058 	.word	0x40020058
 8003240:	40020070 	.word	0x40020070
 8003244:	40020088 	.word	0x40020088
 8003248:	400200a0 	.word	0x400200a0
 800324c:	400200b8 	.word	0x400200b8
 8003250:	40020410 	.word	0x40020410
 8003254:	40020428 	.word	0x40020428
 8003258:	40020440 	.word	0x40020440
 800325c:	40020458 	.word	0x40020458
 8003260:	40020470 	.word	0x40020470
 8003264:	40020488 	.word	0x40020488
 8003268:	400204a0 	.word	0x400204a0
 800326c:	400204b8 	.word	0x400204b8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	2204      	movs	r2, #4
 8003286:	409a      	lsls	r2, r3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003290:	f043 0204 	orr.w	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2210      	movs	r2, #16
 80032a2:	409a      	lsls	r2, r3
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80a6 	beq.w	80033fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a85      	ldr	r2, [pc, #532]	; (80034c8 <HAL_DMA_IRQHandler+0x690>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d04a      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a83      	ldr	r2, [pc, #524]	; (80034cc <HAL_DMA_IRQHandler+0x694>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d045      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a82      	ldr	r2, [pc, #520]	; (80034d0 <HAL_DMA_IRQHandler+0x698>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d040      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a80      	ldr	r2, [pc, #512]	; (80034d4 <HAL_DMA_IRQHandler+0x69c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d03b      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7f      	ldr	r2, [pc, #508]	; (80034d8 <HAL_DMA_IRQHandler+0x6a0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d036      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7d      	ldr	r2, [pc, #500]	; (80034dc <HAL_DMA_IRQHandler+0x6a4>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d031      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7c      	ldr	r2, [pc, #496]	; (80034e0 <HAL_DMA_IRQHandler+0x6a8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d02c      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7a      	ldr	r2, [pc, #488]	; (80034e4 <HAL_DMA_IRQHandler+0x6ac>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d027      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a79      	ldr	r2, [pc, #484]	; (80034e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d022      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a77      	ldr	r2, [pc, #476]	; (80034ec <HAL_DMA_IRQHandler+0x6b4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01d      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a76      	ldr	r2, [pc, #472]	; (80034f0 <HAL_DMA_IRQHandler+0x6b8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d018      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a74      	ldr	r2, [pc, #464]	; (80034f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a73      	ldr	r2, [pc, #460]	; (80034f8 <HAL_DMA_IRQHandler+0x6c0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00e      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a71      	ldr	r2, [pc, #452]	; (80034fc <HAL_DMA_IRQHandler+0x6c4>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a70      	ldr	r2, [pc, #448]	; (8003500 <HAL_DMA_IRQHandler+0x6c8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d004      	beq.n	800334e <HAL_DMA_IRQHandler+0x516>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a6e      	ldr	r2, [pc, #440]	; (8003504 <HAL_DMA_IRQHandler+0x6cc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10a      	bne.n	8003364 <HAL_DMA_IRQHandler+0x52c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0308 	and.w	r3, r3, #8
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e009      	b.n	8003378 <HAL_DMA_IRQHandler+0x540>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf14      	ite	ne
 8003372:	2301      	movne	r3, #1
 8003374:	2300      	moveq	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03e      	beq.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2210      	movs	r2, #16
 8003386:	409a      	lsls	r2, r3
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d018      	beq.n	80033cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d108      	bne.n	80033ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d024      	beq.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
 80033b8:	e01f      	b.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01b      	beq.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
 80033ca:	e016      	b.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d107      	bne.n	80033ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0208 	bic.w	r2, r2, #8
 80033e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2220      	movs	r2, #32
 8003404:	409a      	lsls	r2, r3
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8110 	beq.w	8003630 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <HAL_DMA_IRQHandler+0x690>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d04a      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <HAL_DMA_IRQHandler+0x694>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d045      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <HAL_DMA_IRQHandler+0x698>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d040      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <HAL_DMA_IRQHandler+0x69c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d03b      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a26      	ldr	r2, [pc, #152]	; (80034d8 <HAL_DMA_IRQHandler+0x6a0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d036      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a25      	ldr	r2, [pc, #148]	; (80034dc <HAL_DMA_IRQHandler+0x6a4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d031      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <HAL_DMA_IRQHandler+0x6a8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d02c      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_DMA_IRQHandler+0x6ac>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d027      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_DMA_IRQHandler+0x6b0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <HAL_DMA_IRQHandler+0x6b4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01d      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_DMA_IRQHandler+0x6b8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d018      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_DMA_IRQHandler+0x6bc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_DMA_IRQHandler+0x6c0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d00e      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a19      	ldr	r2, [pc, #100]	; (80034fc <HAL_DMA_IRQHandler+0x6c4>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d009      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_DMA_IRQHandler+0x6c8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_DMA_IRQHandler+0x678>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a16      	ldr	r2, [pc, #88]	; (8003504 <HAL_DMA_IRQHandler+0x6cc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d12b      	bne.n	8003508 <HAL_DMA_IRQHandler+0x6d0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0310 	and.w	r3, r3, #16
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	e02a      	b.n	800351c <HAL_DMA_IRQHandler+0x6e4>
 80034c6:	bf00      	nop
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	bf14      	ite	ne
 8003516:	2301      	movne	r3, #1
 8003518:	2300      	moveq	r3, #0
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 8087 	beq.w	8003630 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2220      	movs	r2, #32
 800352c:	409a      	lsls	r2, r3
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b04      	cmp	r3, #4
 800353c:	d139      	bne.n	80035b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0216 	bic.w	r2, r2, #22
 800354c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d103      	bne.n	800356e <HAL_DMA_IRQHandler+0x736>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356a:	2b00      	cmp	r3, #0
 800356c:	d007      	beq.n	800357e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	223f      	movs	r2, #63	; 0x3f
 8003588:	409a      	lsls	r2, r3
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8382 	beq.w	8003cac <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
          }
          return;
 80035b0:	e37c      	b.n	8003cac <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d018      	beq.n	80035f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d108      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d02c      	beq.n	8003630 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
 80035de:	e027      	b.n	8003630 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d023      	beq.n	8003630 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	4798      	blx	r3
 80035f0:	e01e      	b.n	8003630 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10f      	bne.n	8003620 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0210 	bic.w	r2, r2, #16
 800360e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 833e 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8088 	beq.w	8003758 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2204      	movs	r2, #4
 800364c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a89      	ldr	r2, [pc, #548]	; (800387c <HAL_DMA_IRQHandler+0xa44>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d04a      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a88      	ldr	r2, [pc, #544]	; (8003880 <HAL_DMA_IRQHandler+0xa48>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d045      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a86      	ldr	r2, [pc, #536]	; (8003884 <HAL_DMA_IRQHandler+0xa4c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d040      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a85      	ldr	r2, [pc, #532]	; (8003888 <HAL_DMA_IRQHandler+0xa50>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d03b      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_DMA_IRQHandler+0xa54>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d036      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a82      	ldr	r2, [pc, #520]	; (8003890 <HAL_DMA_IRQHandler+0xa58>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d031      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a80      	ldr	r2, [pc, #512]	; (8003894 <HAL_DMA_IRQHandler+0xa5c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02c      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7f      	ldr	r2, [pc, #508]	; (8003898 <HAL_DMA_IRQHandler+0xa60>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d027      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a7d      	ldr	r2, [pc, #500]	; (800389c <HAL_DMA_IRQHandler+0xa64>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d022      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7c      	ldr	r2, [pc, #496]	; (80038a0 <HAL_DMA_IRQHandler+0xa68>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d01d      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a7a      	ldr	r2, [pc, #488]	; (80038a4 <HAL_DMA_IRQHandler+0xa6c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d018      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a79      	ldr	r2, [pc, #484]	; (80038a8 <HAL_DMA_IRQHandler+0xa70>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d013      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a77      	ldr	r2, [pc, #476]	; (80038ac <HAL_DMA_IRQHandler+0xa74>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a76      	ldr	r2, [pc, #472]	; (80038b0 <HAL_DMA_IRQHandler+0xa78>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d009      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a74      	ldr	r2, [pc, #464]	; (80038b4 <HAL_DMA_IRQHandler+0xa7c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x8b8>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a73      	ldr	r2, [pc, #460]	; (80038b8 <HAL_DMA_IRQHandler+0xa80>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d108      	bne.n	8003702 <HAL_DMA_IRQHandler+0x8ca>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e007      	b.n	8003712 <HAL_DMA_IRQHandler+0x8da>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	3301      	adds	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	429a      	cmp	r2, r3
 800371c:	d307      	bcc.n	800372e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f2      	bne.n	8003712 <HAL_DMA_IRQHandler+0x8da>
 800372c:	e000      	b.n	8003730 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800372e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2203      	movs	r2, #3
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003746:	e003      	b.n	8003750 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 82aa 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
 800376a:	e2a4      	b.n	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a52      	ldr	r2, [pc, #328]	; (80038bc <HAL_DMA_IRQHandler+0xa84>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d04a      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a51      	ldr	r2, [pc, #324]	; (80038c0 <HAL_DMA_IRQHandler+0xa88>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d045      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a4f      	ldr	r2, [pc, #316]	; (80038c4 <HAL_DMA_IRQHandler+0xa8c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d040      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a4e      	ldr	r2, [pc, #312]	; (80038c8 <HAL_DMA_IRQHandler+0xa90>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d03b      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a4c      	ldr	r2, [pc, #304]	; (80038cc <HAL_DMA_IRQHandler+0xa94>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d036      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a4b      	ldr	r2, [pc, #300]	; (80038d0 <HAL_DMA_IRQHandler+0xa98>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d031      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a49      	ldr	r2, [pc, #292]	; (80038d4 <HAL_DMA_IRQHandler+0xa9c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02c      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a48      	ldr	r2, [pc, #288]	; (80038d8 <HAL_DMA_IRQHandler+0xaa0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d027      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a46      	ldr	r2, [pc, #280]	; (80038dc <HAL_DMA_IRQHandler+0xaa4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d022      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a45      	ldr	r2, [pc, #276]	; (80038e0 <HAL_DMA_IRQHandler+0xaa8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d01d      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a43      	ldr	r2, [pc, #268]	; (80038e4 <HAL_DMA_IRQHandler+0xaac>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d018      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a42      	ldr	r2, [pc, #264]	; (80038e8 <HAL_DMA_IRQHandler+0xab0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d013      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a40      	ldr	r2, [pc, #256]	; (80038ec <HAL_DMA_IRQHandler+0xab4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00e      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a3f      	ldr	r2, [pc, #252]	; (80038f0 <HAL_DMA_IRQHandler+0xab8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a3d      	ldr	r2, [pc, #244]	; (80038f4 <HAL_DMA_IRQHandler+0xabc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x9d4>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a3c      	ldr	r2, [pc, #240]	; (80038f8 <HAL_DMA_IRQHandler+0xac0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d101      	bne.n	8003810 <HAL_DMA_IRQHandler+0x9d8>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <HAL_DMA_IRQHandler+0x9da>
 8003810:	2300      	movs	r3, #0
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 824f 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003824:	f003 031f 	and.w	r3, r3, #31
 8003828:	2204      	movs	r2, #4
 800382a:	409a      	lsls	r2, r3
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4013      	ands	r3, r2
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80dd 	beq.w	80039f0 <HAL_DMA_IRQHandler+0xbb8>
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80d7 	beq.w	80039f0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	2204      	movs	r2, #4
 800384c:	409a      	lsls	r2, r3
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d059      	beq.n	8003910 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d14a      	bne.n	80038fc <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 8220 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003878:	e21a      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe78>
 800387a:	bf00      	nop
 800387c:	40020010 	.word	0x40020010
 8003880:	40020028 	.word	0x40020028
 8003884:	40020040 	.word	0x40020040
 8003888:	40020058 	.word	0x40020058
 800388c:	40020070 	.word	0x40020070
 8003890:	40020088 	.word	0x40020088
 8003894:	400200a0 	.word	0x400200a0
 8003898:	400200b8 	.word	0x400200b8
 800389c:	40020410 	.word	0x40020410
 80038a0:	40020428 	.word	0x40020428
 80038a4:	40020440 	.word	0x40020440
 80038a8:	40020458 	.word	0x40020458
 80038ac:	40020470 	.word	0x40020470
 80038b0:	40020488 	.word	0x40020488
 80038b4:	400204a0 	.word	0x400204a0
 80038b8:	400204b8 	.word	0x400204b8
 80038bc:	48022c08 	.word	0x48022c08
 80038c0:	48022c1c 	.word	0x48022c1c
 80038c4:	48022c30 	.word	0x48022c30
 80038c8:	48022c44 	.word	0x48022c44
 80038cc:	48022c58 	.word	0x48022c58
 80038d0:	48022c6c 	.word	0x48022c6c
 80038d4:	48022c80 	.word	0x48022c80
 80038d8:	48022c94 	.word	0x48022c94
 80038dc:	58025408 	.word	0x58025408
 80038e0:	5802541c 	.word	0x5802541c
 80038e4:	58025430 	.word	0x58025430
 80038e8:	58025444 	.word	0x58025444
 80038ec:	58025458 	.word	0x58025458
 80038f0:	5802546c 	.word	0x5802546c
 80038f4:	58025480 	.word	0x58025480
 80038f8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 81d5 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800390e:	e1cf      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d160      	bne.n	80039dc <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7f      	ldr	r2, [pc, #508]	; (8003b1c <HAL_DMA_IRQHandler+0xce4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04a      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7d      	ldr	r2, [pc, #500]	; (8003b20 <HAL_DMA_IRQHandler+0xce8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d045      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7c      	ldr	r2, [pc, #496]	; (8003b24 <HAL_DMA_IRQHandler+0xcec>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d040      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_DMA_IRQHandler+0xcf0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d03b      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a79      	ldr	r2, [pc, #484]	; (8003b2c <HAL_DMA_IRQHandler+0xcf4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d036      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a77      	ldr	r2, [pc, #476]	; (8003b30 <HAL_DMA_IRQHandler+0xcf8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a76      	ldr	r2, [pc, #472]	; (8003b34 <HAL_DMA_IRQHandler+0xcfc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d02c      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a74      	ldr	r2, [pc, #464]	; (8003b38 <HAL_DMA_IRQHandler+0xd00>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a73      	ldr	r2, [pc, #460]	; (8003b3c <HAL_DMA_IRQHandler+0xd04>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_DMA_IRQHandler+0xd08>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a70      	ldr	r2, [pc, #448]	; (8003b44 <HAL_DMA_IRQHandler+0xd0c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <HAL_DMA_IRQHandler+0xd10>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6d      	ldr	r2, [pc, #436]	; (8003b4c <HAL_DMA_IRQHandler+0xd14>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a6b      	ldr	r2, [pc, #428]	; (8003b50 <HAL_DMA_IRQHandler+0xd18>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6a      	ldr	r2, [pc, #424]	; (8003b54 <HAL_DMA_IRQHandler+0xd1c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_DMA_IRQHandler+0xb82>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a68      	ldr	r2, [pc, #416]	; (8003b58 <HAL_DMA_IRQHandler+0xd20>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d108      	bne.n	80039cc <HAL_DMA_IRQHandler+0xb94>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0208 	bic.w	r2, r2, #8
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	e007      	b.n	80039dc <HAL_DMA_IRQHandler+0xba4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 8165 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ee:	e15f      	b.n	8003cb0 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	2202      	movs	r2, #2
 80039fa:	409a      	lsls	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80c5 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xd58>
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80bf 	beq.w	8003b90 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d018      	beq.n	8003a5e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 813a 	beq.w	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a48:	e134      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8130 	beq.w	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a5c:	e12a      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 8089 	bne.w	8003b7c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a2b      	ldr	r2, [pc, #172]	; (8003b1c <HAL_DMA_IRQHandler+0xce4>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04a      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <HAL_DMA_IRQHandler+0xce8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d045      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a28      	ldr	r2, [pc, #160]	; (8003b24 <HAL_DMA_IRQHandler+0xcec>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a26      	ldr	r2, [pc, #152]	; (8003b28 <HAL_DMA_IRQHandler+0xcf0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d03b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <HAL_DMA_IRQHandler+0xcf4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d036      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_DMA_IRQHandler+0xcf8>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_DMA_IRQHandler+0xcfc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d02c      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_DMA_IRQHandler+0xd00>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_DMA_IRQHandler+0xd04>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_DMA_IRQHandler+0xd08>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_DMA_IRQHandler+0xd0c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_DMA_IRQHandler+0xd10>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_DMA_IRQHandler+0xd14>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a17      	ldr	r2, [pc, #92]	; (8003b50 <HAL_DMA_IRQHandler+0xd18>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_DMA_IRQHandler+0xd1c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xcd2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a14      	ldr	r2, [pc, #80]	; (8003b58 <HAL_DMA_IRQHandler+0xd20>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d128      	bne.n	8003b5c <HAL_DMA_IRQHandler+0xd24>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0214 	bic.w	r2, r2, #20
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e027      	b.n	8003b6c <HAL_DMA_IRQHandler+0xd34>
 8003b1c:	40020010 	.word	0x40020010
 8003b20:	40020028 	.word	0x40020028
 8003b24:	40020040 	.word	0x40020040
 8003b28:	40020058 	.word	0x40020058
 8003b2c:	40020070 	.word	0x40020070
 8003b30:	40020088 	.word	0x40020088
 8003b34:	400200a0 	.word	0x400200a0
 8003b38:	400200b8 	.word	0x400200b8
 8003b3c:	40020410 	.word	0x40020410
 8003b40:	40020428 	.word	0x40020428
 8003b44:	40020440 	.word	0x40020440
 8003b48:	40020458 	.word	0x40020458
 8003b4c:	40020470 	.word	0x40020470
 8003b50:	40020488 	.word	0x40020488
 8003b54:	400204a0 	.word	0x400204a0
 8003b58:	400204b8 	.word	0x400204b8
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020a 	bic.w	r2, r2, #10
 8003b6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8097 	beq.w	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b8e:	e091      	b.n	8003cb4 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	2208      	movs	r2, #8
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8088 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8082 	beq.w	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a41      	ldr	r2, [pc, #260]	; (8003cbc <HAL_DMA_IRQHandler+0xe84>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d04a      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a3f      	ldr	r2, [pc, #252]	; (8003cc0 <HAL_DMA_IRQHandler+0xe88>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d045      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a3e      	ldr	r2, [pc, #248]	; (8003cc4 <HAL_DMA_IRQHandler+0xe8c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d040      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a3c      	ldr	r2, [pc, #240]	; (8003cc8 <HAL_DMA_IRQHandler+0xe90>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d03b      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a3b      	ldr	r2, [pc, #236]	; (8003ccc <HAL_DMA_IRQHandler+0xe94>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d036      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_DMA_IRQHandler+0xe98>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d031      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <HAL_DMA_IRQHandler+0xe9c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d02c      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a36      	ldr	r2, [pc, #216]	; (8003cd8 <HAL_DMA_IRQHandler+0xea0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d027      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a35      	ldr	r2, [pc, #212]	; (8003cdc <HAL_DMA_IRQHandler+0xea4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a33      	ldr	r2, [pc, #204]	; (8003ce0 <HAL_DMA_IRQHandler+0xea8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a32      	ldr	r2, [pc, #200]	; (8003ce4 <HAL_DMA_IRQHandler+0xeac>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a30      	ldr	r2, [pc, #192]	; (8003ce8 <HAL_DMA_IRQHandler+0xeb0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <HAL_DMA_IRQHandler+0xeb4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	; (8003cf0 <HAL_DMA_IRQHandler+0xeb8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a2c      	ldr	r2, [pc, #176]	; (8003cf4 <HAL_DMA_IRQHandler+0xebc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_DMA_IRQHandler+0xe1a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <HAL_DMA_IRQHandler+0xec0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_DMA_IRQHandler+0xe2c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 021c 	bic.w	r2, r2, #28
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e007      	b.n	8003c74 <HAL_DMA_IRQHandler+0xe3c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 020e 	bic.w	r2, r2, #14
 8003c72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	4798      	blx	r3
 8003caa:	e004      	b.n	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8003cac:	bf00      	nop
 8003cae:	e002      	b.n	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40020010 	.word	0x40020010
 8003cc0:	40020028 	.word	0x40020028
 8003cc4:	40020040 	.word	0x40020040
 8003cc8:	40020058 	.word	0x40020058
 8003ccc:	40020070 	.word	0x40020070
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	400200a0 	.word	0x400200a0
 8003cd8:	400200b8 	.word	0x400200b8
 8003cdc:	40020410 	.word	0x40020410
 8003ce0:	40020428 	.word	0x40020428
 8003ce4:	40020440 	.word	0x40020440
 8003ce8:	40020458 	.word	0x40020458
 8003cec:	40020470 	.word	0x40020470
 8003cf0:	40020488 	.word	0x40020488
 8003cf4:	400204a0 	.word	0x400204a0
 8003cf8:	400204b8 	.word	0x400204b8

08003cfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <DMA_CalcBaseAndBitshift+0x118>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d04a      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a41      	ldr	r2, [pc, #260]	; (8003e18 <DMA_CalcBaseAndBitshift+0x11c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d045      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3f      	ldr	r2, [pc, #252]	; (8003e1c <DMA_CalcBaseAndBitshift+0x120>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d040      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a3e      	ldr	r2, [pc, #248]	; (8003e20 <DMA_CalcBaseAndBitshift+0x124>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d03b      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	; (8003e24 <DMA_CalcBaseAndBitshift+0x128>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d036      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d031      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <DMA_CalcBaseAndBitshift+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d02c      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <DMA_CalcBaseAndBitshift+0x134>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d027      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a36      	ldr	r2, [pc, #216]	; (8003e34 <DMA_CalcBaseAndBitshift+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a35      	ldr	r2, [pc, #212]	; (8003e38 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d01d      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a33      	ldr	r2, [pc, #204]	; (8003e3c <DMA_CalcBaseAndBitshift+0x140>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a32      	ldr	r2, [pc, #200]	; (8003e40 <DMA_CalcBaseAndBitshift+0x144>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a30      	ldr	r2, [pc, #192]	; (8003e44 <DMA_CalcBaseAndBitshift+0x148>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2f      	ldr	r2, [pc, #188]	; (8003e48 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2d      	ldr	r2, [pc, #180]	; (8003e4c <DMA_CalcBaseAndBitshift+0x150>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <DMA_CalcBaseAndBitshift+0x154>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <DMA_CalcBaseAndBitshift+0xac>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <DMA_CalcBaseAndBitshift+0xae>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d024      	beq.n	8003df8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	3b10      	subs	r3, #16
 8003db6:	4a27      	ldr	r2, [pc, #156]	; (8003e54 <DMA_CalcBaseAndBitshift+0x158>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <DMA_CalcBaseAndBitshift+0x15c>)
 8003dc8:	5cd3      	ldrb	r3, [r2, r3]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d908      	bls.n	8003de8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b1f      	ldr	r3, [pc, #124]	; (8003e5c <DMA_CalcBaseAndBitshift+0x160>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	1d1a      	adds	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	659a      	str	r2, [r3, #88]	; 0x58
 8003de6:	e00d      	b.n	8003e04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <DMA_CalcBaseAndBitshift+0x160>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6593      	str	r3, [r2, #88]	; 0x58
 8003df6:	e005      	b.n	8003e04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	08009e34 	.word	0x08009e34
 8003e5c:	fffffc00 	.word	0xfffffc00

08003e60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d120      	bne.n	8003eb6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d858      	bhi.n	8003f2e <DMA_CheckFifoParam+0xce>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <DMA_CheckFifoParam+0x24>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea7 	.word	0x08003ea7
 8003e8c:	08003e95 	.word	0x08003e95
 8003e90:	08003f2f 	.word	0x08003f2f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d048      	beq.n	8003f32 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ea4:	e045      	b.n	8003f32 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eae:	d142      	bne.n	8003f36 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003eb4:	e03f      	b.n	8003f36 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d123      	bne.n	8003f08 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d838      	bhi.n	8003f3a <DMA_CheckFifoParam+0xda>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <DMA_CheckFifoParam+0x70>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ee1 	.word	0x08003ee1
 8003ed4:	08003ee7 	.word	0x08003ee7
 8003ed8:	08003ee1 	.word	0x08003ee1
 8003edc:	08003ef9 	.word	0x08003ef9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
        break;
 8003ee4:	e030      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d025      	beq.n	8003f3e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ef6:	e022      	b.n	8003f3e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f00:	d11f      	bne.n	8003f42 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f06:	e01c      	b.n	8003f42 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d902      	bls.n	8003f16 <DMA_CheckFifoParam+0xb6>
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d003      	beq.n	8003f1c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f14:	e018      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1a:	e015      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8003f2c:	e00b      	b.n	8003f46 <DMA_CheckFifoParam+0xe6>
        break;
 8003f2e:	bf00      	nop
 8003f30:	e00a      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        break;
 8003f32:	bf00      	nop
 8003f34:	e008      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        break;
 8003f36:	bf00      	nop
 8003f38:	e006      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        break;
 8003f3a:	bf00      	nop
 8003f3c:	e004      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
        break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <DMA_CheckFifoParam+0xe8>
    break;
 8003f46:	bf00      	nop
    }
  }

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop

08003f58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a38      	ldr	r2, [pc, #224]	; (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a36      	ldr	r2, [pc, #216]	; (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a35      	ldr	r2, [pc, #212]	; (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d018      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a33      	ldr	r2, [pc, #204]	; (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a32      	ldr	r2, [pc, #200]	; (800405c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00e      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a30      	ldr	r2, [pc, #192]	; (8004060 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d009      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	; (8004068 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d101      	bne.n	8003fba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01a      	beq.n	8003ff6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	3b08      	subs	r3, #8
 8003fc8:	4a28      	ldr	r2, [pc, #160]	; (800406c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	091b      	lsrs	r3, r3, #4
 8003fd0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4b26      	ldr	r3, [pc, #152]	; (8004070 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a24      	ldr	r2, [pc, #144]	; (8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2201      	movs	r2, #1
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003ff4:	e024      	b.n	8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3b10      	subs	r3, #16
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004000:	fba2 2303 	umull	r2, r3, r2, r3
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a1c      	ldr	r2, [pc, #112]	; (800407c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d806      	bhi.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d902      	bls.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3308      	adds	r3, #8
 800401c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	461a      	mov	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a16      	ldr	r2, [pc, #88]	; (8004088 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004030:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 031f 	and.w	r3, r3, #31
 8004038:	2201      	movs	r2, #1
 800403a:	409a      	lsls	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	58025408 	.word	0x58025408
 8004050:	5802541c 	.word	0x5802541c
 8004054:	58025430 	.word	0x58025430
 8004058:	58025444 	.word	0x58025444
 800405c:	58025458 	.word	0x58025458
 8004060:	5802546c 	.word	0x5802546c
 8004064:	58025480 	.word	0x58025480
 8004068:	58025494 	.word	0x58025494
 800406c:	cccccccd 	.word	0xcccccccd
 8004070:	16009600 	.word	0x16009600
 8004074:	58025880 	.word	0x58025880
 8004078:	aaaaaaab 	.word	0xaaaaaaab
 800407c:	400204b8 	.word	0x400204b8
 8004080:	4002040f 	.word	0x4002040f
 8004084:	10008200 	.word	0x10008200
 8004088:	40020880 	.word	0x40020880

0800408c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04a      	beq.n	8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d847      	bhi.n	8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d022      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a24      	ldr	r2, [pc, #144]	; (8004148 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d01d      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a22      	ldr	r2, [pc, #136]	; (800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d018      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d013      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1e      	ldr	r2, [pc, #120]	; (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d009      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1b      	ldr	r2, [pc, #108]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d101      	bne.n	80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00a      	beq.n	8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a15      	ldr	r2, [pc, #84]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004114:	671a      	str	r2, [r3, #112]	; 0x70
 8004116:	e009      	b.n	800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a11      	ldr	r2, [pc, #68]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800412a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3b01      	subs	r3, #1
 8004130:	2201      	movs	r2, #1
 8004132:	409a      	lsls	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	58025408 	.word	0x58025408
 8004148:	5802541c 	.word	0x5802541c
 800414c:	58025430 	.word	0x58025430
 8004150:	58025444 	.word	0x58025444
 8004154:	58025458 	.word	0x58025458
 8004158:	5802546c 	.word	0x5802546c
 800415c:	58025480 	.word	0x58025480
 8004160:	58025494 	.word	0x58025494
 8004164:	1600963f 	.word	0x1600963f
 8004168:	58025940 	.word	0x58025940
 800416c:	1000823f 	.word	0x1000823f
 8004170:	40020940 	.word	0x40020940

08004174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004182:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_GPIO_Init+0x234>)
 8004184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004186:	e194      	b.n	80044b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8186 	beq.w	80044ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d005      	beq.n	80041b8 <HAL_GPIO_Init+0x44>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d130      	bne.n	800421a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ee:	2201      	movs	r2, #1
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0201 	and.w	r2, r3, #1
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d123      	bne.n	80042aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	69b9      	ldr	r1, [r7, #24]
 80042a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80e0 	beq.w	80044ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4b2f      	ldr	r3, [pc, #188]	; (80043ac <HAL_GPIO_Init+0x238>)
 80042ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80042f2:	4a2e      	ldr	r2, [pc, #184]	; (80043ac <HAL_GPIO_Init+0x238>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80042fc:	4b2b      	ldr	r3, [pc, #172]	; (80043ac <HAL_GPIO_Init+0x238>)
 80042fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_GPIO_Init+0x23c>)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_GPIO_Init+0x240>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d052      	beq.n	80043dc <HAL_GPIO_Init+0x268>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1f      	ldr	r2, [pc, #124]	; (80043b8 <HAL_GPIO_Init+0x244>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_GPIO_Init+0x22e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <HAL_GPIO_Init+0x248>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <HAL_GPIO_Init+0x22a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <HAL_GPIO_Init+0x24c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d025      	beq.n	800439a <HAL_GPIO_Init+0x226>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <HAL_GPIO_Init+0x250>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <HAL_GPIO_Init+0x222>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1b      	ldr	r2, [pc, #108]	; (80043c8 <HAL_GPIO_Init+0x254>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x21e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <HAL_GPIO_Init+0x258>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x21a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a19      	ldr	r2, [pc, #100]	; (80043d0 <HAL_GPIO_Init+0x25c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <HAL_GPIO_Init+0x260>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <HAL_GPIO_Init+0x264>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x20e>
 800437e:	2309      	movs	r3, #9
 8004380:	e02d      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004382:	230a      	movs	r3, #10
 8004384:	e02b      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004386:	2308      	movs	r3, #8
 8004388:	e029      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800438a:	2307      	movs	r3, #7
 800438c:	e027      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800438e:	2306      	movs	r3, #6
 8004390:	e025      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004392:	2305      	movs	r3, #5
 8004394:	e023      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004396:	2304      	movs	r3, #4
 8004398:	e021      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800439a:	2303      	movs	r3, #3
 800439c:	e01f      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e01d      	b.n	80043de <HAL_GPIO_Init+0x26a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01b      	b.n	80043de <HAL_GPIO_Init+0x26a>
 80043a6:	bf00      	nop
 80043a8:	58000080 	.word	0x58000080
 80043ac:	58024400 	.word	0x58024400
 80043b0:	58000400 	.word	0x58000400
 80043b4:	58020000 	.word	0x58020000
 80043b8:	58020400 	.word	0x58020400
 80043bc:	58020800 	.word	0x58020800
 80043c0:	58020c00 	.word	0x58020c00
 80043c4:	58021000 	.word	0x58021000
 80043c8:	58021400 	.word	0x58021400
 80043cc:	58021800 	.word	0x58021800
 80043d0:	58021c00 	.word	0x58021c00
 80043d4:	58022000 	.word	0x58022000
 80043d8:	58022400 	.word	0x58022400
 80043dc:	2300      	movs	r3, #0
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	f002 0203 	and.w	r2, r2, #3
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	4093      	lsls	r3, r2
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ee:	4938      	ldr	r1, [pc, #224]	; (80044d0 <HAL_GPIO_Init+0x35c>)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f ae63 	bne.w	8004188 <HAL_GPIO_Init+0x14>
  }
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	3724      	adds	r7, #36	; 0x24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58000400 	.word	0x58000400

080044d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
 80044e0:	4613      	mov	r3, r2
 80044e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e4:	787b      	ldrb	r3, [r7, #1]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044f0:	e003      	b.n	80044fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	041a      	lsls	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	619a      	str	r2, [r3, #24]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e07f      	b.n	800461a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fe7e 	bl	8001230 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	e006      	b.n	8004590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800458e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d104      	bne.n	80045a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	4b1d      	ldr	r3, [pc, #116]	; (8004624 <HAL_I2C_Init+0x11c>)
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69d9      	ldr	r1, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	02008000 	.word	0x02008000

08004628 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	461a      	mov	r2, r3
 8004634:	460b      	mov	r3, r1
 8004636:	817b      	strh	r3, [r7, #10]
 8004638:	4613      	mov	r3, r2
 800463a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b20      	cmp	r3, #32
 8004646:	f040 80da 	bne.w	80047fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_I2C_Master_Transmit+0x30>
 8004654:	2302      	movs	r3, #2
 8004656:	e0d3      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004660:	f7fd ff1a 	bl	8002498 <HAL_GetTick>
 8004664:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	2319      	movs	r3, #25
 800466c:	2201      	movs	r2, #1
 800466e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fb4e 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e0be      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2221      	movs	r2, #33	; 0x21
 8004686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2210      	movs	r2, #16
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	893a      	ldrh	r2, [r7, #8]
 80046a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2bff      	cmp	r3, #255	; 0xff
 80046b2:	d90e      	bls.n	80046d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	8979      	ldrh	r1, [r7, #10]
 80046c2:	4b51      	ldr	r3, [pc, #324]	; (8004808 <HAL_I2C_Master_Transmit+0x1e0>)
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fd44 	bl	8005158 <I2C_TransferConfig>
 80046d0:	e06c      	b.n	80047ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	8979      	ldrh	r1, [r7, #10]
 80046e4:	4b48      	ldr	r3, [pc, #288]	; (8004808 <HAL_I2C_Master_Transmit+0x1e0>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fd33 	bl	8005158 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80046f2:	e05b      	b.n	80047ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	6a39      	ldr	r1, [r7, #32]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 fb4b 	bl	8004d94 <I2C_WaitOnTXISFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e07b      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d034      	beq.n	80047ac <HAL_I2C_Master_Transmit+0x184>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d130      	bne.n	80047ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	2200      	movs	r2, #0
 8004752:	2180      	movs	r1, #128	; 0x80
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fadd 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e04d      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2bff      	cmp	r3, #255	; 0xff
 800476c:	d90e      	bls.n	800478c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	22ff      	movs	r2, #255	; 0xff
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	b2da      	uxtb	r2, r3
 800477a:	8979      	ldrh	r1, [r7, #10]
 800477c:	2300      	movs	r3, #0
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 fce7 	bl	8005158 <I2C_TransferConfig>
 800478a:	e00f      	b.n	80047ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800479a:	b2da      	uxtb	r2, r3
 800479c:	8979      	ldrh	r1, [r7, #10]
 800479e:	2300      	movs	r3, #0
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fcd6 	bl	8005158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d19e      	bne.n	80046f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fb2a 	bl	8004e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e01a      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2220      	movs	r2, #32
 80047d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_I2C_Master_Transmit+0x1e4>)
 80047de:	400b      	ands	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e000      	b.n	8004800 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
  }
}
 8004800:	4618      	mov	r0, r3
 8004802:	3718      	adds	r7, #24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	80002000 	.word	0x80002000
 800480c:	fe00e800 	.word	0xfe00e800

08004810 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af02      	add	r7, sp, #8
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	461a      	mov	r2, r3
 800481c:	460b      	mov	r3, r1
 800481e:	817b      	strh	r3, [r7, #10]
 8004820:	4613      	mov	r3, r2
 8004822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	f040 80db 	bne.w	80049e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_I2C_Master_Receive+0x30>
 800483c:	2302      	movs	r3, #2
 800483e:	e0d4      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004848:	f7fd fe26 	bl	8002498 <HAL_GetTick>
 800484c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2319      	movs	r3, #25
 8004854:	2201      	movs	r2, #1
 8004856:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fa5a 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0bf      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2222      	movs	r2, #34	; 0x22
 800486e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2210      	movs	r2, #16
 8004876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	893a      	ldrh	r2, [r7, #8]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2bff      	cmp	r3, #255	; 0xff
 800489a:	d90e      	bls.n	80048ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	22ff      	movs	r2, #255	; 0xff
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	8979      	ldrh	r1, [r7, #10]
 80048aa:	4b52      	ldr	r3, [pc, #328]	; (80049f4 <HAL_I2C_Master_Receive+0x1e4>)
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fc50 	bl	8005158 <I2C_TransferConfig>
 80048b8:	e06d      	b.n	8004996 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	8979      	ldrh	r1, [r7, #10]
 80048cc:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_I2C_Master_Receive+0x1e4>)
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f000 fc3f 	bl	8005158 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80048da:	e05c      	b.n	8004996 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	6a39      	ldr	r1, [r7, #32]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 fad3 	bl	8004e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e07c      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d034      	beq.n	8004996 <HAL_I2C_Master_Receive+0x186>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	2b00      	cmp	r3, #0
 8004932:	d130      	bne.n	8004996 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	2200      	movs	r2, #0
 800493c:	2180      	movs	r1, #128	; 0x80
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f9e8 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e04d      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2bff      	cmp	r3, #255	; 0xff
 8004956:	d90e      	bls.n	8004976 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	22ff      	movs	r2, #255	; 0xff
 800495c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	b2da      	uxtb	r2, r3
 8004964:	8979      	ldrh	r1, [r7, #10]
 8004966:	2300      	movs	r3, #0
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 fbf2 	bl	8005158 <I2C_TransferConfig>
 8004974:	e00f      	b.n	8004996 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	b2da      	uxtb	r2, r3
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	2300      	movs	r3, #0
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 fbe1 	bl	8005158 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d19d      	bne.n	80048dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	6a39      	ldr	r1, [r7, #32]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa35 	bl	8004e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e01a      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2220      	movs	r2, #32
 80049ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6859      	ldr	r1, [r3, #4]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_I2C_Master_Receive+0x1e8>)
 80049c8:	400b      	ands	r3, r1
 80049ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	e000      	b.n	80049ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
  }
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	80002400 	.word	0x80002400
 80049f8:	fe00e800 	.word	0xfe00e800

080049fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	4608      	mov	r0, r1
 8004a06:	4611      	mov	r1, r2
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	817b      	strh	r3, [r7, #10]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	813b      	strh	r3, [r7, #8]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b20      	cmp	r3, #32
 8004a20:	f040 80f9 	bne.w	8004c16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_I2C_Mem_Write+0x34>
 8004a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d105      	bne.n	8004a3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0ed      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_I2C_Mem_Write+0x4e>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e0e6      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a52:	f7fd fd21 	bl	8002498 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2319      	movs	r3, #25
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 f955 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0d1      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2221      	movs	r2, #33	; 0x21
 8004a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a9c:	88f8      	ldrh	r0, [r7, #6]
 8004a9e:	893a      	ldrh	r2, [r7, #8]
 8004aa0:	8979      	ldrh	r1, [r7, #10]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4603      	mov	r3, r0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f8b9 	bl	8004c24 <I2C_RequestMemoryWrite>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0a9      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2bff      	cmp	r3, #255	; 0xff
 8004acc:	d90e      	bls.n	8004aec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	8979      	ldrh	r1, [r7, #10]
 8004adc:	2300      	movs	r3, #0
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fb37 	bl	8005158 <I2C_TransferConfig>
 8004aea:	e00f      	b.n	8004b0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	8979      	ldrh	r1, [r7, #10]
 8004afe:	2300      	movs	r3, #0
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fb26 	bl	8005158 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 f93f 	bl	8004d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e07b      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b30:	1c5a      	adds	r2, r3, #1
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d034      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x1c8>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d130      	bne.n	8004bc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2180      	movs	r1, #128	; 0x80
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 f8d1 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04d      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2bff      	cmp	r3, #255	; 0xff
 8004b84:	d90e      	bls.n	8004ba4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	22ff      	movs	r2, #255	; 0xff
 8004b8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	8979      	ldrh	r1, [r7, #10]
 8004b94:	2300      	movs	r3, #0
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fadb 	bl	8005158 <I2C_TransferConfig>
 8004ba2:	e00f      	b.n	8004bc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	8979      	ldrh	r1, [r7, #10]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 faca 	bl	8005158 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d19e      	bne.n	8004b0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f91e 	bl	8004e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e01a      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2220      	movs	r2, #32
 8004be8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <HAL_I2C_Mem_Write+0x224>)
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e000      	b.n	8004c18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	fe00e800 	.word	0xfe00e800

08004c24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	817b      	strh	r3, [r7, #10]
 8004c36:	460b      	mov	r3, r1
 8004c38:	813b      	strh	r3, [r7, #8]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	8979      	ldrh	r1, [r7, #10]
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <I2C_RequestMemoryWrite+0xa4>)
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fa83 	bl	8005158 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	69b9      	ldr	r1, [r7, #24]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f89c 	bl	8004d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e02c      	b.n	8004cc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c6c:	893b      	ldrh	r3, [r7, #8]
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
 8004c76:	e015      	b.n	8004ca4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	0a1b      	lsrs	r3, r3, #8
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	69b9      	ldr	r1, [r7, #24]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f882 	bl	8004d94 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e012      	b.n	8004cc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9a:	893b      	ldrh	r3, [r7, #8]
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f830 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	80002000 	.word	0x80002000

08004ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d103      	bne.n	8004cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d007      	beq.n	8004d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	699a      	ldr	r2, [r3, #24]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	619a      	str	r2, [r3, #24]
  }
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	e022      	b.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d01e      	beq.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fd fbb3 	bl	8002498 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d113      	bne.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	f043 0220 	orr.w	r2, r3, #32
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e00f      	b.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d0cd      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004da0:	e02c      	b.n	8004dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 f8ea 	bl	8004f80 <I2C_IsErrorOccurred>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02a      	b.n	8004e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d01e      	beq.n	8004dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fd fb6b 	bl	8002498 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d113      	bne.n	8004dfc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d1cb      	bne.n	8004da2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e20:	e028      	b.n	8004e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f8aa 	bl	8004f80 <I2C_IsErrorOccurred>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e026      	b.n	8004e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e36:	f7fd fb2f 	bl	8002498 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d113      	bne.n	8004e74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	f043 0220 	orr.w	r2, r3, #32
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e007      	b.n	8004e84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d1cf      	bne.n	8004e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e98:	e064      	b.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 f86e 	bl	8004f80 <I2C_IsErrorOccurred>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e062      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f003 0320 	and.w	r3, r3, #32
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d138      	bne.n	8004f2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d105      	bne.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e04e      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d107      	bne.n	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2204      	movs	r2, #4
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44
 8004ef2:	e002      	b.n	8004efa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2220      	movs	r2, #32
 8004f00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6859      	ldr	r1, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004f0e:	400b      	ands	r3, r1
 8004f10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e022      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fd fab3 	bl	8002498 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10f      	bne.n	8004f64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e007      	b.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d193      	bne.n	8004e9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	fe00e800 	.word	0xfe00e800

08004f80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d075      	beq.n	8005098 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2210      	movs	r2, #16
 8004fb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fb4:	e056      	b.n	8005064 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbc:	d052      	beq.n	8005064 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fbe:	f7fd fa6b 	bl	8002498 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d302      	bcc.n	8004fd4 <I2C_IsErrorOccurred+0x54>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d147      	bne.n	8005064 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fe6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff6:	d12e      	bne.n	8005056 <I2C_IsErrorOccurred+0xd6>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ffe:	d02a      	beq.n	8005056 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005000:	7cfb      	ldrb	r3, [r7, #19]
 8005002:	2b20      	cmp	r3, #32
 8005004:	d027      	beq.n	8005056 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005014:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005016:	f7fd fa3f 	bl	8002498 <HAL_GetTick>
 800501a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501c:	e01b      	b.n	8005056 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800501e:	f7fd fa3b 	bl	8002498 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b19      	cmp	r3, #25
 800502a:	d914      	bls.n	8005056 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b20      	cmp	r3, #32
 8005062:	d1dc      	bne.n	800501e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b20      	cmp	r3, #32
 8005070:	d003      	beq.n	800507a <I2C_IsErrorOccurred+0xfa>
 8005072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005076:	2b00      	cmp	r3, #0
 8005078:	d09d      	beq.n	8004fb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800507a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	f043 0304 	orr.w	r3, r3, #4
 8005090:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00b      	beq.n	80050e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f043 0308 	orr.w	r3, r3, #8
 80050d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800510a:	2b00      	cmp	r3, #0
 800510c:	d01c      	beq.n	8005148 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff fddc 	bl	8004ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <I2C_IsErrorOccurred+0x1d4>)
 8005120:	400b      	ands	r3, r1
 8005122:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	431a      	orrs	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800514c:	4618      	mov	r0, r3
 800514e:	3728      	adds	r7, #40	; 0x28
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	fe00e800 	.word	0xfe00e800

08005158 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	817b      	strh	r3, [r7, #10]
 8005166:	4613      	mov	r3, r2
 8005168:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800516a:	897b      	ldrh	r3, [r7, #10]
 800516c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005170:	7a7b      	ldrb	r3, [r7, #9]
 8005172:	041b      	lsls	r3, r3, #16
 8005174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005178:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	4313      	orrs	r3, r2
 8005182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005186:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	0d5b      	lsrs	r3, r3, #21
 8005192:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <I2C_TransferConfig+0x60>)
 8005198:	430b      	orrs	r3, r1
 800519a:	43db      	mvns	r3, r3
 800519c:	ea02 0103 	and.w	r1, r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051aa:	bf00      	nop
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	03ff63ff 	.word	0x03ff63ff

080051bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d138      	bne.n	8005244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051dc:	2302      	movs	r3, #2
 80051de:	e032      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2224      	movs	r2, #36	; 0x24
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800520e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b20      	cmp	r3, #32
 8005266:	d139      	bne.n	80052dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005272:	2302      	movs	r3, #2
 8005274:	e033      	b.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2224      	movs	r2, #36	; 0x24
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0201 	bic.w	r2, r2, #1
 8005294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	2b06      	cmp	r3, #6
 80052fe:	d00a      	beq.n	8005316 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005300:	4b26      	ldr	r3, [pc, #152]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	429a      	cmp	r2, r3
 800530c:	d001      	beq.n	8005312 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e040      	b.n	8005394 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	e03e      	b.n	8005394 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005316:	4b21      	ldr	r3, [pc, #132]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800531e:	491f      	ldr	r1, [pc, #124]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4313      	orrs	r3, r2
 8005324:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005326:	f7fd f8b7 	bl	8002498 <HAL_GetTick>
 800532a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800532c:	e009      	b.n	8005342 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800532e:	f7fd f8b3 	bl	8002498 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533c:	d901      	bls.n	8005342 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e028      	b.n	8005394 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005342:	4b16      	ldr	r3, [pc, #88]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800534e:	d1ee      	bne.n	800532e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b1e      	cmp	r3, #30
 8005354:	d008      	beq.n	8005368 <HAL_PWREx_ConfigSupply+0x7c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b2e      	cmp	r3, #46	; 0x2e
 800535a:	d005      	beq.n	8005368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b1d      	cmp	r3, #29
 8005360:	d002      	beq.n	8005368 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b2d      	cmp	r3, #45	; 0x2d
 8005366:	d114      	bne.n	8005392 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005368:	f7fd f896 	bl	8002498 <HAL_GetTick>
 800536c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800536e:	e009      	b.n	8005384 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005370:	f7fd f892 	bl	8002498 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537e:	d901      	bls.n	8005384 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e007      	b.n	8005394 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_PWREx_ConfigSupply+0xb0>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005390:	d1ee      	bne.n	8005370 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	58024800 	.word	0x58024800

080053a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08c      	sub	sp, #48	; 0x30
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e3f4      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80b3 	beq.w	8005526 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c0:	4b95      	ldr	r3, [pc, #596]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053ca:	4b93      	ldr	r3, [pc, #588]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d007      	beq.n	80053e6 <HAL_RCC_OscConfig+0x46>
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b18      	cmp	r3, #24
 80053da:	d112      	bne.n	8005402 <HAL_RCC_OscConfig+0x62>
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d10d      	bne.n	8005402 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e6:	4b8c      	ldr	r3, [pc, #560]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8098 	beq.w	8005524 <HAL_RCC_OscConfig+0x184>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f040 8093 	bne.w	8005524 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e3cc      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540a:	d106      	bne.n	800541a <HAL_RCC_OscConfig+0x7a>
 800540c:	4b82      	ldr	r3, [pc, #520]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a81      	ldr	r2, [pc, #516]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005416:	6013      	str	r3, [r2, #0]
 8005418:	e058      	b.n	80054cc <HAL_RCC_OscConfig+0x12c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d112      	bne.n	8005448 <HAL_RCC_OscConfig+0xa8>
 8005422:	4b7d      	ldr	r3, [pc, #500]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7c      	ldr	r2, [pc, #496]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b7a      	ldr	r3, [pc, #488]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a79      	ldr	r2, [pc, #484]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005434:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b77      	ldr	r3, [pc, #476]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a76      	ldr	r2, [pc, #472]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e041      	b.n	80054cc <HAL_RCC_OscConfig+0x12c>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005450:	d112      	bne.n	8005478 <HAL_RCC_OscConfig+0xd8>
 8005452:	4b71      	ldr	r3, [pc, #452]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a70      	ldr	r2, [pc, #448]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	4b6e      	ldr	r3, [pc, #440]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a6d      	ldr	r2, [pc, #436]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005464:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b6b      	ldr	r3, [pc, #428]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a6a      	ldr	r2, [pc, #424]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e029      	b.n	80054cc <HAL_RCC_OscConfig+0x12c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005480:	d112      	bne.n	80054a8 <HAL_RCC_OscConfig+0x108>
 8005482:	4b65      	ldr	r3, [pc, #404]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a64      	ldr	r2, [pc, #400]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4b62      	ldr	r3, [pc, #392]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a61      	ldr	r2, [pc, #388]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005498:	6013      	str	r3, [r2, #0]
 800549a:	4b5f      	ldr	r3, [pc, #380]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a5e      	ldr	r2, [pc, #376]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	e011      	b.n	80054cc <HAL_RCC_OscConfig+0x12c>
 80054a8:	4b5b      	ldr	r3, [pc, #364]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a5a      	ldr	r2, [pc, #360]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	4b58      	ldr	r3, [pc, #352]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a57      	ldr	r2, [pc, #348]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b55      	ldr	r3, [pc, #340]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a54      	ldr	r2, [pc, #336]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fc ffe0 	bl	8002498 <HAL_GetTick>
 80054d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fc ffdc 	bl	8002498 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e356      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054ee:	4b4a      	ldr	r3, [pc, #296]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x13c>
 80054fa:	e014      	b.n	8005526 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fc ffcc 	bl	8002498 <HAL_GetTick>
 8005500:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005504:	f7fc ffc8 	bl	8002498 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	; 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e342      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005516:	4b40      	ldr	r3, [pc, #256]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x164>
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 808d 	beq.w	800564e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005534:	4b38      	ldr	r3, [pc, #224]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800553c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800553e:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <HAL_RCC_OscConfig+0x1ba>
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	2b18      	cmp	r3, #24
 800554e:	d137      	bne.n	80055c0 <HAL_RCC_OscConfig+0x220>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d132      	bne.n	80055c0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	d005      	beq.n	8005572 <HAL_RCC_OscConfig+0x1d2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e314      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005572:	4b29      	ldr	r3, [pc, #164]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f023 0219 	bic.w	r2, r3, #25
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	4926      	ldr	r1, [pc, #152]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005584:	f7fc ff88 	bl	8002498 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800558c:	f7fc ff84 	bl	8002498 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e2fe      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800559e:	4b1e      	ldr	r3, [pc, #120]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	061b      	lsls	r3, r3, #24
 80055b8:	4917      	ldr	r1, [pc, #92]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055be:	e046      	b.n	800564e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d029      	beq.n	800561c <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 0219 	bic.w	r2, r3, #25
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4910      	ldr	r1, [pc, #64]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc ff5d 	bl	8002498 <HAL_GetTick>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055e2:	f7fc ff59 	bl	8002498 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e2d3      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055f4:	4b08      	ldr	r3, [pc, #32]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	061b      	lsls	r3, r3, #24
 800560e:	4902      	ldr	r1, [pc, #8]	; (8005618 <HAL_RCC_OscConfig+0x278>)
 8005610:	4313      	orrs	r3, r2
 8005612:	604b      	str	r3, [r1, #4]
 8005614:	e01b      	b.n	800564e <HAL_RCC_OscConfig+0x2ae>
 8005616:	bf00      	nop
 8005618:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800561c:	4b97      	ldr	r3, [pc, #604]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a96      	ldr	r2, [pc, #600]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005628:	f7fc ff36 	bl	8002498 <HAL_GetTick>
 800562c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005630:	f7fc ff32 	bl	8002498 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e2ac      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005642:	4b8e      	ldr	r3, [pc, #568]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d06a      	beq.n	8005730 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800565a:	4b88      	ldr	r3, [pc, #544]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005662:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005664:	4b85      	ldr	r3, [pc, #532]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d007      	beq.n	8005680 <HAL_RCC_OscConfig+0x2e0>
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b18      	cmp	r3, #24
 8005674:	d11b      	bne.n	80056ae <HAL_RCC_OscConfig+0x30e>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0303 	and.w	r3, r3, #3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d116      	bne.n	80056ae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005680:	4b7e      	ldr	r3, [pc, #504]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d005      	beq.n	8005698 <HAL_RCC_OscConfig+0x2f8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	2b80      	cmp	r3, #128	; 0x80
 8005692:	d001      	beq.n	8005698 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e281      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005698:	4b78      	ldr	r3, [pc, #480]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	061b      	lsls	r3, r3, #24
 80056a6:	4975      	ldr	r1, [pc, #468]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056ac:	e040      	b.n	8005730 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d023      	beq.n	80056fe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056b6:	4b71      	ldr	r3, [pc, #452]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a70      	ldr	r2, [pc, #448]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c2:	f7fc fee9 	bl	8002498 <HAL_GetTick>
 80056c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c8:	e008      	b.n	80056dc <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056ca:	f7fc fee5 	bl	8002498 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e25f      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056dc:	4b67      	ldr	r3, [pc, #412]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056e8:	4b64      	ldr	r3, [pc, #400]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4961      	ldr	r1, [pc, #388]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60cb      	str	r3, [r1, #12]
 80056fc:	e018      	b.n	8005730 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80056fe:	4b5f      	ldr	r3, [pc, #380]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a5e      	ldr	r2, [pc, #376]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fc fec5 	bl	8002498 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005712:	f7fc fec1 	bl	8002498 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e23b      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005724:	4b55      	ldr	r3, [pc, #340]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f0      	bne.n	8005712 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b00      	cmp	r3, #0
 800573a:	d036      	beq.n	80057aa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d019      	beq.n	8005778 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005744:	4b4d      	ldr	r3, [pc, #308]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005748:	4a4c      	ldr	r2, [pc, #304]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fc fea2 	bl	8002498 <HAL_GetTick>
 8005754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005758:	f7fc fe9e 	bl	8002498 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e218      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800576a:	4b44      	ldr	r3, [pc, #272]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800576c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x3b8>
 8005776:	e018      	b.n	80057aa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005778:	4b40      	ldr	r3, [pc, #256]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800577a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577c:	4a3f      	ldr	r2, [pc, #252]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fc fe88 	bl	8002498 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800578c:	f7fc fe84 	bl	8002498 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e1fe      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800579e:	4b37      	ldr	r3, [pc, #220]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1f0      	bne.n	800578c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d036      	beq.n	8005824 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d019      	beq.n	80057f2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057be:	4b2f      	ldr	r3, [pc, #188]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ca:	f7fc fe65 	bl	8002498 <HAL_GetTick>
 80057ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057d0:	e008      	b.n	80057e4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057d2:	f7fc fe61 	bl	8002498 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d901      	bls.n	80057e4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e1db      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057e4:	4b25      	ldr	r3, [pc, #148]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0f0      	beq.n	80057d2 <HAL_RCC_OscConfig+0x432>
 80057f0:	e018      	b.n	8005824 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057f2:	4b22      	ldr	r3, [pc, #136]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a21      	ldr	r2, [pc, #132]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 80057f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057fe:	f7fc fe4b 	bl	8002498 <HAL_GetTick>
 8005802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005806:	f7fc fe47 	bl	8002498 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e1c1      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005818:	4b18      	ldr	r3, [pc, #96]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f0      	bne.n	8005806 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 80af 	beq.w	8005990 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005832:	4b13      	ldr	r3, [pc, #76]	; (8005880 <HAL_RCC_OscConfig+0x4e0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a12      	ldr	r2, [pc, #72]	; (8005880 <HAL_RCC_OscConfig+0x4e0>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583e:	f7fc fe2b 	bl	8002498 <HAL_GetTick>
 8005842:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005846:	f7fc fe27 	bl	8002498 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e1a1      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005858:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCC_OscConfig+0x4e0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0f0      	beq.n	8005846 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d10b      	bne.n	8005884 <HAL_RCC_OscConfig+0x4e4>
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 800586e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005870:	4a02      	ldr	r2, [pc, #8]	; (800587c <HAL_RCC_OscConfig+0x4dc>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	6713      	str	r3, [r2, #112]	; 0x70
 8005878:	e05b      	b.n	8005932 <HAL_RCC_OscConfig+0x592>
 800587a:	bf00      	nop
 800587c:	58024400 	.word	0x58024400
 8005880:	58024800 	.word	0x58024800
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d112      	bne.n	80058b2 <HAL_RCC_OscConfig+0x512>
 800588c:	4b9d      	ldr	r3, [pc, #628]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	4a9c      	ldr	r2, [pc, #624]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	6713      	str	r3, [r2, #112]	; 0x70
 8005898:	4b9a      	ldr	r3, [pc, #616]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	4a99      	ldr	r2, [pc, #612]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	4b97      	ldr	r3, [pc, #604]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a8:	4a96      	ldr	r2, [pc, #600]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058aa:	f023 0304 	bic.w	r3, r3, #4
 80058ae:	6713      	str	r3, [r2, #112]	; 0x70
 80058b0:	e03f      	b.n	8005932 <HAL_RCC_OscConfig+0x592>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d112      	bne.n	80058e0 <HAL_RCC_OscConfig+0x540>
 80058ba:	4b92      	ldr	r3, [pc, #584]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a91      	ldr	r2, [pc, #580]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058c0:	f043 0304 	orr.w	r3, r3, #4
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
 80058c6:	4b8f      	ldr	r3, [pc, #572]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a8e      	ldr	r2, [pc, #568]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70
 80058d2:	4b8c      	ldr	r3, [pc, #560]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a8b      	ldr	r2, [pc, #556]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058d8:	f043 0301 	orr.w	r3, r3, #1
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70
 80058de:	e028      	b.n	8005932 <HAL_RCC_OscConfig+0x592>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b85      	cmp	r3, #133	; 0x85
 80058e6:	d112      	bne.n	800590e <HAL_RCC_OscConfig+0x56e>
 80058e8:	4b86      	ldr	r3, [pc, #536]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ec:	4a85      	ldr	r2, [pc, #532]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058ee:	f043 0304 	orr.w	r3, r3, #4
 80058f2:	6713      	str	r3, [r2, #112]	; 0x70
 80058f4:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f8:	4a82      	ldr	r2, [pc, #520]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80058fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005900:	4b80      	ldr	r3, [pc, #512]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005904:	4a7f      	ldr	r2, [pc, #508]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	6713      	str	r3, [r2, #112]	; 0x70
 800590c:	e011      	b.n	8005932 <HAL_RCC_OscConfig+0x592>
 800590e:	4b7d      	ldr	r3, [pc, #500]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	4a7c      	ldr	r2, [pc, #496]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005914:	f023 0301 	bic.w	r3, r3, #1
 8005918:	6713      	str	r3, [r2, #112]	; 0x70
 800591a:	4b7a      	ldr	r3, [pc, #488]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800591c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591e:	4a79      	ldr	r2, [pc, #484]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005920:	f023 0304 	bic.w	r3, r3, #4
 8005924:	6713      	str	r3, [r2, #112]	; 0x70
 8005926:	4b77      	ldr	r3, [pc, #476]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4a76      	ldr	r2, [pc, #472]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800592c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d015      	beq.n	8005966 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fdad 	bl	8002498 <HAL_GetTick>
 800593e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005940:	e00a      	b.n	8005958 <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fc fda9 	bl	8002498 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e121      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005958:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800595a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ee      	beq.n	8005942 <HAL_RCC_OscConfig+0x5a2>
 8005964:	e014      	b.n	8005990 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005966:	f7fc fd97 	bl	8002498 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800596c:	e00a      	b.n	8005984 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596e:	f7fc fd93 	bl	8002498 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	f241 3288 	movw	r2, #5000	; 0x1388
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e10b      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005984:	4b5f      	ldr	r3, [pc, #380]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1ee      	bne.n	800596e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8100 	beq.w	8005b9a <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800599a:	4b5a      	ldr	r3, [pc, #360]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a2:	2b18      	cmp	r3, #24
 80059a4:	f000 80bb 	beq.w	8005b1e <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	f040 8095 	bne.w	8005adc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b2:	4b54      	ldr	r3, [pc, #336]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a53      	ldr	r2, [pc, #332]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80059b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059be:	f7fc fd6b 	bl	8002498 <HAL_GetTick>
 80059c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c6:	f7fc fd67 	bl	8002498 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e0e1      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059d8:	4b4a      	ldr	r3, [pc, #296]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1f0      	bne.n	80059c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e4:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80059e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e8:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_OscConfig+0x768>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059f4:	0112      	lsls	r2, r2, #4
 80059f6:	430a      	orrs	r2, r1
 80059f8:	4942      	ldr	r1, [pc, #264]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	628b      	str	r3, [r1, #40]	; 0x28
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a02:	3b01      	subs	r3, #1
 8005a04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	025b      	lsls	r3, r3, #9
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	431a      	orrs	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a26:	3b01      	subs	r3, #1
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a2e:	4935      	ldr	r1, [pc, #212]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a34:	4b33      	ldr	r3, [pc, #204]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	4a32      	ldr	r2, [pc, #200]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a40:	4b30      	ldr	r3, [pc, #192]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a44:	4b31      	ldr	r3, [pc, #196]	; (8005b0c <HAL_RCC_OscConfig+0x76c>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a4c:	00d2      	lsls	r2, r2, #3
 8005a4e:	492d      	ldr	r1, [pc, #180]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f023 020c 	bic.w	r2, r3, #12
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	4928      	ldr	r1, [pc, #160]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a66:	4b27      	ldr	r3, [pc, #156]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	f023 0202 	bic.w	r2, r3, #2
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	4924      	ldr	r1, [pc, #144]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a84:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a90:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005aa2:	f043 0301 	orr.w	r3, r3, #1
 8005aa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aa8:	4b16      	ldr	r3, [pc, #88]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fc fcf0 	bl	8002498 <HAL_GetTick>
 8005ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc fcec 	bl	8002498 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e066      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ace:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x71c>
 8005ada:	e05e      	b.n	8005b9a <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <HAL_RCC_OscConfig+0x764>)
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fcd6 	bl	8002498 <HAL_GetTick>
 8005aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005aee:	e00f      	b.n	8005b10 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fc fcd2 	bl	8002498 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d908      	bls.n	8005b10 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e04c      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
 8005b02:	bf00      	nop
 8005b04:	58024400 	.word	0x58024400
 8005b08:	fffffc0c 	.word	0xfffffc0c
 8005b0c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b10:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <HAL_RCC_OscConfig+0x804>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e9      	bne.n	8005af0 <HAL_RCC_OscConfig+0x750>
 8005b1c:	e03d      	b.n	8005b9a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b1e:	4b21      	ldr	r3, [pc, #132]	; (8005ba4 <HAL_RCC_OscConfig+0x804>)
 8005b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b24:	4b1f      	ldr	r3, [pc, #124]	; (8005ba4 <HAL_RCC_OscConfig+0x804>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b28:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d031      	beq.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f003 0203 	and.w	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d12a      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d122      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d11a      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	0a5b      	lsrs	r3, r3, #9
 8005b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b6c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d111      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	0c1b      	lsrs	r3, r3, #16
 8005b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d108      	bne.n	8005b96 <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0e1b      	lsrs	r3, r3, #24
 8005b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d001      	beq.n	8005b9a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3730      	adds	r7, #48	; 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	58024400 	.word	0x58024400

08005ba8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e19c      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b8a      	ldr	r3, [pc, #552]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d910      	bls.n	8005bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b87      	ldr	r3, [pc, #540]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 020f 	bic.w	r2, r3, #15
 8005bd2:	4985      	ldr	r1, [pc, #532]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b83      	ldr	r3, [pc, #524]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e184      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	4b7b      	ldr	r3, [pc, #492]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d908      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c08:	4b78      	ldr	r3, [pc, #480]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4975      	ldr	r1, [pc, #468]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0308 	and.w	r3, r3, #8
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695a      	ldr	r2, [r3, #20]
 8005c2a:	4b70      	ldr	r3, [pc, #448]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d908      	bls.n	8005c48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c36:	4b6d      	ldr	r3, [pc, #436]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	496a      	ldr	r1, [pc, #424]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d010      	beq.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	4b64      	ldr	r3, [pc, #400]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d908      	bls.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c64:	4b61      	ldr	r3, [pc, #388]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	495e      	ldr	r1, [pc, #376]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d010      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	4b59      	ldr	r3, [pc, #356]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d908      	bls.n	8005ca4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c92:	4b56      	ldr	r3, [pc, #344]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4953      	ldr	r1, [pc, #332]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0302 	and.w	r3, r3, #2
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d010      	beq.n	8005cd2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	4b4d      	ldr	r3, [pc, #308]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d908      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f023 020f 	bic.w	r2, r3, #15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4947      	ldr	r1, [pc, #284]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d055      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cde:	4b43      	ldr	r3, [pc, #268]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4940      	ldr	r1, [pc, #256]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cf8:	4b3c      	ldr	r3, [pc, #240]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e0f6      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d107      	bne.n	8005d20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d115      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0ea      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d107      	bne.n	8005d38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d28:	4b30      	ldr	r3, [pc, #192]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0de      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d38:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0d6      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d48:	4b28      	ldr	r3, [pc, #160]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f023 0207 	bic.w	r2, r3, #7
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4925      	ldr	r1, [pc, #148]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5a:	f7fc fb9d 	bl	8002498 <HAL_GetTick>
 8005d5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d60:	e00a      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d62:	f7fc fb99 	bl	8002498 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0be      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d78:	4b1c      	ldr	r3, [pc, #112]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d1eb      	bne.n	8005d62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d010      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	4b14      	ldr	r3, [pc, #80]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d208      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	f023 020f 	bic.w	r2, r3, #15
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	490e      	ldr	r1, [pc, #56]	; (8005dec <HAL_RCC_ClockConfig+0x244>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d214      	bcs.n	8005df0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc6:	4b08      	ldr	r3, [pc, #32]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 020f 	bic.w	r2, r3, #15
 8005dce:	4906      	ldr	r1, [pc, #24]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b04      	ldr	r3, [pc, #16]	; (8005de8 <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d005      	beq.n	8005df0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e086      	b.n	8005ef6 <HAL_RCC_ClockConfig+0x34e>
 8005de8:	52002000 	.word	0x52002000
 8005dec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d010      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	4b3f      	ldr	r3, [pc, #252]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d208      	bcs.n	8005e1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e0c:	4b3c      	ldr	r3, [pc, #240]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	4939      	ldr	r1, [pc, #228]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d208      	bcs.n	8005e4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	492e      	ldr	r1, [pc, #184]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0310 	and.w	r3, r3, #16
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d208      	bcs.n	8005e7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	4922      	ldr	r1, [pc, #136]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d208      	bcs.n	8005ea8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e96:	4b1a      	ldr	r3, [pc, #104]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	4917      	ldr	r1, [pc, #92]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8005ea8:	f000 f834 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	4912      	ldr	r1, [pc, #72]	; (8005f04 <HAL_RCC_ClockConfig+0x35c>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8005ec6:	4b0e      	ldr	r3, [pc, #56]	; (8005f00 <HAL_RCC_ClockConfig+0x358>)
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	4a0d      	ldr	r2, [pc, #52]	; (8005f04 <HAL_RCC_ClockConfig+0x35c>)
 8005ed0:	5cd3      	ldrb	r3, [r2, r3]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8005edc:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <HAL_RCC_ClockConfig+0x360>)
 8005ede:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ee0:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <HAL_RCC_ClockConfig+0x364>)
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ee6:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x368>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fc fa8a 	bl	8002404 <HAL_InitTick>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	58024400 	.word	0x58024400
 8005f04:	08009e24 	.word	0x08009e24
 8005f08:	24000014 	.word	0x24000014
 8005f0c:	24000010 	.word	0x24000010
 8005f10:	24000018 	.word	0x24000018

08005f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b089      	sub	sp, #36	; 0x24
 8005f18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f1a:	4bb3      	ldr	r3, [pc, #716]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f22:	2b18      	cmp	r3, #24
 8005f24:	f200 8155 	bhi.w	80061d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f95 	.word	0x08005f95
 8005f34:	080061d3 	.word	0x080061d3
 8005f38:	080061d3 	.word	0x080061d3
 8005f3c:	080061d3 	.word	0x080061d3
 8005f40:	080061d3 	.word	0x080061d3
 8005f44:	080061d3 	.word	0x080061d3
 8005f48:	080061d3 	.word	0x080061d3
 8005f4c:	080061d3 	.word	0x080061d3
 8005f50:	08005fbb 	.word	0x08005fbb
 8005f54:	080061d3 	.word	0x080061d3
 8005f58:	080061d3 	.word	0x080061d3
 8005f5c:	080061d3 	.word	0x080061d3
 8005f60:	080061d3 	.word	0x080061d3
 8005f64:	080061d3 	.word	0x080061d3
 8005f68:	080061d3 	.word	0x080061d3
 8005f6c:	080061d3 	.word	0x080061d3
 8005f70:	08005fc1 	.word	0x08005fc1
 8005f74:	080061d3 	.word	0x080061d3
 8005f78:	080061d3 	.word	0x080061d3
 8005f7c:	080061d3 	.word	0x080061d3
 8005f80:	080061d3 	.word	0x080061d3
 8005f84:	080061d3 	.word	0x080061d3
 8005f88:	080061d3 	.word	0x080061d3
 8005f8c:	080061d3 	.word	0x080061d3
 8005f90:	08005fc7 	.word	0x08005fc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f94:	4b94      	ldr	r3, [pc, #592]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa0:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	08db      	lsrs	r3, r3, #3
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	4a90      	ldr	r2, [pc, #576]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fb2:	e111      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fb4:	4b8d      	ldr	r3, [pc, #564]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fb6:	61bb      	str	r3, [r7, #24]
    break;
 8005fb8:	e10e      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fba:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fbc:	61bb      	str	r3, [r7, #24]
    break;
 8005fbe:	e10b      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fc0:	4b8c      	ldr	r3, [pc, #560]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fc2:	61bb      	str	r3, [r7, #24]
    break;
 8005fc4:	e108      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fd0:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fdc:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fe6:	4b80      	ldr	r3, [pc, #512]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 80e1 	beq.w	80061cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b02      	cmp	r3, #2
 800600e:	f000 8083 	beq.w	8006118 <HAL_RCC_GetSysClockFreq+0x204>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b02      	cmp	r3, #2
 8006016:	f200 80a1 	bhi.w	800615c <HAL_RCC_GetSysClockFreq+0x248>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_RCC_GetSysClockFreq+0x114>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d056      	beq.n	80060d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006026:	e099      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006028:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d02d      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006034:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	4a6b      	ldr	r2, [pc, #428]	; (80061ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
 8006044:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b62      	ldr	r3, [pc, #392]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a61 	vldr	s11, [pc, #388]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800608e:	e087      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80061fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80060b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060d2:	e065      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	ee07 3a90 	vmov	s15, r3
 80060da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e6:	4b40      	ldr	r3, [pc, #256]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006116:	e043      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b2f      	ldr	r3, [pc, #188]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615a:	e021      	b.n	80061a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006166:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2ec>
 800616a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800616e:	4b1e      	ldr	r3, [pc, #120]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800617e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006182:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80061f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800618e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800619e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061aa:	3301      	adds	r3, #1
 80061ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80061bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c4:	ee17 3a90 	vmov	r3, s15
 80061c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061ca:	e005      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
    break;
 80061d0:	e002      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061d2:	4b07      	ldr	r3, [pc, #28]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061d4:	61bb      	str	r3, [r7, #24]
    break;
 80061d6:	bf00      	nop
  }

  return sysclockfreq;
 80061d8:	69bb      	ldr	r3, [r7, #24]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	58024400 	.word	0x58024400
 80061ec:	03d09000 	.word	0x03d09000
 80061f0:	003d0900 	.word	0x003d0900
 80061f4:	007a1200 	.word	0x007a1200
 80061f8:	46000000 	.word	0x46000000
 80061fc:	4c742400 	.word	0x4c742400
 8006200:	4a742400 	.word	0x4a742400
 8006204:	4af42400 	.word	0x4af42400

08006208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800620e:	f7ff fe81 	bl	8005f14 <HAL_RCC_GetSysClockFreq>
 8006212:	4602      	mov	r2, r0
 8006214:	4b10      	ldr	r3, [pc, #64]	; (8006258 <HAL_RCC_GetHCLKFreq+0x50>)
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	0a1b      	lsrs	r3, r3, #8
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	490f      	ldr	r1, [pc, #60]	; (800625c <HAL_RCC_GetHCLKFreq+0x54>)
 8006220:	5ccb      	ldrb	r3, [r1, r3]
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	fa22 f303 	lsr.w	r3, r2, r3
 800622a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800622c:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <HAL_RCC_GetHCLKFreq+0x50>)
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	4a09      	ldr	r2, [pc, #36]	; (800625c <HAL_RCC_GetHCLKFreq+0x54>)
 8006236:	5cd3      	ldrb	r3, [r2, r3]
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	4a07      	ldr	r2, [pc, #28]	; (8006260 <HAL_RCC_GetHCLKFreq+0x58>)
 8006244:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006246:	4a07      	ldr	r2, [pc, #28]	; (8006264 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800624c:	4b04      	ldr	r3, [pc, #16]	; (8006260 <HAL_RCC_GetHCLKFreq+0x58>)
 800624e:	681b      	ldr	r3, [r3, #0]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	58024400 	.word	0x58024400
 800625c:	08009e24 	.word	0x08009e24
 8006260:	24000014 	.word	0x24000014
 8006264:	24000010 	.word	0x24000010

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800626c:	f7ff ffcc 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4904      	ldr	r1, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	58024400 	.word	0x58024400
 8006290:	08009e24 	.word	0x08009e24

08006294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8006298:	f7ff ffb6 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4904      	ldr	r1, [pc, #16]	; (80062bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	58024400 	.word	0x58024400
 80062bc:	08009e24 	.word	0x08009e24

080062c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062cc:	2300      	movs	r3, #0
 80062ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d03f      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062e4:	d02a      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ea:	d824      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f0:	d018      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f6:	d81e      	bhi.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80062fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006300:	d007      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006302:	e018      	b.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006304:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a9e      	ldr	r2, [pc, #632]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006310:	e015      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	3304      	adds	r3, #4
 8006316:	2102      	movs	r1, #2
 8006318:	4618      	mov	r0, r3
 800631a:	f001 f99b 	bl	8007654 <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006322:	e00c      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f001 fa44 	bl	80077b8 <RCCEx_PLL3_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006334:	e003      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	75fb      	strb	r3, [r7, #23]
      break;
 800633a:	e000      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006344:	4b8f      	ldr	r3, [pc, #572]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006350:	498c      	ldr	r1, [pc, #560]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	650b      	str	r3, [r1, #80]	; 0x50
 8006356:	e001      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d03d      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b04      	cmp	r3, #4
 800636e:	d826      	bhi.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	0800638d 	.word	0x0800638d
 800637c:	0800639b 	.word	0x0800639b
 8006380:	080063ad 	.word	0x080063ad
 8006384:	080063c5 	.word	0x080063c5
 8006388:	080063c5 	.word	0x080063c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638c:	4b7d      	ldr	r3, [pc, #500]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a7c      	ldr	r2, [pc, #496]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006398:	e015      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	2100      	movs	r1, #0
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f957 	bl	8007654 <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063aa:	e00c      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f001 fa00 	bl	80077b8 <RCCEx_PLL3_Config>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063bc:	e003      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
      break;
 80063c2:	e000      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80063c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d109      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063cc:	4b6d      	ldr	r3, [pc, #436]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	f023 0207 	bic.w	r2, r3, #7
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	496a      	ldr	r1, [pc, #424]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	650b      	str	r3, [r1, #80]	; 0x50
 80063de:	e001      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
 80063e2:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d04a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80063f8:	d031      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80063fa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80063fe:	d82b      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006404:	d02d      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d825      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800640c:	2bc0      	cmp	r3, #192	; 0xc0
 800640e:	d02a      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006410:	2bc0      	cmp	r3, #192	; 0xc0
 8006412:	d821      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d016      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d81d      	bhi.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d007      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006424:	e018      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006426:	4b57      	ldr	r3, [pc, #348]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	4a56      	ldr	r2, [pc, #344]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800642c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006430:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006432:	e019      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f90a 	bl	8007654 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006444:	e010      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3324      	adds	r3, #36	; 0x24
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f9b3 	bl	80077b8 <RCCEx_PLL3_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8006456:	e007      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	75fb      	strb	r3, [r7, #23]
      break;
 800645c:	e004      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800645e:	bf00      	nop
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006462:	bf00      	nop
 8006464:	e000      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800646e:	4b45      	ldr	r3, [pc, #276]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006472:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800647a:	4942      	ldr	r1, [pc, #264]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800647c:	4313      	orrs	r3, r2
 800647e:	650b      	str	r3, [r1, #80]	; 0x50
 8006480:	e001      	b.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04f      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800649a:	d036      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x24a>
 800649c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80064a0:	d830      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d032      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80064a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ac:	d82a      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80064ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064b2:	d02e      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x252>
 80064b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064b8:	d824      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80064ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064be:	d018      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x232>
 80064c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c4:	d81e      	bhi.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x244>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ce:	d007      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80064d0:	e018      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d2:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80064d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80064de:	e019      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f8b4 	bl	8007654 <RCCEx_PLL2_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80064f0:	e010      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	3324      	adds	r3, #36	; 0x24
 80064f6:	2100      	movs	r1, #0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 f95d 	bl	80077b8 <RCCEx_PLL3_Config>
 80064fe:	4603      	mov	r3, r0
 8006500:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8006502:	e007      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	75fb      	strb	r3, [r7, #23]
      break;
 8006508:	e004      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800650a:	bf00      	nop
 800650c:	e002      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800650e:	bf00      	nop
 8006510:	e000      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800651a:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	4917      	ldr	r1, [pc, #92]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006528:	4313      	orrs	r3, r2
 800652a:	650b      	str	r3, [r1, #80]	; 0x50
 800652c:	e001      	b.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d034      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006542:	2b30      	cmp	r3, #48	; 0x30
 8006544:	d01c      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8006546:	2b30      	cmp	r3, #48	; 0x30
 8006548:	d817      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800654a:	2b20      	cmp	r3, #32
 800654c:	d00c      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800654e:	2b20      	cmp	r3, #32
 8006550:	d813      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d018      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8006556:	2b10      	cmp	r3, #16
 8006558:	d10f      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006566:	e010      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3304      	adds	r3, #4
 800656c:	2102      	movs	r1, #2
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f870 	bl	8007654 <RCCEx_PLL2_Config>
 8006574:	4603      	mov	r3, r0
 8006576:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006578:	e007      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
      break;
 800657e:	e004      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8006580:	bf00      	nop
 8006582:	e002      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006584:	58024400 	.word	0x58024400
      break;
 8006588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006590:	4b9b      	ldr	r3, [pc, #620]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006594:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800659c:	4998      	ldr	r1, [pc, #608]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065a2:	e001      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d047      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065bc:	d030      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c2:	d82a      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80065c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065c8:	d02c      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80065ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065ce:	d824      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d4:	d018      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80065d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065da:	d81e      	bhi.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	d007      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80065e6:	e018      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b85      	ldr	r3, [pc, #532]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4a84      	ldr	r2, [pc, #528]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065f4:	e017      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	2100      	movs	r1, #0
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 f829 	bl	8007654 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006606:	e00e      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3324      	adds	r3, #36	; 0x24
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f001 f8d2 	bl	80077b8 <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006618:	e005      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	75fb      	strb	r3, [r7, #23]
      break;
 800661e:	e002      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006620:	bf00      	nop
 8006622:	e000      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800662c:	4b74      	ldr	r3, [pc, #464]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800662e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006630:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006638:	4971      	ldr	r1, [pc, #452]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800663a:	4313      	orrs	r3, r2
 800663c:	650b      	str	r3, [r1, #80]	; 0x50
 800663e:	e001      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d049      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006658:	d02e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800665a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800665e:	d828      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006664:	d02a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006666:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800666a:	d822      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800666c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006670:	d026      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006672:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006676:	d81c      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667c:	d010      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800667e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006682:	d816      	bhi.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01d      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668c:	d111      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	3304      	adds	r3, #4
 8006692:	2101      	movs	r1, #1
 8006694:	4618      	mov	r0, r3
 8006696:	f000 ffdd 	bl	8007654 <RCCEx_PLL2_Config>
 800669a:	4603      	mov	r3, r0
 800669c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800669e:	e012      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	2101      	movs	r1, #1
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 f886 	bl	80077b8 <RCCEx_PLL3_Config>
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066b0:	e009      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	75fb      	strb	r3, [r7, #23]
      break;
 80066b6:	e006      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80066b8:	bf00      	nop
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80066bc:	bf00      	nop
 80066be:	e002      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80066c0:	bf00      	nop
 80066c2:	e000      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80066c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066cc:	4b4c      	ldr	r3, [pc, #304]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80066ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d8:	4949      	ldr	r1, [pc, #292]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	650b      	str	r3, [r1, #80]	; 0x50
 80066de:	e001      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d053      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80066fa:	d034      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80066fc:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006700:	d82e      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006702:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006706:	d030      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800670c:	d828      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800670e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006712:	d02c      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d822      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800671a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800671e:	d028      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006724:	d81c      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800672a:	d010      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800672c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006730:	d816      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01f      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800673a:	d111      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	2101      	movs	r1, #1
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ff86 	bl	8007654 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800674c:	e014      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3324      	adds	r3, #36	; 0x24
 8006752:	2101      	movs	r1, #1
 8006754:	4618      	mov	r0, r3
 8006756:	f001 f82f 	bl	80077b8 <RCCEx_PLL3_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800675e:	e00b      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	e008      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006766:	bf00      	nop
 8006768:	e006      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800676a:	bf00      	nop
 800676c:	e004      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 800676e:	bf00      	nop
 8006770:	e002      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006778:	7dfb      	ldrb	r3, [r7, #23]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800677e:	4b20      	ldr	r3, [pc, #128]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800678c:	491c      	ldr	r1, [pc, #112]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800678e:	4313      	orrs	r3, r2
 8006790:	658b      	str	r3, [r1, #88]	; 0x58
 8006792:	e001      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d031      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ac:	d00e      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80067ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b2:	d814      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d015      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80067b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067bc:	d10f      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067be:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c2:	4a0f      	ldr	r2, [pc, #60]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067ca:	e00c      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	2101      	movs	r1, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff3e 	bl	8007654 <RCCEx_PLL2_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067dc:	e003      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e000      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 80067e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10b      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f8:	4901      	ldr	r1, [pc, #4]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	650b      	str	r3, [r1, #80]	; 0x50
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8006800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d032      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	2b03      	cmp	r3, #3
 800681a:	d81b      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800681c:	a201      	add	r2, pc, #4	; (adr r2, 8006824 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	0800685b 	.word	0x0800685b
 8006828:	08006835 	.word	0x08006835
 800682c:	08006843 	.word	0x08006843
 8006830:	0800685b 	.word	0x0800685b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4bb2      	ldr	r3, [pc, #712]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006838:	4ab1      	ldr	r2, [pc, #708]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006840:	e00c      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3304      	adds	r3, #4
 8006846:	2102      	movs	r1, #2
 8006848:	4618      	mov	r0, r3
 800684a:	f000 ff03 	bl	8007654 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006852:	e003      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	75fb      	strb	r3, [r7, #23]
      break;
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800685a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006862:	4ba7      	ldr	r3, [pc, #668]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006866:	f023 0203 	bic.w	r2, r3, #3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	49a4      	ldr	r1, [pc, #656]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006870:	4313      	orrs	r3, r2
 8006872:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8086 	beq.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006888:	4b9e      	ldr	r3, [pc, #632]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a9d      	ldr	r2, [pc, #628]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800688e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006894:	f7fb fe00 	bl	8002498 <HAL_GetTick>
 8006898:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800689a:	e009      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689c:	f7fb fdfc 	bl	8002498 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	; 0x64
 80068a8:	d902      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	75fb      	strb	r3, [r7, #23]
        break;
 80068ae:	e005      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b0:	4b94      	ldr	r3, [pc, #592]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ef      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80068bc:	7dfb      	ldrb	r3, [r7, #23]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d166      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068c2:	4b8f      	ldr	r3, [pc, #572]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068cc:	4053      	eors	r3, r2
 80068ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d013      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068d6:	4b8a      	ldr	r3, [pc, #552]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068e0:	4b87      	ldr	r3, [pc, #540]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	4a86      	ldr	r2, [pc, #536]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068ec:	4b84      	ldr	r3, [pc, #528]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	4a83      	ldr	r2, [pc, #524]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068f8:	4a81      	ldr	r2, [pc, #516]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006908:	d115      	bne.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690a:	f7fb fdc5 	bl	8002498 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006910:	e00b      	b.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006912:	f7fb fdc1 	bl	8002498 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006920:	4293      	cmp	r3, r2
 8006922:	d902      	bls.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	75fb      	strb	r3, [r7, #23]
            break;
 8006928:	e005      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800692a:	4b75      	ldr	r3, [pc, #468]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d0ed      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d126      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006946:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 800694c:	4b6c      	ldr	r3, [pc, #432]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695a:	0919      	lsrs	r1, r3, #4
 800695c:	4b6a      	ldr	r3, [pc, #424]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800695e:	400b      	ands	r3, r1
 8006960:	4967      	ldr	r1, [pc, #412]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006962:	4313      	orrs	r3, r2
 8006964:	610b      	str	r3, [r1, #16]
 8006966:	e005      	b.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8006968:	4b65      	ldr	r3, [pc, #404]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a64      	ldr	r2, [pc, #400]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800696e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006972:	6113      	str	r3, [r2, #16]
 8006974:	4b62      	ldr	r3, [pc, #392]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006982:	495f      	ldr	r1, [pc, #380]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006984:	4313      	orrs	r3, r2
 8006986:	670b      	str	r3, [r1, #112]	; 0x70
 8006988:	e004      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	75bb      	strb	r3, [r7, #22]
 800698e:	e001      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
 8006992:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d07f      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069a6:	2b28      	cmp	r3, #40	; 0x28
 80069a8:	d866      	bhi.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80069aa:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 80069ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b0:	08006a7f 	.word	0x08006a7f
 80069b4:	08006a79 	.word	0x08006a79
 80069b8:	08006a79 	.word	0x08006a79
 80069bc:	08006a79 	.word	0x08006a79
 80069c0:	08006a79 	.word	0x08006a79
 80069c4:	08006a79 	.word	0x08006a79
 80069c8:	08006a79 	.word	0x08006a79
 80069cc:	08006a79 	.word	0x08006a79
 80069d0:	08006a55 	.word	0x08006a55
 80069d4:	08006a79 	.word	0x08006a79
 80069d8:	08006a79 	.word	0x08006a79
 80069dc:	08006a79 	.word	0x08006a79
 80069e0:	08006a79 	.word	0x08006a79
 80069e4:	08006a79 	.word	0x08006a79
 80069e8:	08006a79 	.word	0x08006a79
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006a67 	.word	0x08006a67
 80069f4:	08006a79 	.word	0x08006a79
 80069f8:	08006a79 	.word	0x08006a79
 80069fc:	08006a79 	.word	0x08006a79
 8006a00:	08006a79 	.word	0x08006a79
 8006a04:	08006a79 	.word	0x08006a79
 8006a08:	08006a79 	.word	0x08006a79
 8006a0c:	08006a79 	.word	0x08006a79
 8006a10:	08006a7f 	.word	0x08006a7f
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006a79 	.word	0x08006a79
 8006a1c:	08006a79 	.word	0x08006a79
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a79 	.word	0x08006a79
 8006a30:	08006a7f 	.word	0x08006a7f
 8006a34:	08006a79 	.word	0x08006a79
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
 8006a40:	08006a79 	.word	0x08006a79
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	08006a7f 	.word	0x08006a7f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	2101      	movs	r1, #1
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fdfa 	bl	8007654 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a64:	e00c      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fea3 	bl	80077b8 <RCCEx_PLL3_Config>
 8006a72:	4603      	mov	r3, r0
 8006a74:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a76:	e003      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a86:	4b1e      	ldr	r3, [pc, #120]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a94:	491a      	ldr	r1, [pc, #104]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	654b      	str	r3, [r1, #84]	; 0x54
 8006a9a:	e001      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d03f      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d821      	bhi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8006ab4:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8006ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aba:	bf00      	nop
 8006abc:	08006b0d 	.word	0x08006b0d
 8006ac0:	08006ad5 	.word	0x08006ad5
 8006ac4:	08006ae7 	.word	0x08006ae7
 8006ac8:	08006b0d 	.word	0x08006b0d
 8006acc:	08006b0d 	.word	0x08006b0d
 8006ad0:	08006b0d 	.word	0x08006b0d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fdba 	bl	8007654 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ae4:	e013      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3324      	adds	r3, #36	; 0x24
 8006aea:	2101      	movs	r1, #1
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fe63 	bl	80077b8 <RCCEx_PLL3_Config>
 8006af2:	4603      	mov	r3, r0
 8006af4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006af6:	e00a      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	75fb      	strb	r3, [r7, #23]
      break;
 8006afc:	e007      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
 8006b04:	58024800 	.word	0x58024800
 8006b08:	00ffffcf 	.word	0x00ffffcf
      break;
 8006b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b14:	4b9f      	ldr	r3, [pc, #636]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f023 0207 	bic.w	r2, r3, #7
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b20:	499c      	ldr	r1, [pc, #624]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	654b      	str	r3, [r1, #84]	; 0x54
 8006b26:	e001      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d039      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d820      	bhi.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b8b 	.word	0x08006b8b
 8006b4c:	08006b61 	.word	0x08006b61
 8006b50:	08006b73 	.word	0x08006b73
 8006b54:	08006b8b 	.word	0x08006b8b
 8006b58:	08006b8b 	.word	0x08006b8b
 8006b5c:	08006b8b 	.word	0x08006b8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	2101      	movs	r1, #1
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fd74 	bl	8007654 <RCCEx_PLL2_Config>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b70:	e00c      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3324      	adds	r3, #36	; 0x24
 8006b76:	2101      	movs	r1, #1
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fe1d 	bl	80077b8 <RCCEx_PLL3_Config>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b82:	e003      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	75fb      	strb	r3, [r7, #23]
      break;
 8006b88:	e000      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8006b8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b92:	4b80      	ldr	r3, [pc, #512]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b96:	f023 0207 	bic.w	r2, r3, #7
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba0:	497c      	ldr	r1, [pc, #496]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ba6:	e001      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d04b      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc2:	d02e      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bc8:	d828      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bce:	d02a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd4:	d822      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006bd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bda:	d026      	beq.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006bdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006be0:	d81c      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be6:	d010      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8006be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bec:	d816      	bhi.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01d      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bf6:	d111      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fd28 	bl	8007654 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c08:	e012      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3324      	adds	r3, #36	; 0x24
 8006c0e:	2102      	movs	r1, #2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f000 fdd1 	bl	80077b8 <RCCEx_PLL3_Config>
 8006c16:	4603      	mov	r3, r0
 8006c18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c1a:	e009      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c20:	e006      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006c22:	bf00      	nop
 8006c24:	e004      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8006c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10a      	bne.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c36:	4b57      	ldr	r3, [pc, #348]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c44:	4953      	ldr	r1, [pc, #332]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	654b      	str	r3, [r1, #84]	; 0x54
 8006c4a:	e001      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
 8006c4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d04b      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c66:	d02e      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8006c68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c6c:	d828      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c72:	d02a      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c78:	d822      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c7e:	d026      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006c80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c84:	d81c      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8a:	d010      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c90:	d816      	bhi.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01d      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9a:	d111      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fcd6 	bl	8007654 <RCCEx_PLL2_Config>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cac:	e012      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3324      	adds	r3, #36	; 0x24
 8006cb2:	2102      	movs	r1, #2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fd7f 	bl	80077b8 <RCCEx_PLL3_Config>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cbe:	e009      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc4:	e006      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006cca:	bf00      	nop
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006cce:	bf00      	nop
 8006cd0:	e000      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8006cd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cda:	4b2e      	ldr	r3, [pc, #184]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ce8:	492a      	ldr	r1, [pc, #168]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	658b      	str	r3, [r1, #88]	; 0x58
 8006cee:	e001      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d04d      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d0a:	d02e      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8006d0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d10:	d828      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d16:	d02a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1c:	d822      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006d1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d22:	d026      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006d24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d28:	d81c      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006d2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d2e:	d010      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8006d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d34:	d816      	bhi.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01d      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d111      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	3304      	adds	r3, #4
 8006d44:	2100      	movs	r1, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f000 fc84 	bl	8007654 <RCCEx_PLL2_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d50:	e012      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3324      	adds	r3, #36	; 0x24
 8006d56:	2102      	movs	r1, #2
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fd2d 	bl	80077b8 <RCCEx_PLL3_Config>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d62:	e009      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e006      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e004      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e002      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8006d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10c      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d7e:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d8c:	4901      	ldr	r1, [pc, #4]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	658b      	str	r3, [r1, #88]	; 0x58
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8006d94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d01a      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006db2:	d10a      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3324      	adds	r3, #36	; 0x24
 8006db8:	2102      	movs	r1, #2
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fcfc 	bl	80077b8 <RCCEx_PLL3_Config>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006dca:	4b8c      	ldr	r3, [pc, #560]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	4988      	ldr	r1, [pc, #544]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01a      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006df4:	d10a      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3324      	adds	r3, #36	; 0x24
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fcdb 	bl	80077b8 <RCCEx_PLL3_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e0c:	4b7b      	ldr	r3, [pc, #492]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e1a:	4978      	ldr	r1, [pc, #480]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d034      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e36:	d01d      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e3c:	d817      	bhi.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e46:	d009      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8006e48:	e011      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	2100      	movs	r1, #0
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fbff 	bl	8007654 <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e5a:	e00c      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3324      	adds	r3, #36	; 0x24
 8006e60:	2102      	movs	r1, #2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fca8 	bl	80077b8 <RCCEx_PLL3_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e6c:	e003      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
      break;
 8006e72:	e000      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8006e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e7c:	4b5f      	ldr	r3, [pc, #380]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e8a:	495c      	ldr	r1, [pc, #368]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e90:	e001      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
 8006e94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d033      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ea8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eac:	d01c      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eb2:	d816      	bhi.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006eb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eb8:	d003      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8006eba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ebe:	d007      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006ec0:	e00f      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec2:	4b4e      	ldr	r3, [pc, #312]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	4a4d      	ldr	r2, [pc, #308]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ecc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ece:	e00c      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3324      	adds	r3, #36	; 0x24
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fc6e 	bl	80077b8 <RCCEx_PLL3_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ee0:	e003      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee6:	e000      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ee8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ef0:	4b42      	ldr	r3, [pc, #264]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efe:	493f      	ldr	r1, [pc, #252]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	654b      	str	r3, [r1, #84]	; 0x54
 8006f04:	e001      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f06:	7dfb      	ldrb	r3, [r7, #23]
 8006f08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d029      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d007      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006f24:	e00f      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f26:	4b35      	ldr	r3, [pc, #212]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	4a34      	ldr	r2, [pc, #208]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f32:	e00b      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	2102      	movs	r1, #2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb8a 	bl	8007654 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f44:	e002      	b.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	75fb      	strb	r3, [r7, #23]
      break;
 8006f4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f52:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	4927      	ldr	r1, [pc, #156]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006f60:	4313      	orrs	r3, r2
 8006f62:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f64:	e001      	b.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3324      	adds	r3, #36	; 0x24
 8006f7a:	2102      	movs	r1, #2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 fc1b 	bl	80077b8 <RCCEx_PLL3_Config>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d035      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa2:	d017      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa8:	d811      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fae:	d013      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb4:	d80b      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d010      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbe:	d106      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4a0d      	ldr	r2, [pc, #52]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fcc:	e007      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd2:	e004      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e002      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e000      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff2:	4902      	ldr	r1, [pc, #8]	; (8006ffc <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ff8:	e004      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006ffa:	bf00      	nop
 8006ffc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
 8007002:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007010:	4b30      	ldr	r3, [pc, #192]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007014:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701c:	492d      	ldr	r1, [pc, #180]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800701e:	4313      	orrs	r3, r2
 8007020:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800702e:	4b29      	ldr	r3, [pc, #164]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800703a:	4926      	ldr	r1, [pc, #152]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800703c:	4313      	orrs	r3, r2
 800703e:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800704c:	4b21      	ldr	r3, [pc, #132]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007058:	491e      	ldr	r1, [pc, #120]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800705a:	4313      	orrs	r3, r2
 800705c:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800706a:	4b1a      	ldr	r3, [pc, #104]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007070:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007074:	6113      	str	r3, [r2, #16]
 8007076:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007080:	4914      	ldr	r1, [pc, #80]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007082:	4313      	orrs	r3, r2
 8007084:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	da08      	bge.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800708e:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709a:	490e      	ldr	r1, [pc, #56]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800709c:	4313      	orrs	r3, r2
 800709e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ba:	4906      	ldr	r1, [pc, #24]	; (80070d4 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80070c0:	7dbb      	ldrb	r3, [r7, #22]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e000      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3718      	adds	r7, #24
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	58024400 	.word	0x58024400

080070d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80070dc:	f7ff f894 	bl	8006208 <HAL_RCC_GetHCLKFreq>
 80070e0:	4602      	mov	r2, r0
 80070e2:	4b06      	ldr	r3, [pc, #24]	; (80070fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	091b      	lsrs	r3, r3, #4
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	4904      	ldr	r1, [pc, #16]	; (8007100 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070ee:	5ccb      	ldrb	r3, [r1, r3]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	58024400 	.word	0x58024400
 8007100:	08009e24 	.word	0x08009e24

08007104 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007104:	b480      	push	{r7}
 8007106:	b089      	sub	sp, #36	; 0x24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800710c:	4ba1      	ldr	r3, [pc, #644]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007116:	4b9f      	ldr	r3, [pc, #636]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711a:	0b1b      	lsrs	r3, r3, #12
 800711c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007120:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007122:	4b9c      	ldr	r3, [pc, #624]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	091b      	lsrs	r3, r3, #4
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800712e:	4b99      	ldr	r3, [pc, #612]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	08db      	lsrs	r3, r3, #3
 8007134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8111 	beq.w	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b02      	cmp	r3, #2
 8007156:	f000 8083 	beq.w	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b02      	cmp	r3, #2
 800715e:	f200 80a1 	bhi.w	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d056      	beq.n	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800716e:	e099      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007170:	4b88      	ldr	r3, [pc, #544]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d02d      	beq.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800717c:	4b85      	ldr	r3, [pc, #532]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	4a84      	ldr	r2, [pc, #528]	; (8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	ee07 3a90 	vmov	s15, r3
 8007194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071d6:	e087      	b.n	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ea:	4b6a      	ldr	r3, [pc, #424]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800721a:	e065      	b.n	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b59      	ldr	r3, [pc, #356]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a56 	vldr	s11, [pc, #344]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725e:	e043      	b.n	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b48      	ldr	r3, [pc, #288]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a45 	vldr	s11, [pc, #276]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072a2:	e021      	b.n	80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b6:	4b37      	ldr	r3, [pc, #220]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072e8:	4b2a      	ldr	r3, [pc, #168]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	0a5b      	lsrs	r3, r3, #9
 80072ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007302:	edd7 6a07 	vldr	s13, [r7, #28]
 8007306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800730a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730e:	ee17 2a90 	vmov	r2, s15
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007316:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 2a90 	vmov	r2, s15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	0e1b      	lsrs	r3, r3, #24
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800735a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736a:	ee17 2a90 	vmov	r2, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007372:	e008      	b.n	8007386 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	609a      	str	r2, [r3, #8]
}
 8007386:	bf00      	nop
 8007388:	3724      	adds	r7, #36	; 0x24
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	03d09000 	.word	0x03d09000
 800739c:	46000000 	.word	0x46000000
 80073a0:	4c742400 	.word	0x4c742400
 80073a4:	4a742400 	.word	0x4a742400
 80073a8:	4af42400 	.word	0x4af42400

080073ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b089      	sub	sp, #36	; 0x24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b4:	4ba1      	ldr	r3, [pc, #644]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	f003 0303 	and.w	r3, r3, #3
 80073bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073be:	4b9f      	ldr	r3, [pc, #636]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	0d1b      	lsrs	r3, r3, #20
 80073c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073ca:	4b9c      	ldr	r3, [pc, #624]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	0a1b      	lsrs	r3, r3, #8
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80073d6:	4b99      	ldr	r3, [pc, #612]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	08db      	lsrs	r3, r3, #3
 80073dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 8111 	beq.w	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	f000 8083 	beq.w	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b02      	cmp	r3, #2
 8007406:	f200 80a1 	bhi.w	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d056      	beq.n	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007416:	e099      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007418:	4b88      	ldr	r3, [pc, #544]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0320 	and.w	r3, r3, #32
 8007420:	2b00      	cmp	r3, #0
 8007422:	d02d      	beq.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007424:	4b85      	ldr	r3, [pc, #532]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	08db      	lsrs	r3, r3, #3
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	4a84      	ldr	r2, [pc, #528]	; (8007640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
 8007434:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b7b      	ldr	r3, [pc, #492]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800747e:	e087      	b.n	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007648 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b6a      	ldr	r3, [pc, #424]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c2:	e065      	b.n	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800764c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b59      	ldr	r3, [pc, #356]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007506:	e043      	b.n	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b48      	ldr	r3, [pc, #288]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a03 	vldr	s12, [r7, #12]
 800752e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754a:	e021      	b.n	8007590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800764c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800755a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755e:	4b37      	ldr	r3, [pc, #220]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007572:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800757a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800758a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800758e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007590:	4b2a      	ldr	r3, [pc, #168]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007594:	0a5b      	lsrs	r3, r3, #9
 8007596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b6:	ee17 2a90 	vmov	r2, s15
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075be:	4b1f      	ldr	r3, [pc, #124]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	0c1b      	lsrs	r3, r3, #16
 80075c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e4:	ee17 2a90 	vmov	r2, s15
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075ec:	4b13      	ldr	r3, [pc, #76]	; (800763c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f0:	0e1b      	lsrs	r3, r3, #24
 80075f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f6:	ee07 3a90 	vmov	s15, r3
 80075fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007606:	edd7 6a07 	vldr	s13, [r7, #28]
 800760a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007612:	ee17 2a90 	vmov	r2, s15
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800761a:	e008      	b.n	800762e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	609a      	str	r2, [r3, #8]
}
 800762e:	bf00      	nop
 8007630:	3724      	adds	r7, #36	; 0x24
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	58024400 	.word	0x58024400
 8007640:	03d09000 	.word	0x03d09000
 8007644:	46000000 	.word	0x46000000
 8007648:	4c742400 	.word	0x4c742400
 800764c:	4a742400 	.word	0x4a742400
 8007650:	4af42400 	.word	0x4af42400

08007654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007662:	4b53      	ldr	r3, [pc, #332]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	2b03      	cmp	r3, #3
 800766c:	d101      	bne.n	8007672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e099      	b.n	80077a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007672:	4b4f      	ldr	r3, [pc, #316]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a4e      	ldr	r2, [pc, #312]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007678:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800767c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800767e:	f7fa ff0b 	bl	8002498 <HAL_GetTick>
 8007682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007684:	e008      	b.n	8007698 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007686:	f7fa ff07 	bl	8002498 <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	2b02      	cmp	r3, #2
 8007692:	d901      	bls.n	8007698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007694:	2303      	movs	r3, #3
 8007696:	e086      	b.n	80077a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007698:	4b45      	ldr	r3, [pc, #276]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1f0      	bne.n	8007686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076a4:	4b42      	ldr	r3, [pc, #264]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	493f      	ldr	r1, [pc, #252]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	628b      	str	r3, [r1, #40]	; 0x28
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	3b01      	subs	r3, #1
 80076be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	025b      	lsls	r3, r3, #9
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	431a      	orrs	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	041b      	lsls	r3, r3, #16
 80076d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	061b      	lsls	r3, r3, #24
 80076e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076e8:	4931      	ldr	r1, [pc, #196]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076ee:	4b30      	ldr	r3, [pc, #192]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	492d      	ldr	r1, [pc, #180]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007700:	4b2b      	ldr	r3, [pc, #172]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f023 0220 	bic.w	r2, r3, #32
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	4928      	ldr	r1, [pc, #160]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800770e:	4313      	orrs	r3, r2
 8007710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007712:	4b27      	ldr	r3, [pc, #156]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	4a26      	ldr	r2, [pc, #152]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007718:	f023 0310 	bic.w	r3, r3, #16
 800771c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800771e:	4b24      	ldr	r3, [pc, #144]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007722:	4b24      	ldr	r3, [pc, #144]	; (80077b4 <RCCEx_PLL2_Config+0x160>)
 8007724:	4013      	ands	r3, r2
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	69d2      	ldr	r2, [r2, #28]
 800772a:	00d2      	lsls	r2, r2, #3
 800772c:	4920      	ldr	r1, [pc, #128]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800772e:	4313      	orrs	r3, r2
 8007730:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007732:	4b1f      	ldr	r3, [pc, #124]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	4a1e      	ldr	r2, [pc, #120]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007738:	f043 0310 	orr.w	r3, r3, #16
 800773c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d106      	bne.n	8007752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007744:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800774a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007750:	e00f      	b.n	8007772 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d106      	bne.n	8007766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007758:	4b15      	ldr	r3, [pc, #84]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	4a14      	ldr	r2, [pc, #80]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007764:	e005      	b.n	8007772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007766:	4b12      	ldr	r3, [pc, #72]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776a:	4a11      	ldr	r2, [pc, #68]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800776c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a0e      	ldr	r2, [pc, #56]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 8007778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800777c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800777e:	f7fa fe8b 	bl	8002498 <HAL_GetTick>
 8007782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007784:	e008      	b.n	8007798 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007786:	f7fa fe87 	bl	8002498 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d901      	bls.n	8007798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e006      	b.n	80077a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <RCCEx_PLL2_Config+0x15c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d0f0      	beq.n	8007786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	58024400 	.word	0x58024400
 80077b4:	ffff0007 	.word	0xffff0007

080077b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077c6:	4b53      	ldr	r3, [pc, #332]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d101      	bne.n	80077d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e099      	b.n	800790a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077d6:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a4e      	ldr	r2, [pc, #312]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e2:	f7fa fe59 	bl	8002498 <HAL_GetTick>
 80077e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077e8:	e008      	b.n	80077fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077ea:	f7fa fe55 	bl	8002498 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e086      	b.n	800790a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077fc:	4b45      	ldr	r3, [pc, #276]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f0      	bne.n	80077ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007808:	4b42      	ldr	r3, [pc, #264]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 800780a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	051b      	lsls	r3, r3, #20
 8007816:	493f      	ldr	r1, [pc, #252]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007818:	4313      	orrs	r3, r2
 800781a:	628b      	str	r3, [r1, #40]	; 0x28
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	3b01      	subs	r3, #1
 8007822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	3b01      	subs	r3, #1
 800782c:	025b      	lsls	r3, r3, #9
 800782e:	b29b      	uxth	r3, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	3b01      	subs	r3, #1
 8007838:	041b      	lsls	r3, r3, #16
 800783a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	3b01      	subs	r3, #1
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800784c:	4931      	ldr	r1, [pc, #196]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007852:	4b30      	ldr	r3, [pc, #192]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	492d      	ldr	r1, [pc, #180]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007860:	4313      	orrs	r3, r2
 8007862:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007864:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	4928      	ldr	r1, [pc, #160]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007876:	4b27      	ldr	r3, [pc, #156]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	4a26      	ldr	r2, [pc, #152]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 800787c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007882:	4b24      	ldr	r3, [pc, #144]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <RCCEx_PLL3_Config+0x160>)
 8007888:	4013      	ands	r3, r2
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	69d2      	ldr	r2, [r2, #28]
 800788e:	00d2      	lsls	r2, r2, #3
 8007890:	4920      	ldr	r1, [pc, #128]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007896:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 800789c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d106      	bne.n	80078b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078a8:	4b1a      	ldr	r3, [pc, #104]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a19      	ldr	r2, [pc, #100]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b4:	e00f      	b.n	80078d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078bc:	4b15      	ldr	r3, [pc, #84]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a14      	ldr	r2, [pc, #80]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078c8:	e005      	b.n	80078d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078ca:	4b12      	ldr	r3, [pc, #72]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	4a11      	ldr	r2, [pc, #68]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078d6:	4b0f      	ldr	r3, [pc, #60]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a0e      	ldr	r2, [pc, #56]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7fa fdd9 	bl	8002498 <HAL_GetTick>
 80078e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078e8:	e008      	b.n	80078fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078ea:	f7fa fdd5 	bl	8002498 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e006      	b.n	800790a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078fc:	4b05      	ldr	r3, [pc, #20]	; (8007914 <RCCEx_PLL3_Config+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0f0      	beq.n	80078ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	58024400 	.word	0x58024400
 8007918:	ffff0007 	.word	0xffff0007

0800791c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e042      	b.n	80079b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007934:	2b00      	cmp	r3, #0
 8007936:	d106      	bne.n	8007946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7f9 fff1 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2224      	movs	r2, #36	; 0x24
 800794a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 0201 	bic.w	r2, r2, #1
 800795c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f8c2 	bl	8007ae8 <UART_SetConfig>
 8007964:	4603      	mov	r3, r0
 8007966:	2b01      	cmp	r3, #1
 8007968:	d101      	bne.n	800796e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e022      	b.n	80079b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 ff22 	bl	80087c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800798a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800799a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 ffa9 	bl	8008904 <UART_CheckIdleState>
 80079b2:	4603      	mov	r3, r0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	f040 8083 	bne.w	8007ade <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_UART_Transmit+0x28>
 80079de:	88fb      	ldrh	r3, [r7, #6]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e07b      	b.n	8007ae0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Transmit+0x3a>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e074      	b.n	8007ae0 <HAL_UART_Transmit+0x124>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2221      	movs	r2, #33	; 0x21
 8007a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a0e:	f7fa fd43 	bl	8002498 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	88fa      	ldrh	r2, [r7, #6]
 8007a18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	88fa      	ldrh	r2, [r7, #6]
 8007a20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2c:	d108      	bne.n	8007a40 <HAL_UART_Transmit+0x84>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d104      	bne.n	8007a40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	61bb      	str	r3, [r7, #24]
 8007a3e:	e003      	b.n	8007a48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a44:	2300      	movs	r3, #0
 8007a46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007a50:	e02c      	b.n	8007aac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2180      	movs	r1, #128	; 0x80
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 ff9c 	bl	800899a <UART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e039      	b.n	8007ae0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	881b      	ldrh	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	3302      	adds	r3, #2
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	e007      	b.n	8007a9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	781a      	ldrb	r2, [r3, #0]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	3301      	adds	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1cc      	bne.n	8007a52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2140      	movs	r1, #64	; 0x40
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f000 ff69 	bl	800899a <UART_WaitOnFlagUntilTimeout>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e006      	b.n	8007ae0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e000      	b.n	8007ae0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b092      	sub	sp, #72	; 0x48
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4bbe      	ldr	r3, [pc, #760]	; (8007e10 <UART_SetConfig+0x328>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4ab3      	ldr	r2, [pc, #716]	; (8007e14 <UART_SetConfig+0x32c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b50:	4313      	orrs	r3, r2
 8007b52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	4baf      	ldr	r3, [pc, #700]	; (8007e18 <UART_SetConfig+0x330>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f023 010f 	bic.w	r1, r3, #15
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4aa6      	ldr	r2, [pc, #664]	; (8007e1c <UART_SetConfig+0x334>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d177      	bne.n	8007c78 <UART_SetConfig+0x190>
 8007b88:	4ba5      	ldr	r3, [pc, #660]	; (8007e20 <UART_SetConfig+0x338>)
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b90:	2b28      	cmp	r3, #40	; 0x28
 8007b92:	d86d      	bhi.n	8007c70 <UART_SetConfig+0x188>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0xb4>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c71 	.word	0x08007c71
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c71 	.word	0x08007c71
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c71 	.word	0x08007c71
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c71 	.word	0x08007c71
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e326      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e322      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e31e      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e31a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e316      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e312      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e30e      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a69      	ldr	r2, [pc, #420]	; (8007e24 <UART_SetConfig+0x33c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d130      	bne.n	8007ce4 <UART_SetConfig+0x1fc>
 8007c82:	4b67      	ldr	r3, [pc, #412]	; (8007e20 <UART_SetConfig+0x338>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d826      	bhi.n	8007cdc <UART_SetConfig+0x1f4>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <UART_SetConfig+0x1ac>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e2f0      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e2ec      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e2e8      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e2e4      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e2e0      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e2dc      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e2d8      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a4f      	ldr	r2, [pc, #316]	; (8007e28 <UART_SetConfig+0x340>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d130      	bne.n	8007d50 <UART_SetConfig+0x268>
 8007cee:	4b4c      	ldr	r3, [pc, #304]	; (8007e20 <UART_SetConfig+0x338>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d826      	bhi.n	8007d48 <UART_SetConfig+0x260>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <UART_SetConfig+0x218>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d19 	.word	0x08007d19
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e2ba      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d20:	2304      	movs	r3, #4
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e2b6      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e2b2      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d30:	2310      	movs	r3, #16
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e2ae      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e2aa      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e2a6      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e2a2      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a35      	ldr	r2, [pc, #212]	; (8007e2c <UART_SetConfig+0x344>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d130      	bne.n	8007dbc <UART_SetConfig+0x2d4>
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <UART_SetConfig+0x338>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d826      	bhi.n	8007db4 <UART_SetConfig+0x2cc>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x284>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007da5 	.word	0x08007da5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e284      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e280      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e27c      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e278      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007da4:	2320      	movs	r3, #32
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e274      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e270      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e26c      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <UART_SetConfig+0x348>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d142      	bne.n	8007e4c <UART_SetConfig+0x364>
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <UART_SetConfig+0x338>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d838      	bhi.n	8007e44 <UART_SetConfig+0x35c>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x2f0>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e24e      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e24a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e246      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e242      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e10:	cfff69f3 	.word	0xcfff69f3
 8007e14:	58000c00 	.word	0x58000c00
 8007e18:	11fff4ff 	.word	0x11fff4ff
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	58024400 	.word	0x58024400
 8007e24:	40004400 	.word	0x40004400
 8007e28:	40004800 	.word	0x40004800
 8007e2c:	40004c00 	.word	0x40004c00
 8007e30:	40005000 	.word	0x40005000
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e22c      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e228      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e224      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4ab1      	ldr	r2, [pc, #708]	; (8008118 <UART_SetConfig+0x630>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d176      	bne.n	8007f44 <UART_SetConfig+0x45c>
 8007e56:	4bb1      	ldr	r3, [pc, #708]	; (800811c <UART_SetConfig+0x634>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e5e:	2b28      	cmp	r3, #40	; 0x28
 8007e60:	d86c      	bhi.n	8007f3c <UART_SetConfig+0x454>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x380>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007f0d 	.word	0x08007f0d
 8007e6c:	08007f3d 	.word	0x08007f3d
 8007e70:	08007f3d 	.word	0x08007f3d
 8007e74:	08007f3d 	.word	0x08007f3d
 8007e78:	08007f3d 	.word	0x08007f3d
 8007e7c:	08007f3d 	.word	0x08007f3d
 8007e80:	08007f3d 	.word	0x08007f3d
 8007e84:	08007f3d 	.word	0x08007f3d
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f3d 	.word	0x08007f3d
 8007e90:	08007f3d 	.word	0x08007f3d
 8007e94:	08007f3d 	.word	0x08007f3d
 8007e98:	08007f3d 	.word	0x08007f3d
 8007e9c:	08007f3d 	.word	0x08007f3d
 8007ea0:	08007f3d 	.word	0x08007f3d
 8007ea4:	08007f3d 	.word	0x08007f3d
 8007ea8:	08007f1d 	.word	0x08007f1d
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f25 	.word	0x08007f25
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f12:	e1c0      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f14:	2304      	movs	r3, #4
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e1bc      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e1b8      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f24:	2310      	movs	r3, #16
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e1b4      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e1b0      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f34:	2340      	movs	r3, #64	; 0x40
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e1ac      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f3c:	2380      	movs	r3, #128	; 0x80
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e1a8      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a75      	ldr	r2, [pc, #468]	; (8008120 <UART_SetConfig+0x638>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d130      	bne.n	8007fb0 <UART_SetConfig+0x4c8>
 8007f4e:	4b73      	ldr	r3, [pc, #460]	; (800811c <UART_SetConfig+0x634>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d826      	bhi.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x478>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f89 	.word	0x08007f89
 8007f6c:	08007f91 	.word	0x08007f91
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007fa1 	.word	0x08007fa1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7e:	e18a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e186      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e182      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e17e      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007f98:	2320      	movs	r3, #32
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e17a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007fa0:	2340      	movs	r3, #64	; 0x40
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e176      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007fa8:	2380      	movs	r3, #128	; 0x80
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e172      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a5b      	ldr	r2, [pc, #364]	; (8008124 <UART_SetConfig+0x63c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d130      	bne.n	800801c <UART_SetConfig+0x534>
 8007fba:	4b58      	ldr	r3, [pc, #352]	; (800811c <UART_SetConfig+0x634>)
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d826      	bhi.n	8008014 <UART_SetConfig+0x52c>
 8007fc6:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <UART_SetConfig+0x4e4>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fe5 	.word	0x08007fe5
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e154      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e150      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e14c      	b.n	8008296 <UART_SetConfig+0x7ae>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e148      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008004:	2320      	movs	r3, #32
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e144      	b.n	8008296 <UART_SetConfig+0x7ae>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e140      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e13c      	b.n	8008296 <UART_SetConfig+0x7ae>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a41      	ldr	r2, [pc, #260]	; (8008128 <UART_SetConfig+0x640>)
 8008022:	4293      	cmp	r3, r2
 8008024:	f040 8082 	bne.w	800812c <UART_SetConfig+0x644>
 8008028:	4b3c      	ldr	r3, [pc, #240]	; (800811c <UART_SetConfig+0x634>)
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008030:	2b28      	cmp	r3, #40	; 0x28
 8008032:	d86d      	bhi.n	8008110 <UART_SetConfig+0x628>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <UART_SetConfig+0x554>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	080080e1 	.word	0x080080e1
 8008040:	08008111 	.word	0x08008111
 8008044:	08008111 	.word	0x08008111
 8008048:	08008111 	.word	0x08008111
 800804c:	08008111 	.word	0x08008111
 8008050:	08008111 	.word	0x08008111
 8008054:	08008111 	.word	0x08008111
 8008058:	08008111 	.word	0x08008111
 800805c:	080080e9 	.word	0x080080e9
 8008060:	08008111 	.word	0x08008111
 8008064:	08008111 	.word	0x08008111
 8008068:	08008111 	.word	0x08008111
 800806c:	08008111 	.word	0x08008111
 8008070:	08008111 	.word	0x08008111
 8008074:	08008111 	.word	0x08008111
 8008078:	08008111 	.word	0x08008111
 800807c:	080080f1 	.word	0x080080f1
 8008080:	08008111 	.word	0x08008111
 8008084:	08008111 	.word	0x08008111
 8008088:	08008111 	.word	0x08008111
 800808c:	08008111 	.word	0x08008111
 8008090:	08008111 	.word	0x08008111
 8008094:	08008111 	.word	0x08008111
 8008098:	08008111 	.word	0x08008111
 800809c:	080080f9 	.word	0x080080f9
 80080a0:	08008111 	.word	0x08008111
 80080a4:	08008111 	.word	0x08008111
 80080a8:	08008111 	.word	0x08008111
 80080ac:	08008111 	.word	0x08008111
 80080b0:	08008111 	.word	0x08008111
 80080b4:	08008111 	.word	0x08008111
 80080b8:	08008111 	.word	0x08008111
 80080bc:	08008101 	.word	0x08008101
 80080c0:	08008111 	.word	0x08008111
 80080c4:	08008111 	.word	0x08008111
 80080c8:	08008111 	.word	0x08008111
 80080cc:	08008111 	.word	0x08008111
 80080d0:	08008111 	.word	0x08008111
 80080d4:	08008111 	.word	0x08008111
 80080d8:	08008111 	.word	0x08008111
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e0d6      	b.n	8008296 <UART_SetConfig+0x7ae>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e0d2      	b.n	8008296 <UART_SetConfig+0x7ae>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e0ce      	b.n	8008296 <UART_SetConfig+0x7ae>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e0ca      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e0c6      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e0c2      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e0be      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008118:	40011400 	.word	0x40011400
 800811c:	58024400 	.word	0x58024400
 8008120:	40007800 	.word	0x40007800
 8008124:	40007c00 	.word	0x40007c00
 8008128:	40011800 	.word	0x40011800
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4aad      	ldr	r2, [pc, #692]	; (80083e8 <UART_SetConfig+0x900>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d176      	bne.n	8008224 <UART_SetConfig+0x73c>
 8008136:	4bad      	ldr	r3, [pc, #692]	; (80083ec <UART_SetConfig+0x904>)
 8008138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800813e:	2b28      	cmp	r3, #40	; 0x28
 8008140:	d86c      	bhi.n	800821c <UART_SetConfig+0x734>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0x660>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	080081ed 	.word	0x080081ed
 800814c:	0800821d 	.word	0x0800821d
 8008150:	0800821d 	.word	0x0800821d
 8008154:	0800821d 	.word	0x0800821d
 8008158:	0800821d 	.word	0x0800821d
 800815c:	0800821d 	.word	0x0800821d
 8008160:	0800821d 	.word	0x0800821d
 8008164:	0800821d 	.word	0x0800821d
 8008168:	080081f5 	.word	0x080081f5
 800816c:	0800821d 	.word	0x0800821d
 8008170:	0800821d 	.word	0x0800821d
 8008174:	0800821d 	.word	0x0800821d
 8008178:	0800821d 	.word	0x0800821d
 800817c:	0800821d 	.word	0x0800821d
 8008180:	0800821d 	.word	0x0800821d
 8008184:	0800821d 	.word	0x0800821d
 8008188:	080081fd 	.word	0x080081fd
 800818c:	0800821d 	.word	0x0800821d
 8008190:	0800821d 	.word	0x0800821d
 8008194:	0800821d 	.word	0x0800821d
 8008198:	0800821d 	.word	0x0800821d
 800819c:	0800821d 	.word	0x0800821d
 80081a0:	0800821d 	.word	0x0800821d
 80081a4:	0800821d 	.word	0x0800821d
 80081a8:	08008205 	.word	0x08008205
 80081ac:	0800821d 	.word	0x0800821d
 80081b0:	0800821d 	.word	0x0800821d
 80081b4:	0800821d 	.word	0x0800821d
 80081b8:	0800821d 	.word	0x0800821d
 80081bc:	0800821d 	.word	0x0800821d
 80081c0:	0800821d 	.word	0x0800821d
 80081c4:	0800821d 	.word	0x0800821d
 80081c8:	0800820d 	.word	0x0800820d
 80081cc:	0800821d 	.word	0x0800821d
 80081d0:	0800821d 	.word	0x0800821d
 80081d4:	0800821d 	.word	0x0800821d
 80081d8:	0800821d 	.word	0x0800821d
 80081dc:	0800821d 	.word	0x0800821d
 80081e0:	0800821d 	.word	0x0800821d
 80081e4:	0800821d 	.word	0x0800821d
 80081e8:	08008215 	.word	0x08008215
 80081ec:	2301      	movs	r3, #1
 80081ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f2:	e050      	b.n	8008296 <UART_SetConfig+0x7ae>
 80081f4:	2304      	movs	r3, #4
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e04c      	b.n	8008296 <UART_SetConfig+0x7ae>
 80081fc:	2308      	movs	r3, #8
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e048      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008204:	2310      	movs	r3, #16
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e044      	b.n	8008296 <UART_SetConfig+0x7ae>
 800820c:	2320      	movs	r3, #32
 800820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008212:	e040      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821a:	e03c      	b.n	8008296 <UART_SetConfig+0x7ae>
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008222:	e038      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a71      	ldr	r2, [pc, #452]	; (80083f0 <UART_SetConfig+0x908>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d130      	bne.n	8008290 <UART_SetConfig+0x7a8>
 800822e:	4b6f      	ldr	r3, [pc, #444]	; (80083ec <UART_SetConfig+0x904>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	f003 0307 	and.w	r3, r3, #7
 8008236:	2b05      	cmp	r3, #5
 8008238:	d826      	bhi.n	8008288 <UART_SetConfig+0x7a0>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <UART_SetConfig+0x758>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	08008259 	.word	0x08008259
 8008244:	08008261 	.word	0x08008261
 8008248:	08008269 	.word	0x08008269
 800824c:	08008271 	.word	0x08008271
 8008250:	08008279 	.word	0x08008279
 8008254:	08008281 	.word	0x08008281
 8008258:	2302      	movs	r3, #2
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825e:	e01a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008260:	2304      	movs	r3, #4
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008266:	e016      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008268:	2308      	movs	r3, #8
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826e:	e012      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008270:	2310      	movs	r3, #16
 8008272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008276:	e00e      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008278:	2320      	movs	r3, #32
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827e:	e00a      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008280:	2340      	movs	r3, #64	; 0x40
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008286:	e006      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008288:	2380      	movs	r3, #128	; 0x80
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828e:	e002      	b.n	8008296 <UART_SetConfig+0x7ae>
 8008290:	2380      	movs	r3, #128	; 0x80
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a55      	ldr	r2, [pc, #340]	; (80083f0 <UART_SetConfig+0x908>)
 800829c:	4293      	cmp	r3, r2
 800829e:	f040 80f8 	bne.w	8008492 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80082a6:	2b20      	cmp	r3, #32
 80082a8:	dc46      	bgt.n	8008338 <UART_SetConfig+0x850>
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	db75      	blt.n	800839a <UART_SetConfig+0x8b2>
 80082ae:	3b02      	subs	r3, #2
 80082b0:	2b1e      	cmp	r3, #30
 80082b2:	d872      	bhi.n	800839a <UART_SetConfig+0x8b2>
 80082b4:	a201      	add	r2, pc, #4	; (adr r2, 80082bc <UART_SetConfig+0x7d4>)
 80082b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ba:	bf00      	nop
 80082bc:	0800833f 	.word	0x0800833f
 80082c0:	0800839b 	.word	0x0800839b
 80082c4:	08008347 	.word	0x08008347
 80082c8:	0800839b 	.word	0x0800839b
 80082cc:	0800839b 	.word	0x0800839b
 80082d0:	0800839b 	.word	0x0800839b
 80082d4:	08008357 	.word	0x08008357
 80082d8:	0800839b 	.word	0x0800839b
 80082dc:	0800839b 	.word	0x0800839b
 80082e0:	0800839b 	.word	0x0800839b
 80082e4:	0800839b 	.word	0x0800839b
 80082e8:	0800839b 	.word	0x0800839b
 80082ec:	0800839b 	.word	0x0800839b
 80082f0:	0800839b 	.word	0x0800839b
 80082f4:	08008367 	.word	0x08008367
 80082f8:	0800839b 	.word	0x0800839b
 80082fc:	0800839b 	.word	0x0800839b
 8008300:	0800839b 	.word	0x0800839b
 8008304:	0800839b 	.word	0x0800839b
 8008308:	0800839b 	.word	0x0800839b
 800830c:	0800839b 	.word	0x0800839b
 8008310:	0800839b 	.word	0x0800839b
 8008314:	0800839b 	.word	0x0800839b
 8008318:	0800839b 	.word	0x0800839b
 800831c:	0800839b 	.word	0x0800839b
 8008320:	0800839b 	.word	0x0800839b
 8008324:	0800839b 	.word	0x0800839b
 8008328:	0800839b 	.word	0x0800839b
 800832c:	0800839b 	.word	0x0800839b
 8008330:	0800839b 	.word	0x0800839b
 8008334:	0800838d 	.word	0x0800838d
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d02a      	beq.n	8008392 <UART_SetConfig+0x8aa>
 800833c:	e02d      	b.n	800839a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800833e:	f7fe fecb 	bl	80070d8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008344:	e02f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe feda 	bl	8007104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008354:	e027      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008356:	f107 0318 	add.w	r3, r7, #24
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff f826 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008364:	e01f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <UART_SetConfig+0x904>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <UART_SetConfig+0x904>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <UART_SetConfig+0x90c>)
 800837e:	fa22 f303 	lsr.w	r3, r2, r3
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008384:	e00f      	b.n	80083a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008386:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <UART_SetConfig+0x90c>)
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838a:	e00c      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800838c:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <UART_SetConfig+0x910>)
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008390:	e009      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008398:	e005      	b.n	80083a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 81ee 	beq.w	800878a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <UART_SetConfig+0x914>)
 80083b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	4613      	mov	r3, r2
 80083c8:	005b      	lsls	r3, r3, #1
 80083ca:	4413      	add	r3, r2
 80083cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d305      	bcc.n	80083de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	429a      	cmp	r2, r3
 80083dc:	d910      	bls.n	8008400 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80083e4:	e1d1      	b.n	800878a <UART_SetConfig+0xca2>
 80083e6:	bf00      	nop
 80083e8:	40011c00 	.word	0x40011c00
 80083ec:	58024400 	.word	0x58024400
 80083f0:	58000c00 	.word	0x58000c00
 80083f4:	03d09000 	.word	0x03d09000
 80083f8:	003d0900 	.word	0x003d0900
 80083fc:	08009e3c 	.word	0x08009e3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008402:	2200      	movs	r2, #0
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	60fa      	str	r2, [r7, #12]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	4ac0      	ldr	r2, [pc, #768]	; (8008710 <UART_SetConfig+0xc28>)
 800840e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008412:	b29b      	uxth	r3, r3
 8008414:	2200      	movs	r2, #0
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	607a      	str	r2, [r7, #4]
 800841a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800841e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008422:	f7f8 f979 	bl	8000718 <__aeabi_uldivmod>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	f04f 0200 	mov.w	r2, #0
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	020b      	lsls	r3, r1, #8
 8008438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800843c:	0202      	lsls	r2, r0, #8
 800843e:	6979      	ldr	r1, [r7, #20]
 8008440:	6849      	ldr	r1, [r1, #4]
 8008442:	0849      	lsrs	r1, r1, #1
 8008444:	2000      	movs	r0, #0
 8008446:	460c      	mov	r4, r1
 8008448:	4605      	mov	r5, r0
 800844a:	eb12 0804 	adds.w	r8, r2, r4
 800844e:	eb43 0905 	adc.w	r9, r3, r5
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	469a      	mov	sl, r3
 800845a:	4693      	mov	fp, r2
 800845c:	4652      	mov	r2, sl
 800845e:	465b      	mov	r3, fp
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	f7f8 f958 	bl	8000718 <__aeabi_uldivmod>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4613      	mov	r3, r2
 800846e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008476:	d308      	bcc.n	800848a <UART_SetConfig+0x9a2>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800847e:	d204      	bcs.n	800848a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008486:	60da      	str	r2, [r3, #12]
 8008488:	e17f      	b.n	800878a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008490:	e17b      	b.n	800878a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849a:	f040 80bd 	bne.w	8008618 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800849e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	dc48      	bgt.n	8008538 <UART_SetConfig+0xa50>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	db7b      	blt.n	80085a2 <UART_SetConfig+0xaba>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	d879      	bhi.n	80085a2 <UART_SetConfig+0xaba>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <UART_SetConfig+0x9cc>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	0800853f 	.word	0x0800853f
 80084b8:	08008547 	.word	0x08008547
 80084bc:	080085a3 	.word	0x080085a3
 80084c0:	080085a3 	.word	0x080085a3
 80084c4:	0800854f 	.word	0x0800854f
 80084c8:	080085a3 	.word	0x080085a3
 80084cc:	080085a3 	.word	0x080085a3
 80084d0:	080085a3 	.word	0x080085a3
 80084d4:	0800855f 	.word	0x0800855f
 80084d8:	080085a3 	.word	0x080085a3
 80084dc:	080085a3 	.word	0x080085a3
 80084e0:	080085a3 	.word	0x080085a3
 80084e4:	080085a3 	.word	0x080085a3
 80084e8:	080085a3 	.word	0x080085a3
 80084ec:	080085a3 	.word	0x080085a3
 80084f0:	080085a3 	.word	0x080085a3
 80084f4:	0800856f 	.word	0x0800856f
 80084f8:	080085a3 	.word	0x080085a3
 80084fc:	080085a3 	.word	0x080085a3
 8008500:	080085a3 	.word	0x080085a3
 8008504:	080085a3 	.word	0x080085a3
 8008508:	080085a3 	.word	0x080085a3
 800850c:	080085a3 	.word	0x080085a3
 8008510:	080085a3 	.word	0x080085a3
 8008514:	080085a3 	.word	0x080085a3
 8008518:	080085a3 	.word	0x080085a3
 800851c:	080085a3 	.word	0x080085a3
 8008520:	080085a3 	.word	0x080085a3
 8008524:	080085a3 	.word	0x080085a3
 8008528:	080085a3 	.word	0x080085a3
 800852c:	080085a3 	.word	0x080085a3
 8008530:	080085a3 	.word	0x080085a3
 8008534:	08008595 	.word	0x08008595
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d02e      	beq.n	800859a <UART_SetConfig+0xab2>
 800853c:	e031      	b.n	80085a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800853e:	f7fd fe93 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8008542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008544:	e033      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008546:	f7fd fea5 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 800854a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800854c:	e02f      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008552:	4618      	mov	r0, r3
 8008554:	f7fe fdd6 	bl	8007104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855c:	e027      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800855e:	f107 0318 	add.w	r3, r7, #24
 8008562:	4618      	mov	r0, r3
 8008564:	f7fe ff22 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856c:	e01f      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800856e:	4b69      	ldr	r3, [pc, #420]	; (8008714 <UART_SetConfig+0xc2c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d009      	beq.n	800858e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800857a:	4b66      	ldr	r3, [pc, #408]	; (8008714 <UART_SetConfig+0xc2c>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	4a64      	ldr	r2, [pc, #400]	; (8008718 <UART_SetConfig+0xc30>)
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800858c:	e00f      	b.n	80085ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800858e:	4b62      	ldr	r3, [pc, #392]	; (8008718 <UART_SetConfig+0xc30>)
 8008590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008592:	e00c      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008594:	4b61      	ldr	r3, [pc, #388]	; (800871c <UART_SetConfig+0xc34>)
 8008596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008598:	e009      	b.n	80085ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800859a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085a0:	e005      	b.n	80085ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80085ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 80ea 	beq.w	800878a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	4a55      	ldr	r2, [pc, #340]	; (8008710 <UART_SetConfig+0xc28>)
 80085bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c0:	461a      	mov	r2, r3
 80085c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085c8:	005a      	lsls	r2, r3, #1
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	441a      	add	r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	2b0f      	cmp	r3, #15
 80085e0:	d916      	bls.n	8008610 <UART_SetConfig+0xb28>
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e8:	d212      	bcs.n	8008610 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f023 030f 	bic.w	r3, r3, #15
 80085f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f6:	085b      	lsrs	r3, r3, #1
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	b29a      	uxth	r2, r3
 8008600:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008602:	4313      	orrs	r3, r2
 8008604:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800860c:	60da      	str	r2, [r3, #12]
 800860e:	e0bc      	b.n	800878a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008616:	e0b8      	b.n	800878a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008618:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800861c:	2b20      	cmp	r3, #32
 800861e:	dc4b      	bgt.n	80086b8 <UART_SetConfig+0xbd0>
 8008620:	2b00      	cmp	r3, #0
 8008622:	f2c0 8087 	blt.w	8008734 <UART_SetConfig+0xc4c>
 8008626:	2b20      	cmp	r3, #32
 8008628:	f200 8084 	bhi.w	8008734 <UART_SetConfig+0xc4c>
 800862c:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <UART_SetConfig+0xb4c>)
 800862e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008632:	bf00      	nop
 8008634:	080086bf 	.word	0x080086bf
 8008638:	080086c7 	.word	0x080086c7
 800863c:	08008735 	.word	0x08008735
 8008640:	08008735 	.word	0x08008735
 8008644:	080086cf 	.word	0x080086cf
 8008648:	08008735 	.word	0x08008735
 800864c:	08008735 	.word	0x08008735
 8008650:	08008735 	.word	0x08008735
 8008654:	080086df 	.word	0x080086df
 8008658:	08008735 	.word	0x08008735
 800865c:	08008735 	.word	0x08008735
 8008660:	08008735 	.word	0x08008735
 8008664:	08008735 	.word	0x08008735
 8008668:	08008735 	.word	0x08008735
 800866c:	08008735 	.word	0x08008735
 8008670:	08008735 	.word	0x08008735
 8008674:	080086ef 	.word	0x080086ef
 8008678:	08008735 	.word	0x08008735
 800867c:	08008735 	.word	0x08008735
 8008680:	08008735 	.word	0x08008735
 8008684:	08008735 	.word	0x08008735
 8008688:	08008735 	.word	0x08008735
 800868c:	08008735 	.word	0x08008735
 8008690:	08008735 	.word	0x08008735
 8008694:	08008735 	.word	0x08008735
 8008698:	08008735 	.word	0x08008735
 800869c:	08008735 	.word	0x08008735
 80086a0:	08008735 	.word	0x08008735
 80086a4:	08008735 	.word	0x08008735
 80086a8:	08008735 	.word	0x08008735
 80086ac:	08008735 	.word	0x08008735
 80086b0:	08008735 	.word	0x08008735
 80086b4:	08008727 	.word	0x08008727
 80086b8:	2b40      	cmp	r3, #64	; 0x40
 80086ba:	d037      	beq.n	800872c <UART_SetConfig+0xc44>
 80086bc:	e03a      	b.n	8008734 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086be:	f7fd fdd3 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 80086c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086c4:	e03c      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086c6:	f7fd fde5 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 80086ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086cc:	e038      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7fe fd16 	bl	8007104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086dc:	e030      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fe62 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ec:	e028      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086ee:	4b09      	ldr	r3, [pc, #36]	; (8008714 <UART_SetConfig+0xc2c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d012      	beq.n	8008720 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <UART_SetConfig+0xc2c>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	08db      	lsrs	r3, r3, #3
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	4a04      	ldr	r2, [pc, #16]	; (8008718 <UART_SetConfig+0xc30>)
 8008706:	fa22 f303 	lsr.w	r3, r2, r3
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800870c:	e018      	b.n	8008740 <UART_SetConfig+0xc58>
 800870e:	bf00      	nop
 8008710:	08009e3c 	.word	0x08009e3c
 8008714:	58024400 	.word	0x58024400
 8008718:	03d09000 	.word	0x03d09000
 800871c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008720:	4b24      	ldr	r3, [pc, #144]	; (80087b4 <UART_SetConfig+0xccc>)
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008724:	e00c      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008726:	4b24      	ldr	r3, [pc, #144]	; (80087b8 <UART_SetConfig+0xcd0>)
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800872a:	e009      	b.n	8008740 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800872c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008732:	e005      	b.n	8008740 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800873e:	bf00      	nop
    }

    if (pclk != 0U)
 8008740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008742:	2b00      	cmp	r3, #0
 8008744:	d021      	beq.n	800878a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	4a1c      	ldr	r2, [pc, #112]	; (80087bc <UART_SetConfig+0xcd4>)
 800874c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008750:	461a      	mov	r2, r3
 8008752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008754:	fbb3 f2f2 	udiv	r2, r3, r2
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	441a      	add	r2, r3
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	fbb2 f3f3 	udiv	r3, r2, r3
 8008768:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800876a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d909      	bls.n	8008784 <UART_SetConfig+0xc9c>
 8008770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008776:	d205      	bcs.n	8008784 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	b29a      	uxth	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60da      	str	r2, [r3, #12]
 8008782:	e002      	b.n	800878a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2201      	movs	r2, #1
 800878e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	2201      	movs	r2, #1
 8008796:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3748      	adds	r7, #72	; 0x48
 80087ae:	46bd      	mov	sp, r7
 80087b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087b4:	03d09000 	.word	0x03d09000
 80087b8:	003d0900 	.word	0x003d0900
 80087bc:	08009e3c 	.word	0x08009e3c

080087c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f003 0304 	and.w	r3, r3, #4
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01a      	beq.n	80088d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088be:	d10a      	bne.n	80088d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	605a      	str	r2, [r3, #4]
  }
}
 80088f8:	bf00      	nop
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af02      	add	r7, sp, #8
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008914:	f7f9 fdc0 	bl	8002498 <HAL_GetTick>
 8008918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0308 	and.w	r3, r3, #8
 8008924:	2b08      	cmp	r3, #8
 8008926:	d10e      	bne.n	8008946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f82f 	bl	800899a <UART_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e025      	b.n	8008992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d10e      	bne.n	8008972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 f819 	bl	800899a <UART_WaitOnFlagUntilTimeout>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e00f      	b.n	8008992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b09c      	sub	sp, #112	; 0x70
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	603b      	str	r3, [r7, #0]
 80089a6:	4613      	mov	r3, r2
 80089a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089aa:	e0a9      	b.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b2:	f000 80a5 	beq.w	8008b00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b6:	f7f9 fd6f 	bl	8002498 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d302      	bcc.n	80089cc <UART_WaitOnFlagUntilTimeout+0x32>
 80089c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d140      	bne.n	8008a4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089e0:	667b      	str	r3, [r7, #100]	; 0x64
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e6      	bne.n	80089cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	f023 0301 	bic.w	r3, r3, #1
 8008a14:	663b      	str	r3, [r7, #96]	; 0x60
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e5      	bne.n	80089fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e069      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d051      	beq.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6a:	d149      	bne.n	8008b00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a94:	637b      	str	r3, [r7, #52]	; 0x34
 8008a96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3308      	adds	r3, #8
 8008aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	e853 3f00 	ldrex	r3, [r3]
 8008ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	f023 0301 	bic.w	r3, r3, #1
 8008abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	3308      	adds	r3, #8
 8008ac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ac8:	623a      	str	r2, [r7, #32]
 8008aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	69f9      	ldr	r1, [r7, #28]
 8008ace:	6a3a      	ldr	r2, [r7, #32]
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e5      	bne.n	8008aa8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e010      	b.n	8008b22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	69da      	ldr	r2, [r3, #28]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	461a      	mov	r2, r3
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	f43f af46 	beq.w	80089ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3770      	adds	r7, #112	; 0x70
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b085      	sub	sp, #20
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e027      	b.n	8008b90 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2224      	movs	r2, #36	; 0x24
 8008b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e02d      	b.n	8008c10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2224      	movs	r2, #36	; 0x24
 8008bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f022 0201 	bic.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f84f 	bl	8008c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e02d      	b.n	8008c8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2224      	movs	r2, #36	; 0x24
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	683a      	ldr	r2, [r7, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f811 	bl	8008c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2220      	movs	r2, #32
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d108      	bne.n	8008cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cb4:	e031      	b.n	8008d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cb6:	2310      	movs	r3, #16
 8008cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cba:	2310      	movs	r3, #16
 8008cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	0e5b      	lsrs	r3, r3, #25
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	0f5b      	lsrs	r3, r3, #29
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0307 	and.w	r3, r3, #7
 8008cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	7b3a      	ldrb	r2, [r7, #12]
 8008ce2:	4911      	ldr	r1, [pc, #68]	; (8008d28 <UARTEx_SetNbDataToProcess+0x94>)
 8008ce4:	5c8a      	ldrb	r2, [r1, r2]
 8008ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cea:	7b3a      	ldrb	r2, [r7, #12]
 8008cec:	490f      	ldr	r1, [pc, #60]	; (8008d2c <UARTEx_SetNbDataToProcess+0x98>)
 8008cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cf4:	b29a      	uxth	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	7b7a      	ldrb	r2, [r7, #13]
 8008d00:	4909      	ldr	r1, [pc, #36]	; (8008d28 <UARTEx_SetNbDataToProcess+0x94>)
 8008d02:	5c8a      	ldrb	r2, [r1, r2]
 8008d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d08:	7b7a      	ldrb	r2, [r7, #13]
 8008d0a:	4908      	ldr	r1, [pc, #32]	; (8008d2c <UARTEx_SetNbDataToProcess+0x98>)
 8008d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	08009e54 	.word	0x08009e54
 8008d2c:	08009e5c 	.word	0x08009e5c

08008d30 <__errno>:
 8008d30:	4b01      	ldr	r3, [pc, #4]	; (8008d38 <__errno+0x8>)
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	24000020 	.word	0x24000020

08008d3c <__libc_init_array>:
 8008d3c:	b570      	push	{r4, r5, r6, lr}
 8008d3e:	4d0d      	ldr	r5, [pc, #52]	; (8008d74 <__libc_init_array+0x38>)
 8008d40:	4c0d      	ldr	r4, [pc, #52]	; (8008d78 <__libc_init_array+0x3c>)
 8008d42:	1b64      	subs	r4, r4, r5
 8008d44:	10a4      	asrs	r4, r4, #2
 8008d46:	2600      	movs	r6, #0
 8008d48:	42a6      	cmp	r6, r4
 8008d4a:	d109      	bne.n	8008d60 <__libc_init_array+0x24>
 8008d4c:	4d0b      	ldr	r5, [pc, #44]	; (8008d7c <__libc_init_array+0x40>)
 8008d4e:	4c0c      	ldr	r4, [pc, #48]	; (8008d80 <__libc_init_array+0x44>)
 8008d50:	f000 fc8e 	bl	8009670 <_init>
 8008d54:	1b64      	subs	r4, r4, r5
 8008d56:	10a4      	asrs	r4, r4, #2
 8008d58:	2600      	movs	r6, #0
 8008d5a:	42a6      	cmp	r6, r4
 8008d5c:	d105      	bne.n	8008d6a <__libc_init_array+0x2e>
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d64:	4798      	blx	r3
 8008d66:	3601      	adds	r6, #1
 8008d68:	e7ee      	b.n	8008d48 <__libc_init_array+0xc>
 8008d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6e:	4798      	blx	r3
 8008d70:	3601      	adds	r6, #1
 8008d72:	e7f2      	b.n	8008d5a <__libc_init_array+0x1e>
 8008d74:	08009ea0 	.word	0x08009ea0
 8008d78:	08009ea0 	.word	0x08009ea0
 8008d7c:	08009ea0 	.word	0x08009ea0
 8008d80:	08009ea4 	.word	0x08009ea4

08008d84 <memcpy>:
 8008d84:	440a      	add	r2, r1
 8008d86:	4291      	cmp	r1, r2
 8008d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d8c:	d100      	bne.n	8008d90 <memcpy+0xc>
 8008d8e:	4770      	bx	lr
 8008d90:	b510      	push	{r4, lr}
 8008d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9a:	4291      	cmp	r1, r2
 8008d9c:	d1f9      	bne.n	8008d92 <memcpy+0xe>
 8008d9e:	bd10      	pop	{r4, pc}

08008da0 <memmove>:
 8008da0:	4288      	cmp	r0, r1
 8008da2:	b510      	push	{r4, lr}
 8008da4:	eb01 0402 	add.w	r4, r1, r2
 8008da8:	d902      	bls.n	8008db0 <memmove+0x10>
 8008daa:	4284      	cmp	r4, r0
 8008dac:	4623      	mov	r3, r4
 8008dae:	d807      	bhi.n	8008dc0 <memmove+0x20>
 8008db0:	1e43      	subs	r3, r0, #1
 8008db2:	42a1      	cmp	r1, r4
 8008db4:	d008      	beq.n	8008dc8 <memmove+0x28>
 8008db6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008dbe:	e7f8      	b.n	8008db2 <memmove+0x12>
 8008dc0:	4402      	add	r2, r0
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	428a      	cmp	r2, r1
 8008dc6:	d100      	bne.n	8008dca <memmove+0x2a>
 8008dc8:	bd10      	pop	{r4, pc}
 8008dca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008dd2:	e7f7      	b.n	8008dc4 <memmove+0x24>

08008dd4 <memset>:
 8008dd4:	4402      	add	r2, r0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d100      	bne.n	8008dde <memset+0xa>
 8008ddc:	4770      	bx	lr
 8008dde:	f803 1b01 	strb.w	r1, [r3], #1
 8008de2:	e7f9      	b.n	8008dd8 <memset+0x4>

08008de4 <siprintf>:
 8008de4:	b40e      	push	{r1, r2, r3}
 8008de6:	b500      	push	{lr}
 8008de8:	b09c      	sub	sp, #112	; 0x70
 8008dea:	ab1d      	add	r3, sp, #116	; 0x74
 8008dec:	9002      	str	r0, [sp, #8]
 8008dee:	9006      	str	r0, [sp, #24]
 8008df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008df4:	4809      	ldr	r0, [pc, #36]	; (8008e1c <siprintf+0x38>)
 8008df6:	9107      	str	r1, [sp, #28]
 8008df8:	9104      	str	r1, [sp, #16]
 8008dfa:	4909      	ldr	r1, [pc, #36]	; (8008e20 <siprintf+0x3c>)
 8008dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e00:	9105      	str	r1, [sp, #20]
 8008e02:	6800      	ldr	r0, [r0, #0]
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	a902      	add	r1, sp, #8
 8008e08:	f000 f868 	bl	8008edc <_svfiprintf_r>
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
 8008e12:	b01c      	add	sp, #112	; 0x70
 8008e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e18:	b003      	add	sp, #12
 8008e1a:	4770      	bx	lr
 8008e1c:	24000020 	.word	0x24000020
 8008e20:	ffff0208 	.word	0xffff0208

08008e24 <__ssputs_r>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	688e      	ldr	r6, [r1, #8]
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	4690      	mov	r8, r2
 8008e32:	461f      	mov	r7, r3
 8008e34:	d838      	bhi.n	8008ea8 <__ssputs_r+0x84>
 8008e36:	898a      	ldrh	r2, [r1, #12]
 8008e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e3c:	d032      	beq.n	8008ea4 <__ssputs_r+0x80>
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	6909      	ldr	r1, [r1, #16]
 8008e42:	eba5 0901 	sub.w	r9, r5, r1
 8008e46:	6965      	ldr	r5, [r4, #20]
 8008e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e50:	3301      	adds	r3, #1
 8008e52:	444b      	add	r3, r9
 8008e54:	106d      	asrs	r5, r5, #1
 8008e56:	429d      	cmp	r5, r3
 8008e58:	bf38      	it	cc
 8008e5a:	461d      	movcc	r5, r3
 8008e5c:	0553      	lsls	r3, r2, #21
 8008e5e:	d531      	bpl.n	8008ec4 <__ssputs_r+0xa0>
 8008e60:	4629      	mov	r1, r5
 8008e62:	f000 fb3b 	bl	80094dc <_malloc_r>
 8008e66:	4606      	mov	r6, r0
 8008e68:	b950      	cbnz	r0, 8008e80 <__ssputs_r+0x5c>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	f8ca 3000 	str.w	r3, [sl]
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	6921      	ldr	r1, [r4, #16]
 8008e82:	464a      	mov	r2, r9
 8008e84:	f7ff ff7e 	bl	8008d84 <memcpy>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	6126      	str	r6, [r4, #16]
 8008e96:	6165      	str	r5, [r4, #20]
 8008e98:	444e      	add	r6, r9
 8008e9a:	eba5 0509 	sub.w	r5, r5, r9
 8008e9e:	6026      	str	r6, [r4, #0]
 8008ea0:	60a5      	str	r5, [r4, #8]
 8008ea2:	463e      	mov	r6, r7
 8008ea4:	42be      	cmp	r6, r7
 8008ea6:	d900      	bls.n	8008eaa <__ssputs_r+0x86>
 8008ea8:	463e      	mov	r6, r7
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	4632      	mov	r2, r6
 8008eae:	4641      	mov	r1, r8
 8008eb0:	f7ff ff76 	bl	8008da0 <memmove>
 8008eb4:	68a3      	ldr	r3, [r4, #8]
 8008eb6:	1b9b      	subs	r3, r3, r6
 8008eb8:	60a3      	str	r3, [r4, #8]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	4433      	add	r3, r6
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7db      	b.n	8008e7c <__ssputs_r+0x58>
 8008ec4:	462a      	mov	r2, r5
 8008ec6:	f000 fb7d 	bl	80095c4 <_realloc_r>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d1e1      	bne.n	8008e94 <__ssputs_r+0x70>
 8008ed0:	6921      	ldr	r1, [r4, #16]
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	f000 fa96 	bl	8009404 <_free_r>
 8008ed8:	e7c7      	b.n	8008e6a <__ssputs_r+0x46>
	...

08008edc <_svfiprintf_r>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	4698      	mov	r8, r3
 8008ee2:	898b      	ldrh	r3, [r1, #12]
 8008ee4:	061b      	lsls	r3, r3, #24
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	4607      	mov	r7, r0
 8008eea:	460d      	mov	r5, r1
 8008eec:	4614      	mov	r4, r2
 8008eee:	d50e      	bpl.n	8008f0e <_svfiprintf_r+0x32>
 8008ef0:	690b      	ldr	r3, [r1, #16]
 8008ef2:	b963      	cbnz	r3, 8008f0e <_svfiprintf_r+0x32>
 8008ef4:	2140      	movs	r1, #64	; 0x40
 8008ef6:	f000 faf1 	bl	80094dc <_malloc_r>
 8008efa:	6028      	str	r0, [r5, #0]
 8008efc:	6128      	str	r0, [r5, #16]
 8008efe:	b920      	cbnz	r0, 8008f0a <_svfiprintf_r+0x2e>
 8008f00:	230c      	movs	r3, #12
 8008f02:	603b      	str	r3, [r7, #0]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	e0d1      	b.n	80090ae <_svfiprintf_r+0x1d2>
 8008f0a:	2340      	movs	r3, #64	; 0x40
 8008f0c:	616b      	str	r3, [r5, #20]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	9309      	str	r3, [sp, #36]	; 0x24
 8008f12:	2320      	movs	r3, #32
 8008f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1c:	2330      	movs	r3, #48	; 0x30
 8008f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090c8 <_svfiprintf_r+0x1ec>
 8008f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f26:	f04f 0901 	mov.w	r9, #1
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	469a      	mov	sl, r3
 8008f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f32:	b10a      	cbz	r2, 8008f38 <_svfiprintf_r+0x5c>
 8008f34:	2a25      	cmp	r2, #37	; 0x25
 8008f36:	d1f9      	bne.n	8008f2c <_svfiprintf_r+0x50>
 8008f38:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3c:	d00b      	beq.n	8008f56 <_svfiprintf_r+0x7a>
 8008f3e:	465b      	mov	r3, fp
 8008f40:	4622      	mov	r2, r4
 8008f42:	4629      	mov	r1, r5
 8008f44:	4638      	mov	r0, r7
 8008f46:	f7ff ff6d 	bl	8008e24 <__ssputs_r>
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	f000 80aa 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f52:	445a      	add	r2, fp
 8008f54:	9209      	str	r2, [sp, #36]	; 0x24
 8008f56:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 80a2 	beq.w	80090a4 <_svfiprintf_r+0x1c8>
 8008f60:	2300      	movs	r3, #0
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295
 8008f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f6a:	f10a 0a01 	add.w	sl, sl, #1
 8008f6e:	9304      	str	r3, [sp, #16]
 8008f70:	9307      	str	r3, [sp, #28]
 8008f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f76:	931a      	str	r3, [sp, #104]	; 0x68
 8008f78:	4654      	mov	r4, sl
 8008f7a:	2205      	movs	r2, #5
 8008f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f80:	4851      	ldr	r0, [pc, #324]	; (80090c8 <_svfiprintf_r+0x1ec>)
 8008f82:	f7f7 f9bd 	bl	8000300 <memchr>
 8008f86:	9a04      	ldr	r2, [sp, #16]
 8008f88:	b9d8      	cbnz	r0, 8008fc2 <_svfiprintf_r+0xe6>
 8008f8a:	06d0      	lsls	r0, r2, #27
 8008f8c:	bf44      	itt	mi
 8008f8e:	2320      	movmi	r3, #32
 8008f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f94:	0711      	lsls	r1, r2, #28
 8008f96:	bf44      	itt	mi
 8008f98:	232b      	movmi	r3, #43	; 0x2b
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa4:	d015      	beq.n	8008fd2 <_svfiprintf_r+0xf6>
 8008fa6:	9a07      	ldr	r2, [sp, #28]
 8008fa8:	4654      	mov	r4, sl
 8008faa:	2000      	movs	r0, #0
 8008fac:	f04f 0c0a 	mov.w	ip, #10
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb6:	3b30      	subs	r3, #48	; 0x30
 8008fb8:	2b09      	cmp	r3, #9
 8008fba:	d94e      	bls.n	800905a <_svfiprintf_r+0x17e>
 8008fbc:	b1b0      	cbz	r0, 8008fec <_svfiprintf_r+0x110>
 8008fbe:	9207      	str	r2, [sp, #28]
 8008fc0:	e014      	b.n	8008fec <_svfiprintf_r+0x110>
 8008fc2:	eba0 0308 	sub.w	r3, r0, r8
 8008fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	46a2      	mov	sl, r4
 8008fd0:	e7d2      	b.n	8008f78 <_svfiprintf_r+0x9c>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	1d19      	adds	r1, r3, #4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	9103      	str	r1, [sp, #12]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	bfbb      	ittet	lt
 8008fde:	425b      	neglt	r3, r3
 8008fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe4:	9307      	strge	r3, [sp, #28]
 8008fe6:	9307      	strlt	r3, [sp, #28]
 8008fe8:	bfb8      	it	lt
 8008fea:	9204      	strlt	r2, [sp, #16]
 8008fec:	7823      	ldrb	r3, [r4, #0]
 8008fee:	2b2e      	cmp	r3, #46	; 0x2e
 8008ff0:	d10c      	bne.n	800900c <_svfiprintf_r+0x130>
 8008ff2:	7863      	ldrb	r3, [r4, #1]
 8008ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff6:	d135      	bne.n	8009064 <_svfiprintf_r+0x188>
 8008ff8:	9b03      	ldr	r3, [sp, #12]
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	9203      	str	r2, [sp, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	bfb8      	it	lt
 8009004:	f04f 33ff 	movlt.w	r3, #4294967295
 8009008:	3402      	adds	r4, #2
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090d8 <_svfiprintf_r+0x1fc>
 8009010:	7821      	ldrb	r1, [r4, #0]
 8009012:	2203      	movs	r2, #3
 8009014:	4650      	mov	r0, sl
 8009016:	f7f7 f973 	bl	8000300 <memchr>
 800901a:	b140      	cbz	r0, 800902e <_svfiprintf_r+0x152>
 800901c:	2340      	movs	r3, #64	; 0x40
 800901e:	eba0 000a 	sub.w	r0, r0, sl
 8009022:	fa03 f000 	lsl.w	r0, r3, r0
 8009026:	9b04      	ldr	r3, [sp, #16]
 8009028:	4303      	orrs	r3, r0
 800902a:	3401      	adds	r4, #1
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009032:	4826      	ldr	r0, [pc, #152]	; (80090cc <_svfiprintf_r+0x1f0>)
 8009034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009038:	2206      	movs	r2, #6
 800903a:	f7f7 f961 	bl	8000300 <memchr>
 800903e:	2800      	cmp	r0, #0
 8009040:	d038      	beq.n	80090b4 <_svfiprintf_r+0x1d8>
 8009042:	4b23      	ldr	r3, [pc, #140]	; (80090d0 <_svfiprintf_r+0x1f4>)
 8009044:	bb1b      	cbnz	r3, 800908e <_svfiprintf_r+0x1b2>
 8009046:	9b03      	ldr	r3, [sp, #12]
 8009048:	3307      	adds	r3, #7
 800904a:	f023 0307 	bic.w	r3, r3, #7
 800904e:	3308      	adds	r3, #8
 8009050:	9303      	str	r3, [sp, #12]
 8009052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009054:	4433      	add	r3, r6
 8009056:	9309      	str	r3, [sp, #36]	; 0x24
 8009058:	e767      	b.n	8008f2a <_svfiprintf_r+0x4e>
 800905a:	fb0c 3202 	mla	r2, ip, r2, r3
 800905e:	460c      	mov	r4, r1
 8009060:	2001      	movs	r0, #1
 8009062:	e7a5      	b.n	8008fb0 <_svfiprintf_r+0xd4>
 8009064:	2300      	movs	r3, #0
 8009066:	3401      	adds	r4, #1
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	4619      	mov	r1, r3
 800906c:	f04f 0c0a 	mov.w	ip, #10
 8009070:	4620      	mov	r0, r4
 8009072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009076:	3a30      	subs	r2, #48	; 0x30
 8009078:	2a09      	cmp	r2, #9
 800907a:	d903      	bls.n	8009084 <_svfiprintf_r+0x1a8>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d0c5      	beq.n	800900c <_svfiprintf_r+0x130>
 8009080:	9105      	str	r1, [sp, #20]
 8009082:	e7c3      	b.n	800900c <_svfiprintf_r+0x130>
 8009084:	fb0c 2101 	mla	r1, ip, r1, r2
 8009088:	4604      	mov	r4, r0
 800908a:	2301      	movs	r3, #1
 800908c:	e7f0      	b.n	8009070 <_svfiprintf_r+0x194>
 800908e:	ab03      	add	r3, sp, #12
 8009090:	9300      	str	r3, [sp, #0]
 8009092:	462a      	mov	r2, r5
 8009094:	4b0f      	ldr	r3, [pc, #60]	; (80090d4 <_svfiprintf_r+0x1f8>)
 8009096:	a904      	add	r1, sp, #16
 8009098:	4638      	mov	r0, r7
 800909a:	f3af 8000 	nop.w
 800909e:	1c42      	adds	r2, r0, #1
 80090a0:	4606      	mov	r6, r0
 80090a2:	d1d6      	bne.n	8009052 <_svfiprintf_r+0x176>
 80090a4:	89ab      	ldrh	r3, [r5, #12]
 80090a6:	065b      	lsls	r3, r3, #25
 80090a8:	f53f af2c 	bmi.w	8008f04 <_svfiprintf_r+0x28>
 80090ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ae:	b01d      	add	sp, #116	; 0x74
 80090b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090b4:	ab03      	add	r3, sp, #12
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	462a      	mov	r2, r5
 80090ba:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <_svfiprintf_r+0x1f8>)
 80090bc:	a904      	add	r1, sp, #16
 80090be:	4638      	mov	r0, r7
 80090c0:	f000 f87a 	bl	80091b8 <_printf_i>
 80090c4:	e7eb      	b.n	800909e <_svfiprintf_r+0x1c2>
 80090c6:	bf00      	nop
 80090c8:	08009e64 	.word	0x08009e64
 80090cc:	08009e6e 	.word	0x08009e6e
 80090d0:	00000000 	.word	0x00000000
 80090d4:	08008e25 	.word	0x08008e25
 80090d8:	08009e6a 	.word	0x08009e6a

080090dc <_printf_common>:
 80090dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e0:	4616      	mov	r6, r2
 80090e2:	4699      	mov	r9, r3
 80090e4:	688a      	ldr	r2, [r1, #8]
 80090e6:	690b      	ldr	r3, [r1, #16]
 80090e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	bfb8      	it	lt
 80090f0:	4613      	movlt	r3, r2
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090f8:	4607      	mov	r7, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	b10a      	cbz	r2, 8009102 <_printf_common+0x26>
 80090fe:	3301      	adds	r3, #1
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	0699      	lsls	r1, r3, #26
 8009106:	bf42      	ittt	mi
 8009108:	6833      	ldrmi	r3, [r6, #0]
 800910a:	3302      	addmi	r3, #2
 800910c:	6033      	strmi	r3, [r6, #0]
 800910e:	6825      	ldr	r5, [r4, #0]
 8009110:	f015 0506 	ands.w	r5, r5, #6
 8009114:	d106      	bne.n	8009124 <_printf_common+0x48>
 8009116:	f104 0a19 	add.w	sl, r4, #25
 800911a:	68e3      	ldr	r3, [r4, #12]
 800911c:	6832      	ldr	r2, [r6, #0]
 800911e:	1a9b      	subs	r3, r3, r2
 8009120:	42ab      	cmp	r3, r5
 8009122:	dc26      	bgt.n	8009172 <_printf_common+0x96>
 8009124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009128:	1e13      	subs	r3, r2, #0
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	bf18      	it	ne
 800912e:	2301      	movne	r3, #1
 8009130:	0692      	lsls	r2, r2, #26
 8009132:	d42b      	bmi.n	800918c <_printf_common+0xb0>
 8009134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009138:	4649      	mov	r1, r9
 800913a:	4638      	mov	r0, r7
 800913c:	47c0      	blx	r8
 800913e:	3001      	adds	r0, #1
 8009140:	d01e      	beq.n	8009180 <_printf_common+0xa4>
 8009142:	6823      	ldr	r3, [r4, #0]
 8009144:	68e5      	ldr	r5, [r4, #12]
 8009146:	6832      	ldr	r2, [r6, #0]
 8009148:	f003 0306 	and.w	r3, r3, #6
 800914c:	2b04      	cmp	r3, #4
 800914e:	bf08      	it	eq
 8009150:	1aad      	subeq	r5, r5, r2
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	6922      	ldr	r2, [r4, #16]
 8009156:	bf0c      	ite	eq
 8009158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800915c:	2500      	movne	r5, #0
 800915e:	4293      	cmp	r3, r2
 8009160:	bfc4      	itt	gt
 8009162:	1a9b      	subgt	r3, r3, r2
 8009164:	18ed      	addgt	r5, r5, r3
 8009166:	2600      	movs	r6, #0
 8009168:	341a      	adds	r4, #26
 800916a:	42b5      	cmp	r5, r6
 800916c:	d11a      	bne.n	80091a4 <_printf_common+0xc8>
 800916e:	2000      	movs	r0, #0
 8009170:	e008      	b.n	8009184 <_printf_common+0xa8>
 8009172:	2301      	movs	r3, #1
 8009174:	4652      	mov	r2, sl
 8009176:	4649      	mov	r1, r9
 8009178:	4638      	mov	r0, r7
 800917a:	47c0      	blx	r8
 800917c:	3001      	adds	r0, #1
 800917e:	d103      	bne.n	8009188 <_printf_common+0xac>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009188:	3501      	adds	r5, #1
 800918a:	e7c6      	b.n	800911a <_printf_common+0x3e>
 800918c:	18e1      	adds	r1, r4, r3
 800918e:	1c5a      	adds	r2, r3, #1
 8009190:	2030      	movs	r0, #48	; 0x30
 8009192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009196:	4422      	add	r2, r4
 8009198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800919c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091a0:	3302      	adds	r3, #2
 80091a2:	e7c7      	b.n	8009134 <_printf_common+0x58>
 80091a4:	2301      	movs	r3, #1
 80091a6:	4622      	mov	r2, r4
 80091a8:	4649      	mov	r1, r9
 80091aa:	4638      	mov	r0, r7
 80091ac:	47c0      	blx	r8
 80091ae:	3001      	adds	r0, #1
 80091b0:	d0e6      	beq.n	8009180 <_printf_common+0xa4>
 80091b2:	3601      	adds	r6, #1
 80091b4:	e7d9      	b.n	800916a <_printf_common+0x8e>
	...

080091b8 <_printf_i>:
 80091b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	7e0f      	ldrb	r7, [r1, #24]
 80091be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091c0:	2f78      	cmp	r7, #120	; 0x78
 80091c2:	4691      	mov	r9, r2
 80091c4:	4680      	mov	r8, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	469a      	mov	sl, r3
 80091ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091ce:	d807      	bhi.n	80091e0 <_printf_i+0x28>
 80091d0:	2f62      	cmp	r7, #98	; 0x62
 80091d2:	d80a      	bhi.n	80091ea <_printf_i+0x32>
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	f000 80d8 	beq.w	800938a <_printf_i+0x1d2>
 80091da:	2f58      	cmp	r7, #88	; 0x58
 80091dc:	f000 80a3 	beq.w	8009326 <_printf_i+0x16e>
 80091e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091e8:	e03a      	b.n	8009260 <_printf_i+0xa8>
 80091ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ee:	2b15      	cmp	r3, #21
 80091f0:	d8f6      	bhi.n	80091e0 <_printf_i+0x28>
 80091f2:	a101      	add	r1, pc, #4	; (adr r1, 80091f8 <_printf_i+0x40>)
 80091f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091f8:	08009251 	.word	0x08009251
 80091fc:	08009265 	.word	0x08009265
 8009200:	080091e1 	.word	0x080091e1
 8009204:	080091e1 	.word	0x080091e1
 8009208:	080091e1 	.word	0x080091e1
 800920c:	080091e1 	.word	0x080091e1
 8009210:	08009265 	.word	0x08009265
 8009214:	080091e1 	.word	0x080091e1
 8009218:	080091e1 	.word	0x080091e1
 800921c:	080091e1 	.word	0x080091e1
 8009220:	080091e1 	.word	0x080091e1
 8009224:	08009371 	.word	0x08009371
 8009228:	08009295 	.word	0x08009295
 800922c:	08009353 	.word	0x08009353
 8009230:	080091e1 	.word	0x080091e1
 8009234:	080091e1 	.word	0x080091e1
 8009238:	08009393 	.word	0x08009393
 800923c:	080091e1 	.word	0x080091e1
 8009240:	08009295 	.word	0x08009295
 8009244:	080091e1 	.word	0x080091e1
 8009248:	080091e1 	.word	0x080091e1
 800924c:	0800935b 	.word	0x0800935b
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	602a      	str	r2, [r5, #0]
 8009258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800925c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009260:	2301      	movs	r3, #1
 8009262:	e0a3      	b.n	80093ac <_printf_i+0x1f4>
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	6829      	ldr	r1, [r5, #0]
 8009268:	0606      	lsls	r6, r0, #24
 800926a:	f101 0304 	add.w	r3, r1, #4
 800926e:	d50a      	bpl.n	8009286 <_printf_i+0xce>
 8009270:	680e      	ldr	r6, [r1, #0]
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	2e00      	cmp	r6, #0
 8009276:	da03      	bge.n	8009280 <_printf_i+0xc8>
 8009278:	232d      	movs	r3, #45	; 0x2d
 800927a:	4276      	negs	r6, r6
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	485e      	ldr	r0, [pc, #376]	; (80093fc <_printf_i+0x244>)
 8009282:	230a      	movs	r3, #10
 8009284:	e019      	b.n	80092ba <_printf_i+0x102>
 8009286:	680e      	ldr	r6, [r1, #0]
 8009288:	602b      	str	r3, [r5, #0]
 800928a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800928e:	bf18      	it	ne
 8009290:	b236      	sxthne	r6, r6
 8009292:	e7ef      	b.n	8009274 <_printf_i+0xbc>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	6820      	ldr	r0, [r4, #0]
 8009298:	1d19      	adds	r1, r3, #4
 800929a:	6029      	str	r1, [r5, #0]
 800929c:	0601      	lsls	r1, r0, #24
 800929e:	d501      	bpl.n	80092a4 <_printf_i+0xec>
 80092a0:	681e      	ldr	r6, [r3, #0]
 80092a2:	e002      	b.n	80092aa <_printf_i+0xf2>
 80092a4:	0646      	lsls	r6, r0, #25
 80092a6:	d5fb      	bpl.n	80092a0 <_printf_i+0xe8>
 80092a8:	881e      	ldrh	r6, [r3, #0]
 80092aa:	4854      	ldr	r0, [pc, #336]	; (80093fc <_printf_i+0x244>)
 80092ac:	2f6f      	cmp	r7, #111	; 0x6f
 80092ae:	bf0c      	ite	eq
 80092b0:	2308      	moveq	r3, #8
 80092b2:	230a      	movne	r3, #10
 80092b4:	2100      	movs	r1, #0
 80092b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092ba:	6865      	ldr	r5, [r4, #4]
 80092bc:	60a5      	str	r5, [r4, #8]
 80092be:	2d00      	cmp	r5, #0
 80092c0:	bfa2      	ittt	ge
 80092c2:	6821      	ldrge	r1, [r4, #0]
 80092c4:	f021 0104 	bicge.w	r1, r1, #4
 80092c8:	6021      	strge	r1, [r4, #0]
 80092ca:	b90e      	cbnz	r6, 80092d0 <_printf_i+0x118>
 80092cc:	2d00      	cmp	r5, #0
 80092ce:	d04d      	beq.n	800936c <_printf_i+0x1b4>
 80092d0:	4615      	mov	r5, r2
 80092d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092d6:	fb03 6711 	mls	r7, r3, r1, r6
 80092da:	5dc7      	ldrb	r7, [r0, r7]
 80092dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092e0:	4637      	mov	r7, r6
 80092e2:	42bb      	cmp	r3, r7
 80092e4:	460e      	mov	r6, r1
 80092e6:	d9f4      	bls.n	80092d2 <_printf_i+0x11a>
 80092e8:	2b08      	cmp	r3, #8
 80092ea:	d10b      	bne.n	8009304 <_printf_i+0x14c>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	07de      	lsls	r6, r3, #31
 80092f0:	d508      	bpl.n	8009304 <_printf_i+0x14c>
 80092f2:	6923      	ldr	r3, [r4, #16]
 80092f4:	6861      	ldr	r1, [r4, #4]
 80092f6:	4299      	cmp	r1, r3
 80092f8:	bfde      	ittt	le
 80092fa:	2330      	movle	r3, #48	; 0x30
 80092fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009304:	1b52      	subs	r2, r2, r5
 8009306:	6122      	str	r2, [r4, #16]
 8009308:	f8cd a000 	str.w	sl, [sp]
 800930c:	464b      	mov	r3, r9
 800930e:	aa03      	add	r2, sp, #12
 8009310:	4621      	mov	r1, r4
 8009312:	4640      	mov	r0, r8
 8009314:	f7ff fee2 	bl	80090dc <_printf_common>
 8009318:	3001      	adds	r0, #1
 800931a:	d14c      	bne.n	80093b6 <_printf_i+0x1fe>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	b004      	add	sp, #16
 8009322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009326:	4835      	ldr	r0, [pc, #212]	; (80093fc <_printf_i+0x244>)
 8009328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800932c:	6829      	ldr	r1, [r5, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	f851 6b04 	ldr.w	r6, [r1], #4
 8009334:	6029      	str	r1, [r5, #0]
 8009336:	061d      	lsls	r5, r3, #24
 8009338:	d514      	bpl.n	8009364 <_printf_i+0x1ac>
 800933a:	07df      	lsls	r7, r3, #31
 800933c:	bf44      	itt	mi
 800933e:	f043 0320 	orrmi.w	r3, r3, #32
 8009342:	6023      	strmi	r3, [r4, #0]
 8009344:	b91e      	cbnz	r6, 800934e <_printf_i+0x196>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f023 0320 	bic.w	r3, r3, #32
 800934c:	6023      	str	r3, [r4, #0]
 800934e:	2310      	movs	r3, #16
 8009350:	e7b0      	b.n	80092b4 <_printf_i+0xfc>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	f043 0320 	orr.w	r3, r3, #32
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	2378      	movs	r3, #120	; 0x78
 800935c:	4828      	ldr	r0, [pc, #160]	; (8009400 <_printf_i+0x248>)
 800935e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009362:	e7e3      	b.n	800932c <_printf_i+0x174>
 8009364:	0659      	lsls	r1, r3, #25
 8009366:	bf48      	it	mi
 8009368:	b2b6      	uxthmi	r6, r6
 800936a:	e7e6      	b.n	800933a <_printf_i+0x182>
 800936c:	4615      	mov	r5, r2
 800936e:	e7bb      	b.n	80092e8 <_printf_i+0x130>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	6826      	ldr	r6, [r4, #0]
 8009374:	6961      	ldr	r1, [r4, #20]
 8009376:	1d18      	adds	r0, r3, #4
 8009378:	6028      	str	r0, [r5, #0]
 800937a:	0635      	lsls	r5, r6, #24
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	d501      	bpl.n	8009384 <_printf_i+0x1cc>
 8009380:	6019      	str	r1, [r3, #0]
 8009382:	e002      	b.n	800938a <_printf_i+0x1d2>
 8009384:	0670      	lsls	r0, r6, #25
 8009386:	d5fb      	bpl.n	8009380 <_printf_i+0x1c8>
 8009388:	8019      	strh	r1, [r3, #0]
 800938a:	2300      	movs	r3, #0
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	4615      	mov	r5, r2
 8009390:	e7ba      	b.n	8009308 <_printf_i+0x150>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	1d1a      	adds	r2, r3, #4
 8009396:	602a      	str	r2, [r5, #0]
 8009398:	681d      	ldr	r5, [r3, #0]
 800939a:	6862      	ldr	r2, [r4, #4]
 800939c:	2100      	movs	r1, #0
 800939e:	4628      	mov	r0, r5
 80093a0:	f7f6 ffae 	bl	8000300 <memchr>
 80093a4:	b108      	cbz	r0, 80093aa <_printf_i+0x1f2>
 80093a6:	1b40      	subs	r0, r0, r5
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	6123      	str	r3, [r4, #16]
 80093ae:	2300      	movs	r3, #0
 80093b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b4:	e7a8      	b.n	8009308 <_printf_i+0x150>
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4649      	mov	r1, r9
 80093bc:	4640      	mov	r0, r8
 80093be:	47d0      	blx	sl
 80093c0:	3001      	adds	r0, #1
 80093c2:	d0ab      	beq.n	800931c <_printf_i+0x164>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	079b      	lsls	r3, r3, #30
 80093c8:	d413      	bmi.n	80093f2 <_printf_i+0x23a>
 80093ca:	68e0      	ldr	r0, [r4, #12]
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	4298      	cmp	r0, r3
 80093d0:	bfb8      	it	lt
 80093d2:	4618      	movlt	r0, r3
 80093d4:	e7a4      	b.n	8009320 <_printf_i+0x168>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4632      	mov	r2, r6
 80093da:	4649      	mov	r1, r9
 80093dc:	4640      	mov	r0, r8
 80093de:	47d0      	blx	sl
 80093e0:	3001      	adds	r0, #1
 80093e2:	d09b      	beq.n	800931c <_printf_i+0x164>
 80093e4:	3501      	adds	r5, #1
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	9903      	ldr	r1, [sp, #12]
 80093ea:	1a5b      	subs	r3, r3, r1
 80093ec:	42ab      	cmp	r3, r5
 80093ee:	dcf2      	bgt.n	80093d6 <_printf_i+0x21e>
 80093f0:	e7eb      	b.n	80093ca <_printf_i+0x212>
 80093f2:	2500      	movs	r5, #0
 80093f4:	f104 0619 	add.w	r6, r4, #25
 80093f8:	e7f5      	b.n	80093e6 <_printf_i+0x22e>
 80093fa:	bf00      	nop
 80093fc:	08009e75 	.word	0x08009e75
 8009400:	08009e86 	.word	0x08009e86

08009404 <_free_r>:
 8009404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009406:	2900      	cmp	r1, #0
 8009408:	d044      	beq.n	8009494 <_free_r+0x90>
 800940a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800940e:	9001      	str	r0, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f1a1 0404 	sub.w	r4, r1, #4
 8009416:	bfb8      	it	lt
 8009418:	18e4      	addlt	r4, r4, r3
 800941a:	f000 f913 	bl	8009644 <__malloc_lock>
 800941e:	4a1e      	ldr	r2, [pc, #120]	; (8009498 <_free_r+0x94>)
 8009420:	9801      	ldr	r0, [sp, #4]
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	b933      	cbnz	r3, 8009434 <_free_r+0x30>
 8009426:	6063      	str	r3, [r4, #4]
 8009428:	6014      	str	r4, [r2, #0]
 800942a:	b003      	add	sp, #12
 800942c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009430:	f000 b90e 	b.w	8009650 <__malloc_unlock>
 8009434:	42a3      	cmp	r3, r4
 8009436:	d908      	bls.n	800944a <_free_r+0x46>
 8009438:	6825      	ldr	r5, [r4, #0]
 800943a:	1961      	adds	r1, r4, r5
 800943c:	428b      	cmp	r3, r1
 800943e:	bf01      	itttt	eq
 8009440:	6819      	ldreq	r1, [r3, #0]
 8009442:	685b      	ldreq	r3, [r3, #4]
 8009444:	1949      	addeq	r1, r1, r5
 8009446:	6021      	streq	r1, [r4, #0]
 8009448:	e7ed      	b.n	8009426 <_free_r+0x22>
 800944a:	461a      	mov	r2, r3
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	b10b      	cbz	r3, 8009454 <_free_r+0x50>
 8009450:	42a3      	cmp	r3, r4
 8009452:	d9fa      	bls.n	800944a <_free_r+0x46>
 8009454:	6811      	ldr	r1, [r2, #0]
 8009456:	1855      	adds	r5, r2, r1
 8009458:	42a5      	cmp	r5, r4
 800945a:	d10b      	bne.n	8009474 <_free_r+0x70>
 800945c:	6824      	ldr	r4, [r4, #0]
 800945e:	4421      	add	r1, r4
 8009460:	1854      	adds	r4, r2, r1
 8009462:	42a3      	cmp	r3, r4
 8009464:	6011      	str	r1, [r2, #0]
 8009466:	d1e0      	bne.n	800942a <_free_r+0x26>
 8009468:	681c      	ldr	r4, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	6053      	str	r3, [r2, #4]
 800946e:	4421      	add	r1, r4
 8009470:	6011      	str	r1, [r2, #0]
 8009472:	e7da      	b.n	800942a <_free_r+0x26>
 8009474:	d902      	bls.n	800947c <_free_r+0x78>
 8009476:	230c      	movs	r3, #12
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	e7d6      	b.n	800942a <_free_r+0x26>
 800947c:	6825      	ldr	r5, [r4, #0]
 800947e:	1961      	adds	r1, r4, r5
 8009480:	428b      	cmp	r3, r1
 8009482:	bf04      	itt	eq
 8009484:	6819      	ldreq	r1, [r3, #0]
 8009486:	685b      	ldreq	r3, [r3, #4]
 8009488:	6063      	str	r3, [r4, #4]
 800948a:	bf04      	itt	eq
 800948c:	1949      	addeq	r1, r1, r5
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	6054      	str	r4, [r2, #4]
 8009492:	e7ca      	b.n	800942a <_free_r+0x26>
 8009494:	b003      	add	sp, #12
 8009496:	bd30      	pop	{r4, r5, pc}
 8009498:	24000800 	.word	0x24000800

0800949c <sbrk_aligned>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4e0e      	ldr	r6, [pc, #56]	; (80094d8 <sbrk_aligned+0x3c>)
 80094a0:	460c      	mov	r4, r1
 80094a2:	6831      	ldr	r1, [r6, #0]
 80094a4:	4605      	mov	r5, r0
 80094a6:	b911      	cbnz	r1, 80094ae <sbrk_aligned+0x12>
 80094a8:	f000 f8bc 	bl	8009624 <_sbrk_r>
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	4621      	mov	r1, r4
 80094b0:	4628      	mov	r0, r5
 80094b2:	f000 f8b7 	bl	8009624 <_sbrk_r>
 80094b6:	1c43      	adds	r3, r0, #1
 80094b8:	d00a      	beq.n	80094d0 <sbrk_aligned+0x34>
 80094ba:	1cc4      	adds	r4, r0, #3
 80094bc:	f024 0403 	bic.w	r4, r4, #3
 80094c0:	42a0      	cmp	r0, r4
 80094c2:	d007      	beq.n	80094d4 <sbrk_aligned+0x38>
 80094c4:	1a21      	subs	r1, r4, r0
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f8ac 	bl	8009624 <_sbrk_r>
 80094cc:	3001      	adds	r0, #1
 80094ce:	d101      	bne.n	80094d4 <sbrk_aligned+0x38>
 80094d0:	f04f 34ff 	mov.w	r4, #4294967295
 80094d4:	4620      	mov	r0, r4
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	24000804 	.word	0x24000804

080094dc <_malloc_r>:
 80094dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e0:	1ccd      	adds	r5, r1, #3
 80094e2:	f025 0503 	bic.w	r5, r5, #3
 80094e6:	3508      	adds	r5, #8
 80094e8:	2d0c      	cmp	r5, #12
 80094ea:	bf38      	it	cc
 80094ec:	250c      	movcc	r5, #12
 80094ee:	2d00      	cmp	r5, #0
 80094f0:	4607      	mov	r7, r0
 80094f2:	db01      	blt.n	80094f8 <_malloc_r+0x1c>
 80094f4:	42a9      	cmp	r1, r5
 80094f6:	d905      	bls.n	8009504 <_malloc_r+0x28>
 80094f8:	230c      	movs	r3, #12
 80094fa:	603b      	str	r3, [r7, #0]
 80094fc:	2600      	movs	r6, #0
 80094fe:	4630      	mov	r0, r6
 8009500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009504:	4e2e      	ldr	r6, [pc, #184]	; (80095c0 <_malloc_r+0xe4>)
 8009506:	f000 f89d 	bl	8009644 <__malloc_lock>
 800950a:	6833      	ldr	r3, [r6, #0]
 800950c:	461c      	mov	r4, r3
 800950e:	bb34      	cbnz	r4, 800955e <_malloc_r+0x82>
 8009510:	4629      	mov	r1, r5
 8009512:	4638      	mov	r0, r7
 8009514:	f7ff ffc2 	bl	800949c <sbrk_aligned>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	4604      	mov	r4, r0
 800951c:	d14d      	bne.n	80095ba <_malloc_r+0xde>
 800951e:	6834      	ldr	r4, [r6, #0]
 8009520:	4626      	mov	r6, r4
 8009522:	2e00      	cmp	r6, #0
 8009524:	d140      	bne.n	80095a8 <_malloc_r+0xcc>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	4631      	mov	r1, r6
 800952a:	4638      	mov	r0, r7
 800952c:	eb04 0803 	add.w	r8, r4, r3
 8009530:	f000 f878 	bl	8009624 <_sbrk_r>
 8009534:	4580      	cmp	r8, r0
 8009536:	d13a      	bne.n	80095ae <_malloc_r+0xd2>
 8009538:	6821      	ldr	r1, [r4, #0]
 800953a:	3503      	adds	r5, #3
 800953c:	1a6d      	subs	r5, r5, r1
 800953e:	f025 0503 	bic.w	r5, r5, #3
 8009542:	3508      	adds	r5, #8
 8009544:	2d0c      	cmp	r5, #12
 8009546:	bf38      	it	cc
 8009548:	250c      	movcc	r5, #12
 800954a:	4629      	mov	r1, r5
 800954c:	4638      	mov	r0, r7
 800954e:	f7ff ffa5 	bl	800949c <sbrk_aligned>
 8009552:	3001      	adds	r0, #1
 8009554:	d02b      	beq.n	80095ae <_malloc_r+0xd2>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	442b      	add	r3, r5
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	e00e      	b.n	800957c <_malloc_r+0xa0>
 800955e:	6822      	ldr	r2, [r4, #0]
 8009560:	1b52      	subs	r2, r2, r5
 8009562:	d41e      	bmi.n	80095a2 <_malloc_r+0xc6>
 8009564:	2a0b      	cmp	r2, #11
 8009566:	d916      	bls.n	8009596 <_malloc_r+0xba>
 8009568:	1961      	adds	r1, r4, r5
 800956a:	42a3      	cmp	r3, r4
 800956c:	6025      	str	r5, [r4, #0]
 800956e:	bf18      	it	ne
 8009570:	6059      	strne	r1, [r3, #4]
 8009572:	6863      	ldr	r3, [r4, #4]
 8009574:	bf08      	it	eq
 8009576:	6031      	streq	r1, [r6, #0]
 8009578:	5162      	str	r2, [r4, r5]
 800957a:	604b      	str	r3, [r1, #4]
 800957c:	4638      	mov	r0, r7
 800957e:	f104 060b 	add.w	r6, r4, #11
 8009582:	f000 f865 	bl	8009650 <__malloc_unlock>
 8009586:	f026 0607 	bic.w	r6, r6, #7
 800958a:	1d23      	adds	r3, r4, #4
 800958c:	1af2      	subs	r2, r6, r3
 800958e:	d0b6      	beq.n	80094fe <_malloc_r+0x22>
 8009590:	1b9b      	subs	r3, r3, r6
 8009592:	50a3      	str	r3, [r4, r2]
 8009594:	e7b3      	b.n	80094fe <_malloc_r+0x22>
 8009596:	6862      	ldr	r2, [r4, #4]
 8009598:	42a3      	cmp	r3, r4
 800959a:	bf0c      	ite	eq
 800959c:	6032      	streq	r2, [r6, #0]
 800959e:	605a      	strne	r2, [r3, #4]
 80095a0:	e7ec      	b.n	800957c <_malloc_r+0xa0>
 80095a2:	4623      	mov	r3, r4
 80095a4:	6864      	ldr	r4, [r4, #4]
 80095a6:	e7b2      	b.n	800950e <_malloc_r+0x32>
 80095a8:	4634      	mov	r4, r6
 80095aa:	6876      	ldr	r6, [r6, #4]
 80095ac:	e7b9      	b.n	8009522 <_malloc_r+0x46>
 80095ae:	230c      	movs	r3, #12
 80095b0:	603b      	str	r3, [r7, #0]
 80095b2:	4638      	mov	r0, r7
 80095b4:	f000 f84c 	bl	8009650 <__malloc_unlock>
 80095b8:	e7a1      	b.n	80094fe <_malloc_r+0x22>
 80095ba:	6025      	str	r5, [r4, #0]
 80095bc:	e7de      	b.n	800957c <_malloc_r+0xa0>
 80095be:	bf00      	nop
 80095c0:	24000800 	.word	0x24000800

080095c4 <_realloc_r>:
 80095c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095c8:	4680      	mov	r8, r0
 80095ca:	4614      	mov	r4, r2
 80095cc:	460e      	mov	r6, r1
 80095ce:	b921      	cbnz	r1, 80095da <_realloc_r+0x16>
 80095d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095d4:	4611      	mov	r1, r2
 80095d6:	f7ff bf81 	b.w	80094dc <_malloc_r>
 80095da:	b92a      	cbnz	r2, 80095e8 <_realloc_r+0x24>
 80095dc:	f7ff ff12 	bl	8009404 <_free_r>
 80095e0:	4625      	mov	r5, r4
 80095e2:	4628      	mov	r0, r5
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	f000 f838 	bl	800965c <_malloc_usable_size_r>
 80095ec:	4284      	cmp	r4, r0
 80095ee:	4607      	mov	r7, r0
 80095f0:	d802      	bhi.n	80095f8 <_realloc_r+0x34>
 80095f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095f6:	d812      	bhi.n	800961e <_realloc_r+0x5a>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7ff ff6e 	bl	80094dc <_malloc_r>
 8009600:	4605      	mov	r5, r0
 8009602:	2800      	cmp	r0, #0
 8009604:	d0ed      	beq.n	80095e2 <_realloc_r+0x1e>
 8009606:	42bc      	cmp	r4, r7
 8009608:	4622      	mov	r2, r4
 800960a:	4631      	mov	r1, r6
 800960c:	bf28      	it	cs
 800960e:	463a      	movcs	r2, r7
 8009610:	f7ff fbb8 	bl	8008d84 <memcpy>
 8009614:	4631      	mov	r1, r6
 8009616:	4640      	mov	r0, r8
 8009618:	f7ff fef4 	bl	8009404 <_free_r>
 800961c:	e7e1      	b.n	80095e2 <_realloc_r+0x1e>
 800961e:	4635      	mov	r5, r6
 8009620:	e7df      	b.n	80095e2 <_realloc_r+0x1e>
	...

08009624 <_sbrk_r>:
 8009624:	b538      	push	{r3, r4, r5, lr}
 8009626:	4d06      	ldr	r5, [pc, #24]	; (8009640 <_sbrk_r+0x1c>)
 8009628:	2300      	movs	r3, #0
 800962a:	4604      	mov	r4, r0
 800962c:	4608      	mov	r0, r1
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	f7f8 f880 	bl	8001734 <_sbrk>
 8009634:	1c43      	adds	r3, r0, #1
 8009636:	d102      	bne.n	800963e <_sbrk_r+0x1a>
 8009638:	682b      	ldr	r3, [r5, #0]
 800963a:	b103      	cbz	r3, 800963e <_sbrk_r+0x1a>
 800963c:	6023      	str	r3, [r4, #0]
 800963e:	bd38      	pop	{r3, r4, r5, pc}
 8009640:	24000808 	.word	0x24000808

08009644 <__malloc_lock>:
 8009644:	4801      	ldr	r0, [pc, #4]	; (800964c <__malloc_lock+0x8>)
 8009646:	f000 b811 	b.w	800966c <__retarget_lock_acquire_recursive>
 800964a:	bf00      	nop
 800964c:	2400080c 	.word	0x2400080c

08009650 <__malloc_unlock>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__malloc_unlock+0x8>)
 8009652:	f000 b80c 	b.w	800966e <__retarget_lock_release_recursive>
 8009656:	bf00      	nop
 8009658:	2400080c 	.word	0x2400080c

0800965c <_malloc_usable_size_r>:
 800965c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009660:	1f18      	subs	r0, r3, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	bfbc      	itt	lt
 8009666:	580b      	ldrlt	r3, [r1, r0]
 8009668:	18c0      	addlt	r0, r0, r3
 800966a:	4770      	bx	lr

0800966c <__retarget_lock_acquire_recursive>:
 800966c:	4770      	bx	lr

0800966e <__retarget_lock_release_recursive>:
 800966e:	4770      	bx	lr

08009670 <_init>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr

0800967c <_fini>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	bf00      	nop
 8009680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009682:	bc08      	pop	{r3}
 8009684:	469e      	mov	lr, r3
 8009686:	4770      	bx	lr
