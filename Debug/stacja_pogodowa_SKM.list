
stacja_pogodowa_SKM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  080002b0  080002b0  000102b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006730  08006730  00016730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006738  08006738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800673c  0800673c  0001673c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000428  24000010  08006750  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000438  08006750  00020438  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014975  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028dd  00000000  00000000  000349b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e60  00000000  00000000  00037290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d48  00000000  00000000  000380f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000036a7  00000000  00000000  00038e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014b64  00000000  00000000  0003c4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013382e  00000000  00000000  00051043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00184871  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b30  00000000  00000000  001848c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000010 	.word	0x24000010
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080066e0 	.word	0x080066e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000014 	.word	0x24000014
 80002ec:	080066e0 	.word	0x080066e0

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b974 	b.w	8000968 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f806 	bl	8000698 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__udivmoddi4>:
 8000698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800069c:	9d08      	ldr	r5, [sp, #32]
 800069e:	4604      	mov	r4, r0
 80006a0:	468e      	mov	lr, r1
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d14d      	bne.n	8000742 <__udivmoddi4+0xaa>
 80006a6:	428a      	cmp	r2, r1
 80006a8:	4694      	mov	ip, r2
 80006aa:	d969      	bls.n	8000780 <__udivmoddi4+0xe8>
 80006ac:	fab2 f282 	clz	r2, r2
 80006b0:	b152      	cbz	r2, 80006c8 <__udivmoddi4+0x30>
 80006b2:	fa01 f302 	lsl.w	r3, r1, r2
 80006b6:	f1c2 0120 	rsb	r1, r2, #32
 80006ba:	fa20 f101 	lsr.w	r1, r0, r1
 80006be:	fa0c fc02 	lsl.w	ip, ip, r2
 80006c2:	ea41 0e03 	orr.w	lr, r1, r3
 80006c6:	4094      	lsls	r4, r2
 80006c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006cc:	0c21      	lsrs	r1, r4, #16
 80006ce:	fbbe f6f8 	udiv	r6, lr, r8
 80006d2:	fa1f f78c 	uxth.w	r7, ip
 80006d6:	fb08 e316 	mls	r3, r8, r6, lr
 80006da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006de:	fb06 f107 	mul.w	r1, r6, r7
 80006e2:	4299      	cmp	r1, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x64>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ee:	f080 811f 	bcs.w	8000930 <__udivmoddi4+0x298>
 80006f2:	4299      	cmp	r1, r3
 80006f4:	f240 811c 	bls.w	8000930 <__udivmoddi4+0x298>
 80006f8:	3e02      	subs	r6, #2
 80006fa:	4463      	add	r3, ip
 80006fc:	1a5b      	subs	r3, r3, r1
 80006fe:	b2a4      	uxth	r4, r4
 8000700:	fbb3 f0f8 	udiv	r0, r3, r8
 8000704:	fb08 3310 	mls	r3, r8, r0, r3
 8000708:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800070c:	fb00 f707 	mul.w	r7, r0, r7
 8000710:	42a7      	cmp	r7, r4
 8000712:	d90a      	bls.n	800072a <__udivmoddi4+0x92>
 8000714:	eb1c 0404 	adds.w	r4, ip, r4
 8000718:	f100 33ff 	add.w	r3, r0, #4294967295
 800071c:	f080 810a 	bcs.w	8000934 <__udivmoddi4+0x29c>
 8000720:	42a7      	cmp	r7, r4
 8000722:	f240 8107 	bls.w	8000934 <__udivmoddi4+0x29c>
 8000726:	4464      	add	r4, ip
 8000728:	3802      	subs	r0, #2
 800072a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800072e:	1be4      	subs	r4, r4, r7
 8000730:	2600      	movs	r6, #0
 8000732:	b11d      	cbz	r5, 800073c <__udivmoddi4+0xa4>
 8000734:	40d4      	lsrs	r4, r2
 8000736:	2300      	movs	r3, #0
 8000738:	e9c5 4300 	strd	r4, r3, [r5]
 800073c:	4631      	mov	r1, r6
 800073e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000742:	428b      	cmp	r3, r1
 8000744:	d909      	bls.n	800075a <__udivmoddi4+0xc2>
 8000746:	2d00      	cmp	r5, #0
 8000748:	f000 80ef 	beq.w	800092a <__udivmoddi4+0x292>
 800074c:	2600      	movs	r6, #0
 800074e:	e9c5 0100 	strd	r0, r1, [r5]
 8000752:	4630      	mov	r0, r6
 8000754:	4631      	mov	r1, r6
 8000756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800075a:	fab3 f683 	clz	r6, r3
 800075e:	2e00      	cmp	r6, #0
 8000760:	d14a      	bne.n	80007f8 <__udivmoddi4+0x160>
 8000762:	428b      	cmp	r3, r1
 8000764:	d302      	bcc.n	800076c <__udivmoddi4+0xd4>
 8000766:	4282      	cmp	r2, r0
 8000768:	f200 80f9 	bhi.w	800095e <__udivmoddi4+0x2c6>
 800076c:	1a84      	subs	r4, r0, r2
 800076e:	eb61 0303 	sbc.w	r3, r1, r3
 8000772:	2001      	movs	r0, #1
 8000774:	469e      	mov	lr, r3
 8000776:	2d00      	cmp	r5, #0
 8000778:	d0e0      	beq.n	800073c <__udivmoddi4+0xa4>
 800077a:	e9c5 4e00 	strd	r4, lr, [r5]
 800077e:	e7dd      	b.n	800073c <__udivmoddi4+0xa4>
 8000780:	b902      	cbnz	r2, 8000784 <__udivmoddi4+0xec>
 8000782:	deff      	udf	#255	; 0xff
 8000784:	fab2 f282 	clz	r2, r2
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 8092 	bne.w	80008b2 <__udivmoddi4+0x21a>
 800078e:	eba1 010c 	sub.w	r1, r1, ip
 8000792:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000796:	fa1f fe8c 	uxth.w	lr, ip
 800079a:	2601      	movs	r6, #1
 800079c:	0c20      	lsrs	r0, r4, #16
 800079e:	fbb1 f3f7 	udiv	r3, r1, r7
 80007a2:	fb07 1113 	mls	r1, r7, r3, r1
 80007a6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007aa:	fb0e f003 	mul.w	r0, lr, r3
 80007ae:	4288      	cmp	r0, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x12c>
 80007b2:	eb1c 0101 	adds.w	r1, ip, r1
 80007b6:	f103 38ff 	add.w	r8, r3, #4294967295
 80007ba:	d202      	bcs.n	80007c2 <__udivmoddi4+0x12a>
 80007bc:	4288      	cmp	r0, r1
 80007be:	f200 80cb 	bhi.w	8000958 <__udivmoddi4+0x2c0>
 80007c2:	4643      	mov	r3, r8
 80007c4:	1a09      	subs	r1, r1, r0
 80007c6:	b2a4      	uxth	r4, r4
 80007c8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007cc:	fb07 1110 	mls	r1, r7, r0, r1
 80007d0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007d4:	fb0e fe00 	mul.w	lr, lr, r0
 80007d8:	45a6      	cmp	lr, r4
 80007da:	d908      	bls.n	80007ee <__udivmoddi4+0x156>
 80007dc:	eb1c 0404 	adds.w	r4, ip, r4
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007e4:	d202      	bcs.n	80007ec <__udivmoddi4+0x154>
 80007e6:	45a6      	cmp	lr, r4
 80007e8:	f200 80bb 	bhi.w	8000962 <__udivmoddi4+0x2ca>
 80007ec:	4608      	mov	r0, r1
 80007ee:	eba4 040e 	sub.w	r4, r4, lr
 80007f2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007f6:	e79c      	b.n	8000732 <__udivmoddi4+0x9a>
 80007f8:	f1c6 0720 	rsb	r7, r6, #32
 80007fc:	40b3      	lsls	r3, r6
 80007fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000802:	ea4c 0c03 	orr.w	ip, ip, r3
 8000806:	fa20 f407 	lsr.w	r4, r0, r7
 800080a:	fa01 f306 	lsl.w	r3, r1, r6
 800080e:	431c      	orrs	r4, r3
 8000810:	40f9      	lsrs	r1, r7
 8000812:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000816:	fa00 f306 	lsl.w	r3, r0, r6
 800081a:	fbb1 f8f9 	udiv	r8, r1, r9
 800081e:	0c20      	lsrs	r0, r4, #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fb09 1118 	mls	r1, r9, r8, r1
 8000828:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800082c:	fb08 f00e 	mul.w	r0, r8, lr
 8000830:	4288      	cmp	r0, r1
 8000832:	fa02 f206 	lsl.w	r2, r2, r6
 8000836:	d90b      	bls.n	8000850 <__udivmoddi4+0x1b8>
 8000838:	eb1c 0101 	adds.w	r1, ip, r1
 800083c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000840:	f080 8088 	bcs.w	8000954 <__udivmoddi4+0x2bc>
 8000844:	4288      	cmp	r0, r1
 8000846:	f240 8085 	bls.w	8000954 <__udivmoddi4+0x2bc>
 800084a:	f1a8 0802 	sub.w	r8, r8, #2
 800084e:	4461      	add	r1, ip
 8000850:	1a09      	subs	r1, r1, r0
 8000852:	b2a4      	uxth	r4, r4
 8000854:	fbb1 f0f9 	udiv	r0, r1, r9
 8000858:	fb09 1110 	mls	r1, r9, r0, r1
 800085c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000860:	fb00 fe0e 	mul.w	lr, r0, lr
 8000864:	458e      	cmp	lr, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x1e2>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000870:	d26c      	bcs.n	800094c <__udivmoddi4+0x2b4>
 8000872:	458e      	cmp	lr, r1
 8000874:	d96a      	bls.n	800094c <__udivmoddi4+0x2b4>
 8000876:	3802      	subs	r0, #2
 8000878:	4461      	add	r1, ip
 800087a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800087e:	fba0 9402 	umull	r9, r4, r0, r2
 8000882:	eba1 010e 	sub.w	r1, r1, lr
 8000886:	42a1      	cmp	r1, r4
 8000888:	46c8      	mov	r8, r9
 800088a:	46a6      	mov	lr, r4
 800088c:	d356      	bcc.n	800093c <__udivmoddi4+0x2a4>
 800088e:	d053      	beq.n	8000938 <__udivmoddi4+0x2a0>
 8000890:	b15d      	cbz	r5, 80008aa <__udivmoddi4+0x212>
 8000892:	ebb3 0208 	subs.w	r2, r3, r8
 8000896:	eb61 010e 	sbc.w	r1, r1, lr
 800089a:	fa01 f707 	lsl.w	r7, r1, r7
 800089e:	fa22 f306 	lsr.w	r3, r2, r6
 80008a2:	40f1      	lsrs	r1, r6
 80008a4:	431f      	orrs	r7, r3
 80008a6:	e9c5 7100 	strd	r7, r1, [r5]
 80008aa:	2600      	movs	r6, #0
 80008ac:	4631      	mov	r1, r6
 80008ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b2:	f1c2 0320 	rsb	r3, r2, #32
 80008b6:	40d8      	lsrs	r0, r3
 80008b8:	fa0c fc02 	lsl.w	ip, ip, r2
 80008bc:	fa21 f303 	lsr.w	r3, r1, r3
 80008c0:	4091      	lsls	r1, r2
 80008c2:	4301      	orrs	r1, r0
 80008c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c8:	fa1f fe8c 	uxth.w	lr, ip
 80008cc:	fbb3 f0f7 	udiv	r0, r3, r7
 80008d0:	fb07 3610 	mls	r6, r7, r0, r3
 80008d4:	0c0b      	lsrs	r3, r1, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	fb00 f60e 	mul.w	r6, r0, lr
 80008de:	429e      	cmp	r6, r3
 80008e0:	fa04 f402 	lsl.w	r4, r4, r2
 80008e4:	d908      	bls.n	80008f8 <__udivmoddi4+0x260>
 80008e6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ee:	d22f      	bcs.n	8000950 <__udivmoddi4+0x2b8>
 80008f0:	429e      	cmp	r6, r3
 80008f2:	d92d      	bls.n	8000950 <__udivmoddi4+0x2b8>
 80008f4:	3802      	subs	r0, #2
 80008f6:	4463      	add	r3, ip
 80008f8:	1b9b      	subs	r3, r3, r6
 80008fa:	b289      	uxth	r1, r1
 80008fc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000900:	fb07 3316 	mls	r3, r7, r6, r3
 8000904:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000908:	fb06 f30e 	mul.w	r3, r6, lr
 800090c:	428b      	cmp	r3, r1
 800090e:	d908      	bls.n	8000922 <__udivmoddi4+0x28a>
 8000910:	eb1c 0101 	adds.w	r1, ip, r1
 8000914:	f106 38ff 	add.w	r8, r6, #4294967295
 8000918:	d216      	bcs.n	8000948 <__udivmoddi4+0x2b0>
 800091a:	428b      	cmp	r3, r1
 800091c:	d914      	bls.n	8000948 <__udivmoddi4+0x2b0>
 800091e:	3e02      	subs	r6, #2
 8000920:	4461      	add	r1, ip
 8000922:	1ac9      	subs	r1, r1, r3
 8000924:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000928:	e738      	b.n	800079c <__udivmoddi4+0x104>
 800092a:	462e      	mov	r6, r5
 800092c:	4628      	mov	r0, r5
 800092e:	e705      	b.n	800073c <__udivmoddi4+0xa4>
 8000930:	4606      	mov	r6, r0
 8000932:	e6e3      	b.n	80006fc <__udivmoddi4+0x64>
 8000934:	4618      	mov	r0, r3
 8000936:	e6f8      	b.n	800072a <__udivmoddi4+0x92>
 8000938:	454b      	cmp	r3, r9
 800093a:	d2a9      	bcs.n	8000890 <__udivmoddi4+0x1f8>
 800093c:	ebb9 0802 	subs.w	r8, r9, r2
 8000940:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000944:	3801      	subs	r0, #1
 8000946:	e7a3      	b.n	8000890 <__udivmoddi4+0x1f8>
 8000948:	4646      	mov	r6, r8
 800094a:	e7ea      	b.n	8000922 <__udivmoddi4+0x28a>
 800094c:	4620      	mov	r0, r4
 800094e:	e794      	b.n	800087a <__udivmoddi4+0x1e2>
 8000950:	4640      	mov	r0, r8
 8000952:	e7d1      	b.n	80008f8 <__udivmoddi4+0x260>
 8000954:	46d0      	mov	r8, sl
 8000956:	e77b      	b.n	8000850 <__udivmoddi4+0x1b8>
 8000958:	3b02      	subs	r3, #2
 800095a:	4461      	add	r1, ip
 800095c:	e732      	b.n	80007c4 <__udivmoddi4+0x12c>
 800095e:	4630      	mov	r0, r6
 8000960:	e709      	b.n	8000776 <__udivmoddi4+0xde>
 8000962:	4464      	add	r4, ip
 8000964:	3802      	subs	r0, #2
 8000966:	e742      	b.n	80007ee <__udivmoddi4+0x156>

08000968 <__aeabi_idiv0>:
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop

0800096c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b80      	ldr	r3, [pc, #512]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000984:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000988:	4a7e      	ldr	r2, [pc, #504]	; (8000b84 <MX_GPIO_Init+0x218>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000992:	4b7c      	ldr	r3, [pc, #496]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000994:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	623b      	str	r3, [r7, #32]
 800099e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009a0:	4b78      	ldr	r3, [pc, #480]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a6:	4a77      	ldr	r2, [pc, #476]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b0:	4b74      	ldr	r3, [pc, #464]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009b2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b6:	f003 0320 	and.w	r3, r3, #32
 80009ba:	61fb      	str	r3, [r7, #28]
 80009bc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	4b71      	ldr	r3, [pc, #452]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009c4:	4a6f      	ldr	r2, [pc, #444]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ce:	4b6d      	ldr	r3, [pc, #436]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b69      	ldr	r3, [pc, #420]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009e2:	4a68      	ldr	r2, [pc, #416]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009ec:	4b65      	ldr	r3, [pc, #404]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009ee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b62      	ldr	r3, [pc, #392]	; (8000b84 <MX_GPIO_Init+0x218>)
 80009fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a00:	4a60      	ldr	r2, [pc, #384]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a0a:	4b5e      	ldr	r3, [pc, #376]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a18:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a1e:	4a59      	ldr	r2, [pc, #356]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a28:	4b56      	ldr	r3, [pc, #344]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b53      	ldr	r3, [pc, #332]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a3c:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a46:	4b4f      	ldr	r3, [pc, #316]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a54:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a64:	4b47      	ldr	r3, [pc, #284]	; (8000b84 <MX_GPIO_Init+0x218>)
 8000a66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a6a:	f003 0310 	and.w	r3, r3, #16
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a78:	4843      	ldr	r0, [pc, #268]	; (8000b88 <MX_GPIO_Init+0x21c>)
 8000a7a:	f001 fbd5 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a84:	4841      	ldr	r0, [pc, #260]	; (8000b8c <MX_GPIO_Init+0x220>)
 8000a86:	f001 fbcf 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4840      	ldr	r0, [pc, #256]	; (8000b90 <MX_GPIO_Init+0x224>)
 8000a90:	f001 fbca 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	483a      	ldr	r0, [pc, #232]	; (8000b94 <MX_GPIO_Init+0x228>)
 8000aaa:	f001 fa0d 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4830      	ldr	r0, [pc, #192]	; (8000b88 <MX_GPIO_Init+0x21c>)
 8000ac8:	f001 f9fe 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000acc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4829      	ldr	r0, [pc, #164]	; (8000b8c <MX_GPIO_Init+0x220>)
 8000ae6:	f001 f9ef 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	4826      	ldr	r0, [pc, #152]	; (8000b98 <MX_GPIO_Init+0x22c>)
 8000b00:	f001 f9e2 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4820      	ldr	r0, [pc, #128]	; (8000b9c <MX_GPIO_Init+0x230>)
 8000b1a:	f001 f9d5 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b30:	230a      	movs	r3, #10
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_GPIO_Init+0x230>)
 8000b3c:	f001 f9c4 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	4810      	ldr	r0, [pc, #64]	; (8000b9c <MX_GPIO_Init+0x230>)
 8000b5a:	f001 f9b5 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4806      	ldr	r0, [pc, #24]	; (8000b90 <MX_GPIO_Init+0x224>)
 8000b76:	f001 f9a7 	bl	8001ec8 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3738      	adds	r7, #56	; 0x38
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58021400 	.word	0x58021400
 8000b8c:	58020400 	.word	0x58020400
 8000b90:	58021000 	.word	0x58021000
 8000b94:	58020800 	.word	0x58020800
 8000b98:	58021800 	.word	0x58021800
 8000b9c:	58020000 	.word	0x58020000

08000ba0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <MX_I2C1_Init+0x78>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20B0CCFF;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bac:	4a1b      	ldr	r2, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x7c>)
 8000bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bdc:	f001 fb3e 	bl	800225c <HAL_I2C_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000be6:	f000 f9c7 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000bee:	f002 f827 	bl	8002c40 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 f9be 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_I2C1_Init+0x74>)
 8000c00:	f002 f869 	bl	8002cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c0a:	f000 f9b5 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2400002c 	.word	0x2400002c
 8000c18:	40005400 	.word	0x40005400
 8000c1c:	20b0ccff 	.word	0x20b0ccff

08000c20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <MX_I2C2_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_I2C2_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c5c:	f001 fafe 	bl	800225c <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 f987 	bl	8000f78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c6e:	f001 ffe7 	bl	8002c40 <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f000 f97e 	bl	8000f78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_I2C2_Init+0x74>)
 8000c80:	f002 f829 	bl	8002cd6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 f975 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000078 	.word	0x24000078
 8000c98:	40005800 	.word	0x40005800
 8000c9c:	20b0ccff 	.word	0x20b0ccff

08000ca0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0ba      	sub	sp, #232	; 0xe8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	22b8      	movs	r2, #184	; 0xb8
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fd05 	bl	80066d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a49      	ldr	r2, [pc, #292]	; (8000df0 <HAL_I2C_MspInit+0x150>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d142      	bne.n	8000d56 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cd0:	2308      	movs	r3, #8
 8000cd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f830 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cea:	f000 f945 	bl	8000f78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000cf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf4:	4a3f      	ldr	r2, [pc, #252]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d00:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d0c:	23c0      	movs	r3, #192	; 0xc0
 8000d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d12:	2312      	movs	r3, #18
 8000d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4831      	ldr	r0, [pc, #196]	; (8000df8 <HAL_I2C_MspInit+0x158>)
 8000d32:	f001 f8c9 	bl	8001ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d36:	4b2f      	ldr	r3, [pc, #188]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d38:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d3c:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d42:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d48:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000d54:	e047      	b.n	8000de6 <HAL_I2C_MspInit+0x146>
  else if(i2cHandle->Instance==I2C2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a28      	ldr	r2, [pc, #160]	; (8000dfc <HAL_I2C_MspInit+0x15c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d142      	bne.n	8000de6 <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d60:	2308      	movs	r3, #8
 8000d62:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 ffe8 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_I2C_MspInit+0xde>
      Error_Handler();
 8000d7a:	f000 f8fd 	bl	8000f78 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d84:	4a1b      	ldr	r2, [pc, #108]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da4:	2312      	movs	r3, #18
 8000da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000db6:	2304      	movs	r3, #4
 8000db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <HAL_I2C_MspInit+0x158>)
 8000dc4:	f001 f880 	bl	8001ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000dca:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd4:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_I2C_MspInit+0x154>)
 8000dda:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
}
 8000de6:	bf00      	nop
 8000de8:	37e8      	adds	r7, #232	; 0xe8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40005400 	.word	0x40005400
 8000df4:	58024400 	.word	0x58024400
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	40005800 	.word	0x40005800

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f000 fec5 	bl	8001b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0a:	f000 f827 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0e:	f7ff fdad 	bl	800096c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e12:	f000 f975 	bl	8001100 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000e16:	f000 fa25 	bl	8001264 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000e1a:	f7ff fec1 	bl	8000ba0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e1e:	f7ff feff 	bl	8000c20 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MS5611_Reset(&SENSOR_I2C, &MS5611);
 8000e22:	490b      	ldr	r1, [pc, #44]	; (8000e50 <main+0x50>)
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <main+0x54>)
 8000e26:	f000 fa25 	bl	8001274 <MS5611_Reset>
  MS5611_ReadProm(&SENSOR_I2C, &MS5611);
 8000e2a:	4909      	ldr	r1, [pc, #36]	; (8000e50 <main+0x50>)
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <main+0x54>)
 8000e2e:	f000 fa43 	bl	80012b8 <MS5611_ReadProm>
  TimerId timerIdMS5611;
  timerIdMS5611 = softTimerRegisterCallback(callbackMS5611, 100);
 8000e32:	2164      	movs	r1, #100	; 0x64
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <main+0x58>)
 8000e36:	f000 fcd3 	bl	80017e0 <softTimerRegisterCallback>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  softTimerChangeState(timerIdMS5611, timerRUN);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2101      	movs	r1, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fd10 	bl	8001868 <softTimerChangeState>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	softTimerEvent();
 8000e48:	f000 fd76 	bl	8001938 <softTimerEvent>
 8000e4c:	e7fc      	b.n	8000e48 <main+0x48>
 8000e4e:	bf00      	nop
 8000e50:	24000168 	.word	0x24000168
 8000e54:	2400002c 	.word	0x2400002c
 8000e58:	08000f3d 	.word	0x08000f3d

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b09c      	sub	sp, #112	; 0x70
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e66:	224c      	movs	r2, #76	; 0x4c
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 fc30 	bl	80066d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2220      	movs	r2, #32
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fc2a 	bl	80066d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	f001 ff77 	bl	8002d70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	4a2b      	ldr	r2, [pc, #172]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e90:	6193      	str	r3, [r2, #24]
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <SystemClock_Config+0xdc>)
 8000e94:	699b      	ldr	r3, [r3, #24]
 8000e96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e9e:	bf00      	nop
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <SystemClock_Config+0xdc>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eac:	d1f8      	bne.n	8000ea0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000eae:	2321      	movs	r3, #33	; 0x21
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000ec8:	2346      	movs	r3, #70	; 0x46
 8000eca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 ff9b 	bl	8002e24 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ef4:	f000 f840 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	233f      	movs	r3, #63	; 0x3f
 8000efa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efc:	2303      	movs	r3, #3
 8000efe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f14:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f16:	2340      	movs	r3, #64	; 0x40
 8000f18:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2107      	movs	r1, #7
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fb84 	bl	800362c <HAL_RCC_ClockConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f2a:	f000 f825 	bl	8000f78 <Error_Handler>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3770      	adds	r7, #112	; 0x70
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	58024800 	.word	0x58024800

08000f3c <callbackMS5611>:

/* USER CODE BEGIN 4 */

//periodically read data from MS5611
void callbackMS5611(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	MS5611_RequestTemperature(&SENSOR_I2C, OSR_4096);
 8000f40:	2104      	movs	r1, #4
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <callbackMS5611+0x34>)
 8000f44:	f000 fad6 	bl	80014f4 <MS5611_RequestTemperature>
	MS5611_ReadTemperature(&SENSOR_I2C, &MS5611);
 8000f48:	490a      	ldr	r1, [pc, #40]	; (8000f74 <callbackMS5611+0x38>)
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <callbackMS5611+0x34>)
 8000f4c:	f000 fb0a 	bl	8001564 <MS5611_ReadTemperature>
	MS5611_CalculateTemperature(&MS5611);
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <callbackMS5611+0x38>)
 8000f52:	f000 fb63 	bl	800161c <MS5611_CalculateTemperature>

	MS5611_RequestPressure(&SENSOR_I2C, OSR_4096);
 8000f56:	2104      	movs	r1, #4
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <callbackMS5611+0x34>)
 8000f5a:	f000 fae7 	bl	800152c <MS5611_RequestPressure>
	MS5611_ReadPressure(&SENSOR_I2C, &MS5611);
 8000f5e:	4905      	ldr	r1, [pc, #20]	; (8000f74 <callbackMS5611+0x38>)
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <callbackMS5611+0x34>)
 8000f62:	f000 fb2d 	bl	80015c0 <MS5611_ReadPressure>
	MS5611_CalculatePressure(&MS5611);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <callbackMS5611+0x38>)
 8000f68:	f000 fb8e 	bl	8001688 <MS5611_CalculatePressure>
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2400002c 	.word	0x2400002c
 8000f74:	24000168 	.word	0x24000168

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f90:	4a08      	ldr	r2, [pc, #32]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <NMI_Handler+0x4>

08000fbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <HardFault_Handler+0x4>

08000fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <MemManage_Handler+0x4>

08000fca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001004:	f000 fe38 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  softTimerTick();
 8001008:	f000 fcd4 	bl	80019b4 <softTimerTick>
  /* USER CODE END SysTick_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	bd80      	pop	{r7, pc}

08001010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <SystemInit+0xd0>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <SystemInit+0xd0>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <SystemInit+0xd4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 030f 	and.w	r3, r3, #15
 800102c:	2b02      	cmp	r3, #2
 800102e:	d807      	bhi.n	8001040 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <SystemInit+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 030f 	bic.w	r3, r3, #15
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <SystemInit+0xd4>)
 800103a:	f043 0303 	orr.w	r3, r3, #3
 800103e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemInit+0xd8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <SystemInit+0xd8>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemInit+0xd8>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <SystemInit+0xd8>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <SystemInit+0xd8>)
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemInit+0xdc>)
 800105a:	4013      	ands	r3, r2
 800105c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <SystemInit+0xd4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <SystemInit+0xd4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f023 030f 	bic.w	r3, r3, #15
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <SystemInit+0xd4>)
 8001074:	f043 0303 	orr.w	r3, r3, #3
 8001078:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <SystemInit+0xd8>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <SystemInit+0xd8>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <SystemInit+0xd8>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <SystemInit+0xd8>)
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <SystemInit+0xe0>)
 8001090:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <SystemInit+0xd8>)
 8001094:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <SystemInit+0xe4>)
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SystemInit+0xd8>)
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <SystemInit+0xe8>)
 800109c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <SystemInit+0xd8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemInit+0xd8>)
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <SystemInit+0xe8>)
 80010a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <SystemInit+0xd8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SystemInit+0xd8>)
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <SystemInit+0xe8>)
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <SystemInit+0xd8>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010bc:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <SystemInit+0xd8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a09      	ldr	r2, [pc, #36]	; (80010e8 <SystemInit+0xd8>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c8:	4b07      	ldr	r3, [pc, #28]	; (80010e8 <SystemInit+0xd8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <SystemInit+0xec>)
 80010d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	52002000 	.word	0x52002000
 80010e8:	58024400 	.word	0x58024400
 80010ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f0:	02020200 	.word	0x02020200
 80010f4:	01ff0000 	.word	0x01ff0000
 80010f8:	01010280 	.word	0x01010280
 80010fc:	52004000 	.word	0x52004000

08001100 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_USART3_UART_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART3_UART_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001148:	4811      	ldr	r0, [pc, #68]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800114a:	f004 f929 	bl	80053a0 <HAL_UART_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001154:	f7ff ff10 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001158:	2100      	movs	r1, #0
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800115c:	f005 f9ca 	bl	80064f4 <HAL_UARTEx_SetTxFifoThreshold>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001166:	f7ff ff07 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800116e:	f005 f9ff 	bl	8006570 <HAL_UARTEx_SetRxFifoThreshold>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001178:	f7ff fefe 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800117c:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_USART3_UART_Init+0x90>)
 800117e:	f005 f980 	bl	8006482 <HAL_UARTEx_DisableFifoMode>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001188:	f7ff fef6 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	240000c4 	.word	0x240000c4
 8001194:	40004800 	.word	0x40004800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0b8      	sub	sp, #224	; 0xe0
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	22b8      	movs	r2, #184	; 0xb8
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 fa89 	bl	80066d0 <memset>
  if(uartHandle->Instance==USART3)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_UART_MspInit+0xc0>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d142      	bne.n	800124e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c8:	2302      	movs	r3, #2
 80011ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fdb4 	bl	8003d44 <HAL_RCCEx_PeriphCLKConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011e2:	f7ff fec9 	bl	8000f78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011e8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_UART_MspInit+0xc4>)
 80011f8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0xc4>)
 8001206:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_UART_MspInit+0xc4>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <HAL_UART_MspInit+0xc4>)
 8001216:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001226:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800123c:	2307      	movs	r3, #7
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <HAL_UART_MspInit+0xc8>)
 800124a:	f000 fe3d 	bl	8001ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	37e0      	adds	r7, #224	; 0xe0
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40004800 	.word	0x40004800
 800125c:	58024400 	.word	0x58024400
 8001260:	58020c00 	.word	0x58020c00

08001264 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <MS5611_Reset>:
uint8_t MS5611_rx;

MS5611_t MS5611;

void MS5611_Reset(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	MS5611_tx = CMD_RESET;
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MS5611_Reset+0x40>)
 8001280:	221e      	movs	r2, #30
 8001282:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1 , &MS5611_tx, 1, 100);
 8001284:	2364      	movs	r3, #100	; 0x64
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2301      	movs	r3, #1
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <MS5611_Reset+0x40>)
 800128c:	21ee      	movs	r1, #238	; 0xee
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f001 f874 	bl	800237c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f000 fd0f 	bl	8001cb8 <HAL_Delay>
	//For Temperature > 20 Celsius
	DataStruct->T2 = 0;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	2200      	movs	r2, #0
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->OFF2 = 0;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStruct->SENS2 = 0;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	24000167 	.word	0x24000167

080012b8 <MS5611_ReadProm>:

void MS5611_ReadProm(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af02      	add	r7, sp, #8
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
		MS5611_tx = CMD_PROM_C0;
 80012c2:	4b8a      	ldr	r3, [pc, #552]	; (80014ec <MS5611_ReadProm+0x234>)
 80012c4:	22a0      	movs	r2, #160	; 0xa0
 80012c6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80012c8:	2364      	movs	r3, #100	; 0x64
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	4a87      	ldr	r2, [pc, #540]	; (80014ec <MS5611_ReadProm+0x234>)
 80012d0:	21ee      	movs	r1, #238	; 0xee
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f001 f852 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80012d8:	2364      	movs	r3, #100	; 0x64
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	4a84      	ldr	r2, [pc, #528]	; (80014f0 <MS5611_ReadProm+0x238>)
 80012e0:	21ee      	movs	r1, #238	; 0xee
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f001 f93e 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[0] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80012e8:	4b81      	ldr	r3, [pc, #516]	; (80014f0 <MS5611_ReadProm+0x238>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <MS5611_ReadProm+0x238>)
 80012f2:	785b      	ldrb	r3, [r3, #1]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 8001300:	200a      	movs	r0, #10
 8001302:	f000 fcd9 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C1;
 8001306:	4b79      	ldr	r3, [pc, #484]	; (80014ec <MS5611_ReadProm+0x234>)
 8001308:	22a2      	movs	r2, #162	; 0xa2
 800130a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 800130c:	2364      	movs	r3, #100	; 0x64
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2301      	movs	r3, #1
 8001312:	4a76      	ldr	r2, [pc, #472]	; (80014ec <MS5611_ReadProm+0x234>)
 8001314:	21ee      	movs	r1, #238	; 0xee
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f001 f830 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2302      	movs	r3, #2
 8001322:	4a73      	ldr	r2, [pc, #460]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001324:	21ee      	movs	r1, #238	; 0xee
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f001 f91c 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[1] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 800132c:	4b70      	ldr	r3, [pc, #448]	; (80014f0 <MS5611_ReadProm+0x238>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b6e      	ldr	r3, [pc, #440]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001336:	785b      	ldrb	r3, [r3, #1]
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29a      	uxth	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	805a      	strh	r2, [r3, #2]
		HAL_Delay(10);
 8001344:	200a      	movs	r0, #10
 8001346:	f000 fcb7 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C2;
 800134a:	4b68      	ldr	r3, [pc, #416]	; (80014ec <MS5611_ReadProm+0x234>)
 800134c:	22a4      	movs	r2, #164	; 0xa4
 800134e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001350:	2364      	movs	r3, #100	; 0x64
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2301      	movs	r3, #1
 8001356:	4a65      	ldr	r2, [pc, #404]	; (80014ec <MS5611_ReadProm+0x234>)
 8001358:	21ee      	movs	r1, #238	; 0xee
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f001 f80e 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001360:	2364      	movs	r3, #100	; 0x64
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2302      	movs	r3, #2
 8001366:	4a62      	ldr	r2, [pc, #392]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001368:	21ee      	movs	r1, #238	; 0xee
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f001 f8fa 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[2] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001370:	4b5f      	ldr	r3, [pc, #380]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <MS5611_ReadProm+0x238>)
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21b      	sxth	r3, r3
 8001382:	b29a      	uxth	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8001388:	200a      	movs	r0, #10
 800138a:	f000 fc95 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C3;
 800138e:	4b57      	ldr	r3, [pc, #348]	; (80014ec <MS5611_ReadProm+0x234>)
 8001390:	22a6      	movs	r2, #166	; 0xa6
 8001392:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001394:	2364      	movs	r3, #100	; 0x64
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2301      	movs	r3, #1
 800139a:	4a54      	ldr	r2, [pc, #336]	; (80014ec <MS5611_ReadProm+0x234>)
 800139c:	21ee      	movs	r1, #238	; 0xee
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 ffec 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80013a4:	2364      	movs	r3, #100	; 0x64
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2302      	movs	r3, #2
 80013aa:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <MS5611_ReadProm+0x238>)
 80013ac:	21ee      	movs	r1, #238	; 0xee
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f001 f8d8 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[3] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80013b4:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <MS5611_ReadProm+0x238>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <MS5611_ReadProm+0x238>)
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	b21b      	sxth	r3, r3
 80013c2:	4313      	orrs	r3, r2
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	80da      	strh	r2, [r3, #6]
		HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 fc73 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C4;
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <MS5611_ReadProm+0x234>)
 80013d4:	22a8      	movs	r2, #168	; 0xa8
 80013d6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	4a43      	ldr	r2, [pc, #268]	; (80014ec <MS5611_ReadProm+0x234>)
 80013e0:	21ee      	movs	r1, #238	; 0xee
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 ffca 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2302      	movs	r3, #2
 80013ee:	4a40      	ldr	r2, [pc, #256]	; (80014f0 <MS5611_ReadProm+0x238>)
 80013f0:	21ee      	movs	r1, #238	; 0xee
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f001 f8b6 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[4] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MS5611_ReadProm+0x238>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b3b      	ldr	r3, [pc, #236]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001402:	785b      	ldrb	r3, [r3, #1]
 8001404:	b21b      	sxth	r3, r3
 8001406:	4313      	orrs	r3, r2
 8001408:	b21b      	sxth	r3, r3
 800140a:	b29a      	uxth	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	811a      	strh	r2, [r3, #8]
		HAL_Delay(10);
 8001410:	200a      	movs	r0, #10
 8001412:	f000 fc51 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C5;
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <MS5611_ReadProm+0x234>)
 8001418:	22aa      	movs	r2, #170	; 0xaa
 800141a:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <MS5611_ReadProm+0x234>)
 8001424:	21ee      	movs	r1, #238	; 0xee
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 ffa8 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2302      	movs	r3, #2
 8001432:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001434:	21ee      	movs	r1, #238	; 0xee
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 f894 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[5] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <MS5611_ReadProm+0x238>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	b21b      	sxth	r3, r3
 800144a:	4313      	orrs	r3, r2
 800144c:	b21b      	sxth	r3, r3
 800144e:	b29a      	uxth	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	815a      	strh	r2, [r3, #10]
		HAL_Delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f000 fc2f 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C6;
 800145a:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MS5611_ReadProm+0x234>)
 800145c:	22ac      	movs	r2, #172	; 0xac
 800145e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <MS5611_ReadProm+0x234>)
 8001468:	21ee      	movs	r1, #238	; 0xee
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 ff86 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001470:	2364      	movs	r3, #100	; 0x64
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2302      	movs	r3, #2
 8001476:	4a1e      	ldr	r2, [pc, #120]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001478:	21ee      	movs	r1, #238	; 0xee
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f001 f872 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[6] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MS5611_ReadProm+0x238>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	b21a      	sxth	r2, r3
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <MS5611_ReadProm+0x238>)
 800148a:	785b      	ldrb	r3, [r3, #1]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21b      	sxth	r3, r3
 8001492:	b29a      	uxth	r2, r3
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	819a      	strh	r2, [r3, #12]
		HAL_Delay(10);
 8001498:	200a      	movs	r0, #10
 800149a:	f000 fc0d 	bl	8001cb8 <HAL_Delay>

		MS5611_tx = CMD_PROM_C7;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <MS5611_ReadProm+0x234>)
 80014a0:	22ae      	movs	r2, #174	; 0xae
 80014a2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80014a4:	2364      	movs	r3, #100	; 0x64
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2301      	movs	r3, #1
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <MS5611_ReadProm+0x234>)
 80014ac:	21ee      	movs	r1, #238	; 0xee
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 ff64 	bl	800237c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80014b4:	2364      	movs	r3, #100	; 0x64
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2302      	movs	r3, #2
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <MS5611_ReadProm+0x238>)
 80014bc:	21ee      	movs	r1, #238	; 0xee
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f001 f850 	bl	8002564 <HAL_I2C_Master_Receive>
		DataStruct->C[7] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80014c4:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <MS5611_ReadProm+0x238>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <MS5611_ReadProm+0x238>)
 80014ce:	785b      	ldrb	r3, [r3, #1]
 80014d0:	b21b      	sxth	r3, r3
 80014d2:	4313      	orrs	r3, r2
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	81da      	strh	r2, [r3, #14]
		HAL_Delay(10);
 80014dc:	200a      	movs	r0, #10
 80014de:	f000 fbeb 	bl	8001cb8 <HAL_Delay>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24000167 	.word	0x24000167
 80014f0:	24000154 	.word	0x24000154

080014f4 <MS5611_RequestTemperature>:


void MS5611_RequestTemperature(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af02      	add	r7, sp, #8
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = TEMP_OSR_256 + (2 * osr);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	3328      	adds	r3, #40	; 0x28
 8001504:	b2db      	uxtb	r3, r3
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <MS5611_RequestTemperature+0x34>)
 800150c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR <<1, &MS5611_tx, 1, 100);
 800150e:	2364      	movs	r3, #100	; 0x64
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <MS5611_RequestTemperature+0x34>)
 8001516:	21ee      	movs	r1, #238	; 0xee
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 ff2f 	bl	800237c <HAL_I2C_Master_Transmit>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24000167 	.word	0x24000167

0800152c <MS5611_RequestPressure>:

void MS5611_RequestPressure(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af02      	add	r7, sp, #8
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = PRESSURE_OSR_256 + (2 * osr);
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	3320      	adds	r3, #32
 800153c:	b2db      	uxtb	r3, r3
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MS5611_RequestPressure+0x34>)
 8001544:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001546:	2364      	movs	r3, #100	; 0x64
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2301      	movs	r3, #1
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <MS5611_RequestPressure+0x34>)
 800154e:	21ee      	movs	r1, #238	; 0xee
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 ff13 	bl	800237c <HAL_I2C_Master_Transmit>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000167 	.word	0x24000167

08001564 <MS5611_ReadTemperature>:

void MS5611_ReadTemperature(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MS5611_ReadTemperature+0x54>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001574:	2364      	movs	r3, #100	; 0x64
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <MS5611_ReadTemperature+0x54>)
 800157c:	21ee      	movs	r1, #238	; 0xee
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fefc 	bl	800237c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_temp, 3, 100);
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2303      	movs	r3, #3
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <MS5611_ReadTemperature+0x58>)
 800158c:	21ef      	movs	r1, #239	; 0xef
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 ffe8 	bl	8002564 <HAL_I2C_Master_Receive>
//	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1 , 0x00, 1, MS5611_rx_temp, 3, 100);

	DataStruct->DigitalTemperature_D2 = (MS5611_rx_temp[0] << 16) | (MS5611_rx_temp[1] << 8) | MS5611_rx_temp[2];
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MS5611_ReadTemperature+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MS5611_ReadTemperature+0x58>)
 800159c:	785b      	ldrb	r3, [r3, #1]
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	4313      	orrs	r3, r2
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <MS5611_ReadTemperature+0x58>)
 80015a4:	7892      	ldrb	r2, [r2, #2]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	461a      	mov	r2, r3
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	615a      	str	r2, [r3, #20]
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	24000167 	.word	0x24000167
 80015bc:	24000160 	.word	0x24000160

080015c0 <MS5611_ReadPressure>:

void MS5611_ReadPressure(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MS5611_ReadPressure+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <MS5611_ReadPressure+0x54>)
 80015d8:	21ee      	movs	r1, #238	; 0xee
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fece 	bl	800237c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_press, 3, 100);
 80015e0:	2364      	movs	r3, #100	; 0x64
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2303      	movs	r3, #3
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <MS5611_ReadPressure+0x58>)
 80015e8:	21ef      	movs	r1, #239	; 0xef
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 ffba 	bl	8002564 <HAL_I2C_Master_Receive>
	//HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1, 0x00, 1, MS5611_rx_press, 3, 100);

	DataStruct->DigitalPressure_D1 = MS5611_rx_press[0] << 16 | MS5611_rx_press[1] << 8 | MS5611_rx_press[2];
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MS5611_ReadPressure+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MS5611_ReadPressure+0x58>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4313      	orrs	r3, r2
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <MS5611_ReadPressure+0x58>)
 8001600:	7892      	ldrb	r2, [r2, #2]
 8001602:	4313      	orrs	r3, r2
 8001604:	461a      	mov	r2, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	611a      	str	r2, [r3, #16]
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	24000167 	.word	0x24000167
 8001618:	24000164 	.word	0x24000164

0800161c <MS5611_CalculateTemperature>:

void MS5611_CalculateTemperature(MS5611_t *DataStruct)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	DataStruct->dT = DataStruct->C[5];
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	895b      	ldrh	r3, [r3, #10]
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
	DataStruct->dT <<= 8; //Calculated up to C5 * 2^8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	021a      	lsls	r2, r3, #8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]
	DataStruct->dT *= -1; //Apply negative sign
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	425a      	negs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	619a      	str	r2, [r3, #24]
	DataStruct->dT += DataStruct->DigitalTemperature_D2; // = D2 - C5 * 2^8
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4413      	add	r3, r2
 800164e:	461a      	mov	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]

	DataStruct->TEMP = DataStruct->dT * DataStruct->C[6];
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	8992      	ldrh	r2, [r2, #12]
 800165c:	fb03 f202 	mul.w	r2, r3, r2
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	15da      	asrs	r2, r3, #23
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP += 2000;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	61da      	str	r2, [r3, #28]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <MS5611_CalculatePressure>:

void MS5611_CalculatePressure(MS5611_t *DataStruct)
{
 8001688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800168c:	ed2d 8b02 	vpush	{d8}
 8001690:	b08c      	sub	sp, #48	; 0x30
 8001692:	af00      	add	r7, sp, #0
 8001694:	62f8      	str	r0, [r7, #44]	; 0x2c
	DataStruct->OFF = DataStruct->C[2];
 8001696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001698:	889b      	ldrh	r3, [r3, #4]
 800169a:	b29b      	uxth	r3, r3
 800169c:	2200      	movs	r2, #0
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	61fa      	str	r2, [r7, #28]
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80016a8:	e9c3 1208 	strd	r1, r2, [r3, #32]
	DataStruct->OFF <<= 16; //Calculated up to C2 * 2^16
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	0419      	lsls	r1, r3, #16
 80016bc:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80016c0:	0410      	lsls	r0, r2, #16
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	e9c3 0108 	strd	r0, r1, [r3, #32]
	DataStruct->OFF += (DataStruct->C[4] * DataStruct->dT) >> 7;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80016ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d0:	891b      	ldrh	r3, [r3, #8]
 80016d2:	461a      	mov	r2, r3
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	11db      	asrs	r3, r3, #7
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	623b      	str	r3, [r7, #32]
 80016e2:	627a      	str	r2, [r7, #36]	; 0x24
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	18c3      	adds	r3, r0, r3
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	eb41 0303 	adc.w	r3, r1, r3
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016f8:	e9c3 1208 	strd	r1, r2, [r3, #32]


	DataStruct->SENS = DataStruct->C[1];
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	885b      	ldrh	r3, [r3, #2]
 8001700:	b29b      	uxth	r3, r3
 8001702:	2200      	movs	r2, #0
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	60fa      	str	r2, [r7, #12]
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800170e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
	DataStruct->SENS <<= 15; // Calculated up to C1 * 2^15
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	03cb      	lsls	r3, r1, #15
 8001722:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 8001726:	03c2      	lsls	r2, r0, #15
 8001728:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800172a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->SENS += (DataStruct->C[3] * DataStruct->dT) >>8;
 800172e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001730:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001736:	88c9      	ldrh	r1, [r1, #6]
 8001738:	4608      	mov	r0, r1
 800173a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800173c:	6989      	ldr	r1, [r1, #24]
 800173e:	fb00 f101 	mul.w	r1, r0, r1
 8001742:	1209      	asrs	r1, r1, #8
 8001744:	17c8      	asrs	r0, r1, #31
 8001746:	468a      	mov	sl, r1
 8001748:	4683      	mov	fp, r0
 800174a:	eb12 010a 	adds.w	r1, r2, sl
 800174e:	6039      	str	r1, [r7, #0]
 8001750:	eb43 030b 	adc.w	r3, r3, fp
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	e9d7 1200 	ldrd	r1, r2, [r7]
 800175c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	DataStruct->P = ((DataStruct->DigitalPressure_D1 * DataStruct->SENS) / pow(2, 21) - DataStruct->OFF) / pow(2, 15);
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2200      	movs	r2, #0
 8001766:	4698      	mov	r8, r3
 8001768:	4691      	mov	r9, r2
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001770:	fb02 f009 	mul.w	r0, r2, r9
 8001774:	fb08 f103 	mul.w	r1, r8, r3
 8001778:	4401      	add	r1, r0
 800177a:	fba8 4502 	umull	r4, r5, r8, r2
 800177e:	194b      	adds	r3, r1, r5
 8001780:	461d      	mov	r5, r3
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff41 	bl	800060c <__aeabi_l2d>
 800178a:	ec41 0b16 	vmov	d6, r0, r1
 800178e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80017d0 <MS5611_CalculatePressure+0x148>
 8001792:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7fe ff34 	bl	800060c <__aeabi_l2d>
 80017a4:	ec41 0b17 	vmov	d7, r0, r1
 80017a8:	ee38 6b47 	vsub.f64	d6, d8, d7
 80017ac:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80017d8 <MS5611_CalculatePressure+0x150>
 80017b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80017c0:	bf00      	nop
 80017c2:	3730      	adds	r7, #48	; 0x30
 80017c4:	46bd      	mov	sp, r7
 80017c6:	ecbd 8b02 	vpop	{d8}
 80017ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ce:	bf00      	nop
 80017d0:	00000000 	.word	0x00000000
 80017d4:	41400000 	.word	0x41400000
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40e00000 	.word	0x40e00000

080017e0 <softTimerRegisterCallback>:

void softTimerFunctionEvent(void);



TimerId softTimerRegisterCallback( void (*ptr)(void), uint16_t time){
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]

	if(time==0)
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d102      	bne.n	80017f8 <softTimerRegisterCallback+0x18>
		time=1000;
 80017f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f6:	807b      	strh	r3, [r7, #2]

	timerTab[timerCnt].time=time;
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <softTimerRegisterCallback+0x80>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4619      	mov	r1, r3
 80017fe:	4a19      	ldr	r2, [pc, #100]	; (8001864 <softTimerRegisterCallback+0x84>)
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	3302      	adds	r3, #2
 800180c:	887a      	ldrh	r2, [r7, #2]
 800180e:	801a      	strh	r2, [r3, #0]
	timerTab[timerCnt].state =timerSTOP;
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <softTimerRegisterCallback+0x80>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	4a13      	ldr	r2, [pc, #76]	; (8001864 <softTimerRegisterCallback+0x84>)
 8001818:	460b      	mov	r3, r1
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	440b      	add	r3, r1
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	3301      	adds	r3, #1
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
	timerTab[timerCnt].ptr = ptr;
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <softTimerRegisterCallback+0x80>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <softTimerRegisterCallback+0x84>)
 8001830:	460b      	mov	r3, r1
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	440b      	add	r3, r1
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3308      	adds	r3, #8
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]

	timerCnt++;
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <softTimerRegisterCallback+0x80>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <softTimerRegisterCallback+0x80>)
 800184a:	701a      	strb	r2, [r3, #0]
	return timerCnt-1;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <softTimerRegisterCallback+0x80>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b01      	subs	r3, #1
 8001852:	b2db      	uxtb	r3, r3
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	24000430 	.word	0x24000430
 8001864:	240001b0 	.word	0x240001b0

08001868 <softTimerChangeState>:

void softTimerChangeState(TimerId timerID, uint8_t newState){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
	if(timerID>=MAX_TIMERS_NUMBER) return;
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b1f      	cmp	r3, #31
 800187c:	d82d      	bhi.n	80018da <softTimerChangeState+0x72>

	if(newState==timerRUN && timerTab[timerID].state==timerSTOP ) timerTab[timerID].counter=timerTab[timerID].time;
 800187e:	79bb      	ldrb	r3, [r7, #6]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d11f      	bne.n	80018c4 <softTimerChangeState+0x5c>
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	4918      	ldr	r1, [pc, #96]	; (80018e8 <softTimerChangeState+0x80>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	440b      	add	r3, r1
 8001892:	3301      	adds	r3, #1
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d113      	bne.n	80018c4 <softTimerChangeState+0x5c>
 800189c:	79f9      	ldrb	r1, [r7, #7]
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <softTimerChangeState+0x80>)
 80018a2:	460b      	mov	r3, r1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	440b      	add	r3, r1
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4403      	add	r3, r0
 80018ac:	3302      	adds	r3, #2
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	b298      	uxth	r0, r3
 80018b2:	490d      	ldr	r1, [pc, #52]	; (80018e8 <softTimerChangeState+0x80>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3304      	adds	r3, #4
 80018c0:	4602      	mov	r2, r0
 80018c2:	801a      	strh	r2, [r3, #0]
	timerTab[timerID].state=newState;
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	4908      	ldr	r1, [pc, #32]	; (80018e8 <softTimerChangeState+0x80>)
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	3301      	adds	r3, #1
 80018d4:	79ba      	ldrb	r2, [r7, #6]
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	e000      	b.n	80018dc <softTimerChangeState+0x74>
	if(timerID>=MAX_TIMERS_NUMBER) return;
 80018da:	bf00      	nop

}
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	240001b0 	.word	0x240001b0

080018ec <softTimerRefresh>:

void softTimerRefresh(TimerId timerID){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	if(timerID>=MAX_TIMERS_NUMBER) return;
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b1f      	cmp	r3, #31
 80018fa:	d814      	bhi.n	8001926 <softTimerRefresh+0x3a>

	timerTab[timerID].counter=timerTab[timerID].time;
 80018fc:	79f9      	ldrb	r1, [r7, #7]
 80018fe:	79fa      	ldrb	r2, [r7, #7]
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <softTimerRefresh+0x48>)
 8001902:	460b      	mov	r3, r1
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	440b      	add	r3, r1
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4403      	add	r3, r0
 800190c:	3302      	adds	r3, #2
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	b298      	uxth	r0, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <softTimerRefresh+0x48>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3304      	adds	r3, #4
 8001920:	4602      	mov	r2, r0
 8001922:	801a      	strh	r2, [r3, #0]
 8001924:	e000      	b.n	8001928 <softTimerRefresh+0x3c>
	if(timerID>=MAX_TIMERS_NUMBER) return;
 8001926:	bf00      	nop

}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	240001b0 	.word	0x240001b0

08001938 <softTimerEvent>:

void softTimerEvent(void){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<timerCnt; i++){
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e028      	b.n	8001996 <softTimerEvent+0x5e>

		if(timerTab[i].state==timerRUN && timerTab[i].counter==0){
 8001944:	79fa      	ldrb	r2, [r7, #7]
 8001946:	4919      	ldr	r1, [pc, #100]	; (80019ac <softTimerEvent+0x74>)
 8001948:	4613      	mov	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3301      	adds	r3, #1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d119      	bne.n	8001990 <softTimerEvent+0x58>
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4913      	ldr	r1, [pc, #76]	; (80019ac <softTimerEvent+0x74>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3304      	adds	r3, #4
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <softTimerEvent+0x58>
			timerTab[i].ptr();
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <softTimerEvent+0x74>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	3308      	adds	r3, #8
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4798      	blx	r3
			softTimerRefresh(i);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ffae 	bl	80018ec <softTimerRefresh>
	for(uint8_t i=0; i<timerCnt; i++){
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	3301      	adds	r3, #1
 8001994:	71fb      	strb	r3, [r7, #7]
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <softTimerEvent+0x78>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3d1      	bcc.n	8001944 <softTimerEvent+0xc>

		}
	}

	softTimerFunctionEvent();
 80019a0:	f000 f8ac 	bl	8001afc <softTimerFunctionEvent>

}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	240001b0 	.word	0x240001b0
 80019b0:	24000430 	.word	0x24000430

080019b4 <softTimerTick>:

void softTimerTick(void){
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<timerCnt; i++){
 80019ba:	2300      	movs	r3, #0
 80019bc:	71fb      	strb	r3, [r7, #7]
 80019be:	e02f      	b.n	8001a20 <softTimerTick+0x6c>
		if(timerTab[i].state==timerRUN && timerTab[i].counter) timerTab[i].counter--;
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	4930      	ldr	r1, [pc, #192]	; (8001a84 <softTimerTick+0xd0>)
 80019c4:	4613      	mov	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	440b      	add	r3, r1
 80019ce:	3301      	adds	r3, #1
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d120      	bne.n	8001a1a <softTimerTick+0x66>
 80019d8:	79fa      	ldrb	r2, [r7, #7]
 80019da:	492a      	ldr	r1, [pc, #168]	; (8001a84 <softTimerTick+0xd0>)
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3304      	adds	r3, #4
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d014      	beq.n	8001a1a <softTimerTick+0x66>
 80019f0:	79fa      	ldrb	r2, [r7, #7]
 80019f2:	4924      	ldr	r1, [pc, #144]	; (8001a84 <softTimerTick+0xd0>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	3304      	adds	r3, #4
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b298      	uxth	r0, r3
 8001a08:	491e      	ldr	r1, [pc, #120]	; (8001a84 <softTimerTick+0xd0>)
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	4413      	add	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3304      	adds	r3, #4
 8001a16:	4602      	mov	r2, r0
 8001a18:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<timerCnt; i++){
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <softTimerTick+0xd4>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	79fa      	ldrb	r2, [r7, #7]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d3ca      	bcc.n	80019c0 <softTimerTick+0xc>
	}

	for(uint8_t i=0; i<functionDelayCnt;i++)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71bb      	strb	r3, [r7, #6]
 8001a2e:	e013      	b.n	8001a58 <softTimerTick+0xa4>
		if(functionDelayTab[i].time) functionDelayTab[i].time--;
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <softTimerTick+0xd8>)
 8001a34:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <softTimerTick+0x9e>
 8001a3e:	79bb      	ldrb	r3, [r7, #6]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <softTimerTick+0xd8>)
 8001a42:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8001a46:	b292      	uxth	r2, r2
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	b291      	uxth	r1, r2
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <softTimerTick+0xd8>)
 8001a4e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
	for(uint8_t i=0; i<functionDelayCnt;i++)
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	3301      	adds	r3, #1
 8001a56:	71bb      	strb	r3, [r7, #6]
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <softTimerTick+0xdc>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	79ba      	ldrb	r2, [r7, #6]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3e6      	bcc.n	8001a30 <softTimerTick+0x7c>

	if(oneTimeTimer)oneTimeTimer--;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <softTimerTick+0xe0>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d005      	beq.n	8001a76 <softTimerTick+0xc2>
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <softTimerTick+0xe0>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <softTimerTick+0xe0>)
 8001a74:	801a      	strh	r2, [r3, #0]

}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	240001b0 	.word	0x240001b0
 8001a88:	24000430 	.word	0x24000430
 8001a8c:	24000330 	.word	0x24000330
 8001a90:	24000431 	.word	0x24000431
 8001a94:	24000432 	.word	0x24000432

08001a98 <softTimerFunctionExeAndRemove>:
	if(!oneTimeTimer) return 1;
//	if(mainEvents)gloabalEvents();	//TODO

	return 0;
}
void softTimerFunctionExeAndRemove(uint8_t Id){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]

	functionDelayTab[Id].ptr();
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4a13      	ldr	r2, [pc, #76]	; (8001af4 <softTimerFunctionExeAndRemove+0x5c>)
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4798      	blx	r3
	for(uint8_t i=(Id+1); i<functionDelayCnt;i++){
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	e00f      	b.n	8001ad6 <softTimerFunctionExeAndRemove+0x3e>

		functionDelayTab[i-1]=functionDelayTab[i];
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <softTimerFunctionExeAndRemove+0x5c>)
 8001abe:	490d      	ldr	r1, [pc, #52]	; (8001af4 <softTimerFunctionExeAndRemove+0x5c>)
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4403      	add	r3, r0
 8001ac4:	00d2      	lsls	r2, r2, #3
 8001ac6:	440a      	add	r2, r1
 8001ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001acc:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint8_t i=(Id+1); i<functionDelayCnt;i++){
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <softTimerFunctionExeAndRemove+0x60>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3ea      	bcc.n	8001ab6 <softTimerFunctionExeAndRemove+0x1e>

	}
	functionDelayCnt--;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <softTimerFunctionExeAndRemove+0x60>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <softTimerFunctionExeAndRemove+0x60>)
 8001aea:	701a      	strb	r2, [r3, #0]

}
 8001aec:	bf00      	nop
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	24000330 	.word	0x24000330
 8001af8:	24000431 	.word	0x24000431

08001afc <softTimerFunctionEvent>:
void softTimerFunctionEvent(void){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

	for(uint8_t i=0; i<functionDelayCnt;i++){
 8001b02:	2300      	movs	r3, #0
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	e00d      	b.n	8001b24 <softTimerFunctionEvent+0x28>

		if(functionDelayTab[i].time==0) softTimerFunctionExeAndRemove(i);
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <softTimerFunctionEvent+0x3c>)
 8001b0c:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <softTimerFunctionEvent+0x22>
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ffbd 	bl	8001a98 <softTimerFunctionExeAndRemove>
	for(uint8_t i=0; i<functionDelayCnt;i++){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	3301      	adds	r3, #1
 8001b22:	71fb      	strb	r3, [r7, #7]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <softTimerFunctionEvent+0x40>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d3ec      	bcc.n	8001b08 <softTimerFunctionEvent+0xc>

	}

}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	24000330 	.word	0x24000330
 8001b3c:	24000431 	.word	0x24000431

08001b40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b44:	f7ff fa64 	bl	8001010 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b6e:	f004 fd8b 	bl	8006688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b72:	f7ff f945 	bl	8000e00 <main>
  bx  lr
 8001b76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001b7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b80:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001b84:	08006740 	.word	0x08006740
  ldr r2, =_sbss
 8001b88:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001b8c:	24000438 	.word	0x24000438

08001b90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC_IRQHandler>
	...

08001b94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	f000 f962 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001ba0:	f001 fefa 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_Init+0x68>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	0a1b      	lsrs	r3, r3, #8
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	4913      	ldr	r1, [pc, #76]	; (8001c00 <HAL_Init+0x6c>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_Init+0x68>)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	; (8001c00 <HAL_Init+0x6c>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	; (8001c04 <HAL_Init+0x70>)
 8001bd6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	; (8001c08 <HAL_Init+0x74>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f814 	bl	8001c0c <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e002      	b.n	8001bf4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bee:	f7ff f9c9 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	080066f8 	.word	0x080066f8
 8001c04:	24000004 	.word	0x24000004
 8001c08:	24000000 	.word	0x24000000

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_InitTick+0x60>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e021      	b.n	8001c64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <HAL_InitTick+0x64>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_InitTick+0x60>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f939 	bl	8001eae <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f911 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x68>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	2400000c 	.word	0x2400000c
 8001c70:	24000000 	.word	0x24000000
 8001c74:	24000008 	.word	0x24000008

08001c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_IncTick+0x20>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x24>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a04      	ldr	r2, [pc, #16]	; (8001c9c <HAL_IncTick+0x24>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	2400000c 	.word	0x2400000c
 8001c9c:	24000434 	.word	0x24000434

08001ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <HAL_GetTick+0x14>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	24000434 	.word	0x24000434

08001cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ffee 	bl	8001ca0 <HAL_GetTick>
 8001cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd0:	d005      	beq.n	8001cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_Delay+0x44>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4413      	add	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cde:	bf00      	nop
 8001ce0:	f7ff ffde 	bl	8001ca0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d8f7      	bhi.n	8001ce0 <HAL_Delay+0x28>
  {
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2400000c 	.word	0x2400000c

08001d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <__NVIC_SetPriorityGrouping+0x40>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	05fa0000 	.word	0x05fa0000

08001d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d4c:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_GetPriorityGrouping+0x18>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	f003 0307 	and.w	r3, r3, #7
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff8e 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff47 	bl	8001d00 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff5e 	bl	8001d48 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffb2 	bl	8001e20 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <HAL_GPIO_Init+0x234>)
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eda:	e194      	b.n	8002206 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8186 	beq.w	8002200 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_GPIO_Init+0x44>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d130      	bne.n	8001f6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d017      	beq.n	8001faa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	69b9      	ldr	r1, [r7, #24]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80e0 	beq.w	8002200 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_GPIO_Init+0x238>)
 8002042:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002046:	4a2e      	ldr	r2, [pc, #184]	; (8002100 <HAL_GPIO_Init+0x238>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_GPIO_Init+0x238>)
 8002052:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a29      	ldr	r2, [pc, #164]	; (8002104 <HAL_GPIO_Init+0x23c>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a20      	ldr	r2, [pc, #128]	; (8002108 <HAL_GPIO_Init+0x240>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d052      	beq.n	8002130 <HAL_GPIO_Init+0x268>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1f      	ldr	r2, [pc, #124]	; (800210c <HAL_GPIO_Init+0x244>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d031      	beq.n	80020f6 <HAL_GPIO_Init+0x22e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <HAL_GPIO_Init+0x248>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d02b      	beq.n	80020f2 <HAL_GPIO_Init+0x22a>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_GPIO_Init+0x24c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d025      	beq.n	80020ee <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_GPIO_Init+0x250>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d01f      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_GPIO_Init+0x254>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d019      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x258>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a19      	ldr	r2, [pc, #100]	; (8002124 <HAL_GPIO_Init+0x25c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00d      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a18      	ldr	r2, [pc, #96]	; (8002128 <HAL_GPIO_Init+0x260>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a17      	ldr	r2, [pc, #92]	; (800212c <HAL_GPIO_Init+0x264>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020d2:	2309      	movs	r3, #9
 80020d4:	e02d      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020d6:	230a      	movs	r3, #10
 80020d8:	e02b      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020da:	2308      	movs	r3, #8
 80020dc:	e029      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020de:	2307      	movs	r3, #7
 80020e0:	e027      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e025      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e023      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e021      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e01f      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e01d      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e01b      	b.n	8002132 <HAL_GPIO_Init+0x26a>
 80020fa:	bf00      	nop
 80020fc:	58000080 	.word	0x58000080
 8002100:	58024400 	.word	0x58024400
 8002104:	58000400 	.word	0x58000400
 8002108:	58020000 	.word	0x58020000
 800210c:	58020400 	.word	0x58020400
 8002110:	58020800 	.word	0x58020800
 8002114:	58020c00 	.word	0x58020c00
 8002118:	58021000 	.word	0x58021000
 800211c:	58021400 	.word	0x58021400
 8002120:	58021800 	.word	0x58021800
 8002124:	58021c00 	.word	0x58021c00
 8002128:	58022000 	.word	0x58022000
 800212c:	58022400 	.word	0x58022400
 8002130:	2300      	movs	r3, #0
 8002132:	69fa      	ldr	r2, [r7, #28]
 8002134:	f002 0203 	and.w	r2, r2, #3
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	4093      	lsls	r3, r2
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002142:	4938      	ldr	r1, [pc, #224]	; (8002224 <HAL_GPIO_Init+0x35c>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	3301      	adds	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	f47f ae63 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3724      	adds	r7, #36	; 0x24
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	58000400 	.word	0x58000400

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e07f      	b.n	800236e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fd0c 	bl	8000ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e006      	b.n	80022e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d104      	bne.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <HAL_I2C_Init+0x11c>)
 8002302:	430b      	orrs	r3, r1
 8002304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69d9      	ldr	r1, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1a      	ldr	r2, [r3, #32]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	02008000 	.word	0x02008000

0800237c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	461a      	mov	r2, r3
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
 800238c:	4613      	mov	r3, r2
 800238e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b20      	cmp	r3, #32
 800239a:	f040 80da 	bne.w	8002552 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x30>
 80023a8:	2302      	movs	r3, #2
 80023aa:	e0d3      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b4:	f7ff fc74 	bl	8001ca0 <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	2319      	movs	r3, #25
 80023c0:	2201      	movs	r2, #1
 80023c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f9e6 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0be      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	; 0x21
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2210      	movs	r2, #16
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	893a      	ldrh	r2, [r7, #8]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2bff      	cmp	r3, #255	; 0xff
 8002406:	d90e      	bls.n	8002426 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	4b51      	ldr	r3, [pc, #324]	; (800255c <HAL_I2C_Master_Transmit+0x1e0>)
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fbdc 	bl	8002bdc <I2C_TransferConfig>
 8002424:	e06c      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_I2C_Master_Transmit+0x1e0>)
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbcb 	bl	8002bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002446:	e05b      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f9e3 	bl	8002818 <I2C_WaitOnTXISFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e07b      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	781a      	ldrb	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002484:	3b01      	subs	r3, #1
 8002486:	b29a      	uxth	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d034      	beq.n	8002500 <HAL_I2C_Master_Transmit+0x184>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	2b00      	cmp	r3, #0
 800249c:	d130      	bne.n	8002500 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2200      	movs	r2, #0
 80024a6:	2180      	movs	r1, #128	; 0x80
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f975 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e04d      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2bff      	cmp	r3, #255	; 0xff
 80024c0:	d90e      	bls.n	80024e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	22ff      	movs	r2, #255	; 0xff
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	8979      	ldrh	r1, [r7, #10]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fb7f 	bl	8002bdc <I2C_TransferConfig>
 80024de:	e00f      	b.n	8002500 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	8979      	ldrh	r1, [r7, #10]
 80024f2:	2300      	movs	r3, #0
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 fb6e 	bl	8002bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d19e      	bne.n	8002448 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	6a39      	ldr	r1, [r7, #32]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 f9c2 	bl	8002898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e01a      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2220      	movs	r2, #32
 8002524:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_I2C_Master_Transmit+0x1e4>)
 8002532:	400b      	ands	r3, r1
 8002534:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2220      	movs	r2, #32
 800253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	80002000 	.word	0x80002000
 8002560:	fe00e800 	.word	0xfe00e800

08002564 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
 8002574:	4613      	mov	r3, r2
 8002576:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b20      	cmp	r3, #32
 8002582:	f040 80db 	bne.w	800273c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_I2C_Master_Receive+0x30>
 8002590:	2302      	movs	r3, #2
 8002592:	e0d4      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800259c:	f7ff fb80 	bl	8001ca0 <HAL_GetTick>
 80025a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2319      	movs	r3, #25
 80025a8:	2201      	movs	r2, #1
 80025aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f8f2 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0bf      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2222      	movs	r2, #34	; 0x22
 80025c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2210      	movs	r2, #16
 80025ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2bff      	cmp	r3, #255	; 0xff
 80025ee:	d90e      	bls.n	800260e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	22ff      	movs	r2, #255	; 0xff
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	8979      	ldrh	r1, [r7, #10]
 80025fe:	4b52      	ldr	r3, [pc, #328]	; (8002748 <HAL_I2C_Master_Receive+0x1e4>)
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fae8 	bl	8002bdc <I2C_TransferConfig>
 800260c:	e06d      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	b2da      	uxtb	r2, r3
 800261e:	8979      	ldrh	r1, [r7, #10]
 8002620:	4b49      	ldr	r3, [pc, #292]	; (8002748 <HAL_I2C_Master_Receive+0x1e4>)
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 fad7 	bl	8002bdc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800262e:	e05c      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	6a39      	ldr	r1, [r7, #32]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f96b 	bl	8002910 <I2C_WaitOnRXNEFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e07c      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d034      	beq.n	80026ea <HAL_I2C_Master_Receive+0x186>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d130      	bne.n	80026ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	2200      	movs	r2, #0
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f880 	bl	8002798 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e04d      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2bff      	cmp	r3, #255	; 0xff
 80026aa:	d90e      	bls.n	80026ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	; 0xff
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	8979      	ldrh	r1, [r7, #10]
 80026ba:	2300      	movs	r3, #0
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 fa8a 	bl	8002bdc <I2C_TransferConfig>
 80026c8:	e00f      	b.n	80026ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fa79 	bl	8002bdc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d19d      	bne.n	8002630 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8cd 	bl	8002898 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e01a      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2220      	movs	r2, #32
 800270e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_I2C_Master_Receive+0x1e8>)
 800271c:	400b      	ands	r3, r1
 800271e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800273c:	2302      	movs	r3, #2
  }
}
 800273e:	4618      	mov	r0, r3
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	80002400 	.word	0x80002400
 800274c:	fe00e800 	.word	0xfe00e800

08002750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b02      	cmp	r3, #2
 8002764:	d103      	bne.n	800276e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d007      	beq.n	800278c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	619a      	str	r2, [r3, #24]
  }
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a8:	e022      	b.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d01e      	beq.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7ff fa75 	bl	8001ca0 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d113      	bne.n	80027f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00f      	b.n	8002810 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4013      	ands	r3, r2
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	429a      	cmp	r2, r3
 800280c:	d0cd      	beq.n	80027aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002824:	e02c      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f8ea 	bl	8002a04 <I2C_IsErrorOccurred>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e02a      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d01e      	beq.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002842:	f7ff fa2d 	bl	8001ca0 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	429a      	cmp	r2, r3
 8002850:	d302      	bcc.n	8002858 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	f043 0220 	orr.w	r2, r3, #32
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e007      	b.n	8002890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d1cb      	bne.n	8002826 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028a4:	e028      	b.n	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68b9      	ldr	r1, [r7, #8]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f8aa 	bl	8002a04 <I2C_IsErrorOccurred>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e026      	b.n	8002908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f9f1 	bl	8001ca0 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d113      	bne.n	80028f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e007      	b.n	8002908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b20      	cmp	r3, #32
 8002904:	d1cf      	bne.n	80028a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800291c:	e064      	b.n	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f86e 	bl	8002a04 <I2C_IsErrorOccurred>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e062      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b20      	cmp	r3, #32
 800293e:	d138      	bne.n	80029b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b04      	cmp	r3, #4
 800294c:	d105      	bne.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e04e      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b10      	cmp	r3, #16
 8002966:	d107      	bne.n	8002978 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2204      	movs	r2, #4
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
 8002976:	e002      	b.n	800297e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2220      	movs	r2, #32
 8002984:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002992:	400b      	ands	r3, r1
 8002994:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f975 	bl	8001ca0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e007      	b.n	80029f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d193      	bne.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	fe00e800 	.word	0xfe00e800

08002a04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d075      	beq.n	8002b1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a38:	e056      	b.n	8002ae8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d052      	beq.n	8002ae8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f92d 	bl	8001ca0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_IsErrorOccurred+0x54>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d147      	bne.n	8002ae8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a7a:	d12e      	bne.n	8002ada <I2C_IsErrorOccurred+0xd6>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a82:	d02a      	beq.n	8002ada <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d027      	beq.n	8002ada <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a98:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a9a:	f7ff f901 	bl	8001ca0 <HAL_GetTick>
 8002a9e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa0:	e01b      	b.n	8002ada <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aa2:	f7ff f8fd 	bl	8001ca0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b19      	cmp	r3, #25
 8002aae:	d914      	bls.n	8002ada <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d1dc      	bne.n	8002aa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b20      	cmp	r3, #32
 8002af4:	d003      	beq.n	8002afe <I2C_IsErrorOccurred+0xfa>
 8002af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d09d      	beq.n	8002a3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002afe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d103      	bne.n	8002b0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f043 0308 	orr.w	r3, r3, #8
 8002b56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01c      	beq.n	8002bcc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fddc 	bl	8002750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <I2C_IsErrorOccurred+0x1d4>)
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	fe00e800 	.word	0xfe00e800

08002bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	4613      	mov	r3, r2
 8002bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bf4:	7a7b      	ldrb	r3, [r7, #9]
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bfc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c0a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	0d5b      	lsrs	r3, r3, #21
 8002c16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c1a:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <I2C_TransferConfig+0x60>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	ea02 0103 	and.w	r1, r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c2e:	bf00      	nop
 8002c30:	371c      	adds	r7, #28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	03ff63ff 	.word	0x03ff63ff

08002c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d138      	bne.n	8002cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e032      	b.n	8002cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d139      	bne.n	8002d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e033      	b.n	8002d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2224      	movs	r2, #36	; 0x24
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e000      	b.n	8002d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
  }
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d00a      	beq.n	8002d9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e040      	b.n	8002e18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e03e      	b.n	8002e18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002da2:	491f      	ldr	r1, [pc, #124]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002daa:	f7fe ff79 	bl	8001ca0 <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002db0:	e009      	b.n	8002dc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002db2:	f7fe ff75 	bl	8001ca0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc0:	d901      	bls.n	8002dc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e028      	b.n	8002e18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dc6:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b1e      	cmp	r3, #30
 8002dd8:	d008      	beq.n	8002dec <HAL_PWREx_ConfigSupply+0x7c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8002dde:	d005      	beq.n	8002dec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b1d      	cmp	r3, #29
 8002de4:	d002      	beq.n	8002dec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b2d      	cmp	r3, #45	; 0x2d
 8002dea:	d114      	bne.n	8002e16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002dec:	f7fe ff58 	bl	8001ca0 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002df2:	e009      	b.n	8002e08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002df4:	f7fe ff54 	bl	8001ca0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e02:	d901      	bls.n	8002e08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e007      	b.n	8002e18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d1ee      	bne.n	8002df4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	58024800 	.word	0x58024800

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	; 0x30
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e3f4      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80b3 	beq.w	8002faa <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e44:	4b95      	ldr	r3, [pc, #596]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4e:	4b93      	ldr	r3, [pc, #588]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e56:	2b10      	cmp	r3, #16
 8002e58:	d007      	beq.n	8002e6a <HAL_RCC_OscConfig+0x46>
 8002e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5c:	2b18      	cmp	r3, #24
 8002e5e:	d112      	bne.n	8002e86 <HAL_RCC_OscConfig+0x62>
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d10d      	bne.n	8002e86 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6a:	4b8c      	ldr	r3, [pc, #560]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8098 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x184>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 8093 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e3cc      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x7a>
 8002e90:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a81      	ldr	r2, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d112      	bne.n	8002ecc <HAL_RCC_OscConfig+0xa8>
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b7a      	ldr	r3, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a79      	ldr	r2, [pc, #484]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002eb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b77      	ldr	r3, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ec4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e041      	b.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed4:	d112      	bne.n	8002efc <HAL_RCC_OscConfig+0xd8>
 8002ed6:	4b71      	ldr	r3, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a70      	ldr	r2, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6d      	ldr	r2, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ee8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e029      	b.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002f04:	d112      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002f06:	4b65      	ldr	r3, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a64      	ldr	r2, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a61      	ldr	r2, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e011      	b.n	8002f50 <HAL_RCC_OscConfig+0x12c>
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a57      	ldr	r2, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fea2 	bl	8001ca0 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7fe fe9e 	bl	8001ca0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e356      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x13c>
 8002f7e:	e014      	b.n	8002faa <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fe8e 	bl	8001ca0 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fe8a 	bl	8001ca0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e342      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x164>
 8002fa6:	e000      	b.n	8002faa <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 808d 	beq.w	80030d2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <HAL_RCC_OscConfig+0x1ba>
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	2b18      	cmp	r3, #24
 8002fd2:	d137      	bne.n	8003044 <HAL_RCC_OscConfig+0x220>
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d132      	bne.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e314      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ff6:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0219 	bic.w	r2, r3, #25
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4926      	ldr	r1, [pc, #152]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003008:	f7fe fe4a 	bl	8001ca0 <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fe46 	bl	8001ca0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e2fe      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	4917      	ldr	r1, [pc, #92]	; (800309c <HAL_RCC_OscConfig+0x278>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003042:	e046      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d029      	beq.n	80030a0 <HAL_RCC_OscConfig+0x27c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800304c:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_RCC_OscConfig+0x278>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 0219 	bic.w	r2, r3, #25
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4910      	ldr	r1, [pc, #64]	; (800309c <HAL_RCC_OscConfig+0x278>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe fe1f 	bl	8001ca0 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003066:	f7fe fe1b 	bl	8001ca0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e2d3      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_RCC_OscConfig+0x278>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0f0      	beq.n	8003066 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003084:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	4902      	ldr	r1, [pc, #8]	; (800309c <HAL_RCC_OscConfig+0x278>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e01b      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ae>
 800309a:	bf00      	nop
 800309c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a0:	4b97      	ldr	r3, [pc, #604]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a96      	ldr	r2, [pc, #600]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe fdf8 	bl	8001ca0 <HAL_GetTick>
 80030b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x2a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b4:	f7fe fdf4 	bl	8001ca0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2ac      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030c6:	4b8e      	ldr	r3, [pc, #568]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d06a      	beq.n	80031b4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030e8:	4b85      	ldr	r3, [pc, #532]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d007      	beq.n	8003104 <HAL_RCC_OscConfig+0x2e0>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b18      	cmp	r3, #24
 80030f8:	d11b      	bne.n	8003132 <HAL_RCC_OscConfig+0x30e>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d116      	bne.n	8003132 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003104:	4b7e      	ldr	r3, [pc, #504]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x2f8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e281      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800311c:	4b78      	ldr	r3, [pc, #480]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	061b      	lsls	r3, r3, #24
 800312a:	4975      	ldr	r1, [pc, #468]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003130:	e040      	b.n	80031b4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d023      	beq.n	8003182 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800313a:	4b71      	ldr	r3, [pc, #452]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a70      	ldr	r2, [pc, #448]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003146:	f7fe fdab 	bl	8001ca0 <HAL_GetTick>
 800314a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x33c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800314e:	f7fe fda7 	bl	8001ca0 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e25f      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003160:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800316c:	4b64      	ldr	r3, [pc, #400]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4961      	ldr	r1, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	60cb      	str	r3, [r1, #12]
 8003180:	e018      	b.n	80031b4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003182:	4b5f      	ldr	r3, [pc, #380]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318e:	f7fe fd87 	bl	8001ca0 <HAL_GetTick>
 8003192:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003196:	f7fe fd83 	bl	8001ca0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e23b      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031a8:	4b55      	ldr	r3, [pc, #340]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d036      	beq.n	800322e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d019      	beq.n	80031fc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c8:	4b4d      	ldr	r3, [pc, #308]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	4a4c      	ldr	r2, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fd64 	bl	8001ca0 <HAL_GetTick>
 80031d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031dc:	f7fe fd60 	bl	8001ca0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e218      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031ee:	4b44      	ldr	r3, [pc, #272]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80031f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0x3b8>
 80031fa:	e018      	b.n	800322e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80031fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003200:	4a3f      	ldr	r2, [pc, #252]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003202:	f023 0301 	bic.w	r3, r3, #1
 8003206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fe fd4a 	bl	8001ca0 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fe fd46 	bl	8001ca0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e1fe      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d019      	beq.n	8003276 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003242:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2e      	ldr	r2, [pc, #184]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800324e:	f7fe fd27 	bl	8001ca0 <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003256:	f7fe fd23 	bl	8001ca0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1db      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x432>
 8003274:	e018      	b.n	80032a8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a21      	ldr	r2, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800327c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003282:	f7fe fd0d 	bl	8001ca0 <HAL_GetTick>
 8003286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800328a:	f7fe fd09 	bl	8001ca0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1c1      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80af 	beq.w	8003414 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_RCC_OscConfig+0x4e0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_RCC_OscConfig+0x4e0>)
 80032bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032c2:	f7fe fced 	bl	8001ca0 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032ca:	f7fe fce9 	bl	8001ca0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b64      	cmp	r3, #100	; 0x64
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e1a1      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x4e0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10b      	bne.n	8003308 <HAL_RCC_OscConfig+0x4e4>
 80032f0:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a02      	ldr	r2, [pc, #8]	; (8003300 <HAL_RCC_OscConfig+0x4dc>)
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	e05b      	b.n	80033b6 <HAL_RCC_OscConfig+0x592>
 80032fe:	bf00      	nop
 8003300:	58024400 	.word	0x58024400
 8003304:	58024800 	.word	0x58024800
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d112      	bne.n	8003336 <HAL_RCC_OscConfig+0x512>
 8003310:	4b9d      	ldr	r3, [pc, #628]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003314:	4a9c      	ldr	r2, [pc, #624]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6713      	str	r3, [r2, #112]	; 0x70
 800331c:	4b9a      	ldr	r3, [pc, #616]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a99      	ldr	r2, [pc, #612]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	4b97      	ldr	r3, [pc, #604]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a96      	ldr	r2, [pc, #600]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800332e:	f023 0304 	bic.w	r3, r3, #4
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	e03f      	b.n	80033b6 <HAL_RCC_OscConfig+0x592>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b05      	cmp	r3, #5
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x540>
 800333e:	4b92      	ldr	r3, [pc, #584]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a91      	ldr	r2, [pc, #580]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003344:	f043 0304 	orr.w	r3, r3, #4
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	4b8f      	ldr	r3, [pc, #572]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a8e      	ldr	r2, [pc, #568]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b8c      	ldr	r3, [pc, #560]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a8b      	ldr	r2, [pc, #556]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	e028      	b.n	80033b6 <HAL_RCC_OscConfig+0x592>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b85      	cmp	r3, #133	; 0x85
 800336a:	d112      	bne.n	8003392 <HAL_RCC_OscConfig+0x56e>
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a85      	ldr	r2, [pc, #532]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003372:	f043 0304 	orr.w	r3, r3, #4
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	4a82      	ldr	r2, [pc, #520]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800337e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003382:	6713      	str	r3, [r2, #112]	; 0x70
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a7f      	ldr	r2, [pc, #508]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e011      	b.n	80033b6 <HAL_RCC_OscConfig+0x592>
 8003392:	4b7d      	ldr	r3, [pc, #500]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a7c      	ldr	r2, [pc, #496]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
 800339e:	4b7a      	ldr	r3, [pc, #488]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	4a79      	ldr	r2, [pc, #484]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	6713      	str	r3, [r2, #112]	; 0x70
 80033aa:	4b77      	ldr	r3, [pc, #476]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a76      	ldr	r2, [pc, #472]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80033b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d015      	beq.n	80033ea <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033be:	f7fe fc6f 	bl	8001ca0 <HAL_GetTick>
 80033c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033c4:	e00a      	b.n	80033dc <HAL_RCC_OscConfig+0x5b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe fc6b 	bl	8001ca0 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e121      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033dc:	4b6a      	ldr	r3, [pc, #424]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0ee      	beq.n	80033c6 <HAL_RCC_OscConfig+0x5a2>
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe fc59 	bl	8001ca0 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033f0:	e00a      	b.n	8003408 <HAL_RCC_OscConfig+0x5e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fc55 	bl	8001ca0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e10b      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003408:	4b5f      	ldr	r3, [pc, #380]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ee      	bne.n	80033f2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8100 	beq.w	800361e <HAL_RCC_OscConfig+0x7fa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800341e:	4b5a      	ldr	r3, [pc, #360]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003426:	2b18      	cmp	r3, #24
 8003428:	f000 80bb 	beq.w	80035a2 <HAL_RCC_OscConfig+0x77e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b02      	cmp	r3, #2
 8003432:	f040 8095 	bne.w	8003560 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003436:	4b54      	ldr	r3, [pc, #336]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a53      	ldr	r2, [pc, #332]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800343c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fe fc2d 	bl	8001ca0 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x638>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fc29 	bl	8001ca0 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0e1      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800345c:	4b4a      	ldr	r3, [pc, #296]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b47      	ldr	r3, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800346a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346c:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_OscConfig+0x768>)
 800346e:	4013      	ands	r3, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	430a      	orrs	r2, r1
 800347c:	4942      	ldr	r1, [pc, #264]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800347e:	4313      	orrs	r3, r2
 8003480:	628b      	str	r3, [r1, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	3b01      	subs	r3, #1
 8003488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003490:	3b01      	subs	r3, #1
 8003492:	025b      	lsls	r3, r3, #9
 8003494:	b29b      	uxth	r3, r3
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349c:	3b01      	subs	r3, #1
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034aa:	3b01      	subs	r3, #1
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034b2:	4935      	ldr	r1, [pc, #212]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034b8:	4b33      	ldr	r3, [pc, #204]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	4a32      	ldr	r2, [pc, #200]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034c4:	4b30      	ldr	r3, [pc, #192]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c8:	4b31      	ldr	r3, [pc, #196]	; (8003590 <HAL_RCC_OscConfig+0x76c>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	492d      	ldr	r1, [pc, #180]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f023 020c 	bic.w	r2, r3, #12
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	4928      	ldr	r1, [pc, #160]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034ea:	4b27      	ldr	r3, [pc, #156]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f023 0202 	bic.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4924      	ldr	r1, [pc, #144]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034fc:	4b22      	ldr	r3, [pc, #136]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b1f      	ldr	r3, [pc, #124]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	4a1e      	ldr	r2, [pc, #120]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003514:	4b1c      	ldr	r3, [pc, #112]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	4a1b      	ldr	r2, [pc, #108]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800351a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a18      	ldr	r2, [pc, #96]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800352c:	4b16      	ldr	r3, [pc, #88]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fe fbb2 	bl	8001ca0 <HAL_GetTick>
 800353c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003540:	f7fe fbae 	bl	8001ca0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e066      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x71c>
 800355e:	e05e      	b.n	800361e <HAL_RCC_OscConfig+0x7fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_RCC_OscConfig+0x764>)
 8003566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fb98 	bl	8001ca0 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003572:	e00f      	b.n	8003594 <HAL_RCC_OscConfig+0x770>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fe fb94 	bl	8001ca0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d908      	bls.n	8003594 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04c      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
 8003586:	bf00      	nop
 8003588:	58024400 	.word	0x58024400
 800358c:	fffffc0c 	.word	0xfffffc0c
 8003590:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x804>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e9      	bne.n	8003574 <HAL_RCC_OscConfig+0x750>
 80035a0:	e03d      	b.n	800361e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_RCC_OscConfig+0x804>)
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_RCC_OscConfig+0x804>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d031      	beq.n	800361a <HAL_RCC_OscConfig+0x7f6>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0203 	and.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d12a      	bne.n	800361a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	091b      	lsrs	r3, r3, #4
 80035c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d122      	bne.n	800361a <HAL_RCC_OscConfig+0x7f6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11a      	bne.n	800361a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0a5b      	lsrs	r3, r3, #9
 80035e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d111      	bne.n	800361a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	0c1b      	lsrs	r3, r3, #16
 80035fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d108      	bne.n	800361a <HAL_RCC_OscConfig+0x7f6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	0e1b      	lsrs	r3, r3, #24
 800360c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_RCC_OscConfig+0x7fc>
      }
    }
  }
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3730      	adds	r7, #48	; 0x30
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	58024400 	.word	0x58024400

0800362c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e19c      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003640:	4b8a      	ldr	r3, [pc, #552]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d910      	bls.n	8003670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364e:	4b87      	ldr	r3, [pc, #540]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 020f 	bic.w	r2, r3, #15
 8003656:	4985      	ldr	r1, [pc, #532]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e184      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800368c:	4b78      	ldr	r3, [pc, #480]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4975      	ldr	r1, [pc, #468]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d010      	beq.n	80036cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	4b70      	ldr	r3, [pc, #448]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d908      	bls.n	80036cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ba:	4b6d      	ldr	r3, [pc, #436]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	496a      	ldr	r1, [pc, #424]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d010      	beq.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699a      	ldr	r2, [r3, #24]
 80036dc:	4b64      	ldr	r3, [pc, #400]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d908      	bls.n	80036fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036e8:	4b61      	ldr	r3, [pc, #388]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	495e      	ldr	r1, [pc, #376]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	4b59      	ldr	r3, [pc, #356]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003712:	429a      	cmp	r2, r3
 8003714:	d908      	bls.n	8003728 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003716:	4b56      	ldr	r3, [pc, #344]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4953      	ldr	r1, [pc, #332]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003724:	4313      	orrs	r3, r2
 8003726:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d010      	beq.n	8003756 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	4b4d      	ldr	r3, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	429a      	cmp	r2, r3
 8003742:	d908      	bls.n	8003756 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003744:	4b4a      	ldr	r3, [pc, #296]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	f023 020f 	bic.w	r2, r3, #15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4947      	ldr	r1, [pc, #284]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003752:	4313      	orrs	r3, r2
 8003754:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b00      	cmp	r3, #0
 8003760:	d055      	beq.n	800380e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003762:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4940      	ldr	r1, [pc, #256]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003770:	4313      	orrs	r3, r2
 8003772:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d107      	bne.n	800378c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800377c:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d121      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0f6      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003794:	4b36      	ldr	r3, [pc, #216]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d115      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0ea      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ac:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0de      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0d6      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037cc:	4b28      	ldr	r3, [pc, #160]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f023 0207 	bic.w	r2, r3, #7
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4925      	ldr	r1, [pc, #148]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fe fa5f 	bl	8001ca0 <HAL_GetTick>
 80037e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e6:	f7fe fa5b 	bl	8001ca0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0be      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fc:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	429a      	cmp	r2, r3
 800380c:	d1eb      	bne.n	80037e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d010      	beq.n	800383c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4b14      	ldr	r3, [pc, #80]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	429a      	cmp	r2, r3
 8003828:	d208      	bcs.n	800383c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800382a:	4b11      	ldr	r3, [pc, #68]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f023 020f 	bic.w	r2, r3, #15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	490e      	ldr	r1, [pc, #56]	; (8003870 <HAL_RCC_ClockConfig+0x244>)
 8003838:	4313      	orrs	r3, r2
 800383a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800383c:	4b0b      	ldr	r3, [pc, #44]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d214      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 020f 	bic.w	r2, r3, #15
 8003852:	4906      	ldr	r1, [pc, #24]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <HAL_RCC_ClockConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e086      	b.n	800397a <HAL_RCC_ClockConfig+0x34e>
 800386c:	52002000 	.word	0x52002000
 8003870:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d010      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800388c:	429a      	cmp	r2, r3
 800388e:	d208      	bcs.n	80038a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003890:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	4939      	ldr	r1, [pc, #228]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d010      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	4b34      	ldr	r3, [pc, #208]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d208      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	492e      	ldr	r1, [pc, #184]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	4b28      	ldr	r3, [pc, #160]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d208      	bcs.n	80038fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	4922      	ldr	r1, [pc, #136]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003916:	429a      	cmp	r2, r3
 8003918:	d208      	bcs.n	800392c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800391a:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	4917      	ldr	r1, [pc, #92]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003928:	4313      	orrs	r3, r2
 800392a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800392c:	f000 f834 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003930:	4602      	mov	r2, r0
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	4912      	ldr	r1, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x35c>)
 800393e:	5ccb      	ldrb	r3, [r1, r3]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
 8003948:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800394a:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x358>)
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	4a0d      	ldr	r2, [pc, #52]	; (8003988 <HAL_RCC_ClockConfig+0x35c>)
 8003954:	5cd3      	ldrb	r3, [r2, r3]
 8003956:	f003 031f 	and.w	r3, r3, #31
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x360>)
 8003962:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x364>)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800396a:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x368>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe f94c 	bl	8001c0c <HAL_InitTick>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	58024400 	.word	0x58024400
 8003988:	080066f8 	.word	0x080066f8
 800398c:	24000004 	.word	0x24000004
 8003990:	24000000 	.word	0x24000000
 8003994:	24000008 	.word	0x24000008

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b089      	sub	sp, #36	; 0x24
 800399c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800399e:	4bb3      	ldr	r3, [pc, #716]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a6:	2b18      	cmp	r3, #24
 80039a8:	f200 8155 	bhi.w	8003c56 <HAL_RCC_GetSysClockFreq+0x2be>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	08003a19 	.word	0x08003a19
 80039b8:	08003c57 	.word	0x08003c57
 80039bc:	08003c57 	.word	0x08003c57
 80039c0:	08003c57 	.word	0x08003c57
 80039c4:	08003c57 	.word	0x08003c57
 80039c8:	08003c57 	.word	0x08003c57
 80039cc:	08003c57 	.word	0x08003c57
 80039d0:	08003c57 	.word	0x08003c57
 80039d4:	08003a3f 	.word	0x08003a3f
 80039d8:	08003c57 	.word	0x08003c57
 80039dc:	08003c57 	.word	0x08003c57
 80039e0:	08003c57 	.word	0x08003c57
 80039e4:	08003c57 	.word	0x08003c57
 80039e8:	08003c57 	.word	0x08003c57
 80039ec:	08003c57 	.word	0x08003c57
 80039f0:	08003c57 	.word	0x08003c57
 80039f4:	08003a45 	.word	0x08003a45
 80039f8:	08003c57 	.word	0x08003c57
 80039fc:	08003c57 	.word	0x08003c57
 8003a00:	08003c57 	.word	0x08003c57
 8003a04:	08003c57 	.word	0x08003c57
 8003a08:	08003c57 	.word	0x08003c57
 8003a0c:	08003c57 	.word	0x08003c57
 8003a10:	08003c57 	.word	0x08003c57
 8003a14:	08003a4b 	.word	0x08003a4b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a18:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a24:	4b91      	ldr	r3, [pc, #580]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	4a90      	ldr	r2, [pc, #576]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
 8003a34:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a36:	e111      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a38:	4b8d      	ldr	r3, [pc, #564]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a3a:	61bb      	str	r3, [r7, #24]
    break;
 8003a3c:	e10e      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a40:	61bb      	str	r3, [r7, #24]
    break;
 8003a42:	e10b      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a44:	4b8c      	ldr	r3, [pc, #560]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a46:	61bb      	str	r3, [r7, #24]
    break;
 8003a48:	e108      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a4a:	4b88      	ldr	r3, [pc, #544]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a54:	4b85      	ldr	r3, [pc, #532]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a5e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a60:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a6a:	4b80      	ldr	r3, [pc, #512]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6e:	08db      	lsrs	r3, r3, #3
 8003a70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80e1 	beq.w	8003c50 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f000 8083 	beq.w	8003b9c <HAL_RCC_GetSysClockFreq+0x204>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	f200 80a1 	bhi.w	8003be0 <HAL_RCC_GetSysClockFreq+0x248>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_RCC_GetSysClockFreq+0x114>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d056      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003aaa:	e099      	b.n	8003be0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aac:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d02d      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ab8:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	4a6b      	ldr	r2, [pc, #428]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae2:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003af6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b12:	e087      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b3a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b56:	e065      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b6a:	4b40      	ldr	r3, [pc, #256]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b7e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b9a:	e043      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c88 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bae:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bc2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bde:	e021      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c22:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c24:	4b11      	ldr	r3, [pc, #68]	; (8003c6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c28:	0a5b      	lsrs	r3, r3, #9
 8003c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c2e:	3301      	adds	r3, #1
 8003c30:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c48:	ee17 3a90 	vmov	r3, s15
 8003c4c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c4e:	e005      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	61bb      	str	r3, [r7, #24]
    break;
 8003c54:	e002      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003c56:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c58:	61bb      	str	r3, [r7, #24]
    break;
 8003c5a:	bf00      	nop
  }

  return sysclockfreq;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	03d09000 	.word	0x03d09000
 8003c74:	003d0900 	.word	0x003d0900
 8003c78:	007a1200 	.word	0x007a1200
 8003c7c:	46000000 	.word	0x46000000
 8003c80:	4c742400 	.word	0x4c742400
 8003c84:	4a742400 	.word	0x4a742400
 8003c88:	4af42400 	.word	0x4af42400

08003c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003c92:	f7ff fe81 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	0a1b      	lsrs	r3, r3, #8
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ca4:	5ccb      	ldrb	r3, [r1, r3]
 8003ca6:	f003 031f 	and.w	r3, r3, #31
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc6:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cc8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cca:	4a07      	ldr	r2, [pc, #28]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	080066f8 	.word	0x080066f8
 8003ce4:	24000004 	.word	0x24000004
 8003ce8:	24000000 	.word	0x24000000

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003cf0:	f7ff ffcc 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	58024400 	.word	0x58024400
 8003d14:	080066f8 	.word	0x080066f8

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003d1c:	f7ff ffb6 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	080066f8 	.word	0x080066f8

08003d44 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d50:	2300      	movs	r3, #0
 8003d52:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d03f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d68:	d02a      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d6e:	d824      	bhi.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d74:	d018      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d7a:	d81e      	bhi.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d84:	d007      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003d86:	e018      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d88:	4b9f      	ldr	r3, [pc, #636]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	4a9e      	ldr	r2, [pc, #632]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003d94:	e015      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 f99b 	bl	80050d8 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003da6:	e00c      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 fa44 	bl	800523c <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003db8:	e003      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d109      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dc8:	4b8f      	ldr	r3, [pc, #572]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd4:	498c      	ldr	r1, [pc, #560]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8003dda:	e001      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03d      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d826      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003df4:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfa:	bf00      	nop
 8003dfc:	08003e11 	.word	0x08003e11
 8003e00:	08003e1f 	.word	0x08003e1f
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e49 	.word	0x08003e49
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e10:	4b7d      	ldr	r3, [pc, #500]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	4a7c      	ldr	r2, [pc, #496]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e015      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f957 	bl	80050d8 <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e2e:	e00c      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3324      	adds	r3, #36	; 0x24
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 fa00 	bl	800523c <RCCEx_PLL3_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
      break;
 8003e46:	e000      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4a:	7dfb      	ldrb	r3, [r7, #23]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e50:	4b6d      	ldr	r3, [pc, #436]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e54:	f023 0207 	bic.w	r2, r3, #7
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	496a      	ldr	r1, [pc, #424]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	650b      	str	r3, [r1, #80]	; 0x50
 8003e62:	e001      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d04a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e7c:	d031      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003e7e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e82:	d82b      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d02d      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8003e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e8e:	d825      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e90:	2bc0      	cmp	r3, #192	; 0xc0
 8003e92:	d02a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003e94:	2bc0      	cmp	r3, #192	; 0xc0
 8003e96:	d821      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e98:	2b80      	cmp	r3, #128	; 0x80
 8003e9a:	d016      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d81d      	bhi.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d007      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003ea8:	e018      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eaa:	4b57      	ldr	r3, [pc, #348]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eb6:	e019      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f001 f90a 	bl	80050d8 <RCCEx_PLL2_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003ec8:	e010      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	; 0x24
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f9b3 	bl	800523c <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8003eda:	e007      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8003eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003ef2:	4b45      	ldr	r3, [pc, #276]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efe:	4942      	ldr	r1, [pc, #264]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	650b      	str	r3, [r1, #80]	; 0x50
 8003f04:	e001      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f06:	7dfb      	ldrb	r3, [r7, #23]
 8003f08:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d04f      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f1e:	d036      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8003f20:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003f24:	d830      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2a:	d032      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f30:	d82a      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f36:	d02e      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8003f38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f3c:	d824      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d018      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8003f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f48:	d81e      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d007      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8003f54:	e018      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f56:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a2b      	ldr	r2, [pc, #172]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f62:	e019      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f8b4 	bl	80050d8 <RCCEx_PLL2_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f74:	e010      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3324      	adds	r3, #36	; 0x24
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 f95d 	bl	800523c <RCCEx_PLL3_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8003f86:	e007      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	e004      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f8e:	bf00      	nop
 8003f90:	e002      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f92:	bf00      	nop
 8003f94:	e000      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8003f96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003f9e:	4b1a      	ldr	r3, [pc, #104]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa2:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	4917      	ldr	r1, [pc, #92]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	650b      	str	r3, [r1, #80]	; 0x50
 8003fb0:	e001      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d034      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	2b30      	cmp	r3, #48	; 0x30
 8003fc8:	d01c      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8003fca:	2b30      	cmp	r3, #48	; 0x30
 8003fcc:	d817      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d00c      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d813      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d018      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d10f      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	4a09      	ldr	r2, [pc, #36]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003fea:	e010      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x2ca>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f870 	bl	80050d8 <RCCEx_PLL2_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8003ffc:	e007      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
      break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
      break;
 8004004:	bf00      	nop
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004008:	58024400 	.word	0x58024400
      break;
 800400c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004014:	4b9b      	ldr	r3, [pc, #620]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	4998      	ldr	r1, [pc, #608]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004022:	4313      	orrs	r3, r2
 8004024:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004026:	e001      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d047      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d030      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004046:	d82a      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404c:	d02c      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x364>
 800404e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004052:	d824      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d018      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x348>
 800405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405e:	d81e      	bhi.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004068:	d007      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800406a:	e018      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406c:	4b85      	ldr	r3, [pc, #532]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a84      	ldr	r2, [pc, #528]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004078:	e017      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2100      	movs	r1, #0
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f829 	bl	80050d8 <RCCEx_PLL2_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800408a:	e00e      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3324      	adds	r3, #36	; 0x24
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 f8d2 	bl	800523c <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800409c:	e005      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 80040a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040b0:	4b74      	ldr	r3, [pc, #464]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040bc:	4971      	ldr	r1, [pc, #452]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	650b      	str	r3, [r1, #80]	; 0x50
 80040c2:	e001      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
 80040c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d049      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040dc:	d02e      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80040de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e2:	d828      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e8:	d02a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ee:	d822      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040f4:	d026      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80040f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040fa:	d81c      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80040fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004100:	d010      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004106:	d816      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01d      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004110:	d111      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3304      	adds	r3, #4
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ffdd 	bl	80050d8 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004122:	e012      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3324      	adds	r3, #36	; 0x24
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f886 	bl	800523c <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004134:	e009      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	75fb      	strb	r3, [r7, #23]
      break;
 800413a:	e006      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 800413c:	bf00      	nop
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004140:	bf00      	nop
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8004148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800414a:	7dfb      	ldrb	r3, [r7, #23]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004150:	4b4c      	ldr	r3, [pc, #304]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004154:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800415c:	4949      	ldr	r1, [pc, #292]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800415e:	4313      	orrs	r3, r2
 8004160:	650b      	str	r3, [r1, #80]	; 0x50
 8004162:	e001      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d053      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800417a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800417e:	d034      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004180:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004184:	d82e      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800418a:	d030      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800418c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004190:	d828      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d02c      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419c:	d822      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 800419e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a2:	d028      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80041a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a8:	d81c      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ae:	d010      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80041b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b4:	d816      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01f      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80041ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041be:	d111      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 ff86 	bl	80050d8 <RCCEx_PLL2_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041d0:	e014      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3324      	adds	r3, #36	; 0x24
 80041d6:	2101      	movs	r1, #1
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 f82f 	bl	800523c <RCCEx_PLL3_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041e2:	e00b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	75fb      	strb	r3, [r7, #23]
      break;
 80041e8:	e008      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ea:	bf00      	nop
 80041ec:	e006      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041ee:	bf00      	nop
 80041f0:	e004      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041f2:	bf00      	nop
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041f6:	bf00      	nop
 80041f8:	e000      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 80041fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fc:	7dfb      	ldrb	r3, [r7, #23]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004210:	491c      	ldr	r1, [pc, #112]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004212:	4313      	orrs	r3, r2
 8004214:	658b      	str	r3, [r1, #88]	; 0x58
 8004216:	e001      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d031      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004230:	d00e      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004236:	d814      	bhi.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800423c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004240:	d10f      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004242:	4b10      	ldr	r3, [pc, #64]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800424c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800424e:	e00c      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3304      	adds	r3, #4
 8004254:	2101      	movs	r1, #1
 8004256:	4618      	mov	r0, r3
 8004258:	f000 ff3e 	bl	80050d8 <RCCEx_PLL2_Config>
 800425c:	4603      	mov	r3, r0
 800425e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
      break;
 8004266:	e000      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8004268:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426a:	7dfb      	ldrb	r3, [r7, #23]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800427c:	4901      	ldr	r1, [pc, #4]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800427e:	4313      	orrs	r3, r2
 8004280:	650b      	str	r3, [r1, #80]	; 0x50
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x548>
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d032      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429c:	2b03      	cmp	r3, #3
 800429e:	d81b      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042df 	.word	0x080042df
 80042ac:	080042b9 	.word	0x080042b9
 80042b0:	080042c7 	.word	0x080042c7
 80042b4:	080042df 	.word	0x080042df
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4bb2      	ldr	r3, [pc, #712]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4ab1      	ldr	r2, [pc, #708]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042c4:	e00c      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3304      	adds	r3, #4
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 ff03 	bl	80050d8 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
      break;
 80042dc:	e000      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80042de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042e6:	4ba7      	ldr	r3, [pc, #668]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	49a4      	ldr	r1, [pc, #656]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042f8:	e001      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8086 	beq.w	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b9e      	ldr	r3, [pc, #632]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a9d      	ldr	r2, [pc, #628]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004318:	f7fd fcc2 	bl	8001ca0 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800431e:	e009      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fcbe 	bl	8001ca0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d902      	bls.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      {
        ret = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	75fb      	strb	r3, [r7, #23]
        break;
 8004332:	e005      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004334:	4b94      	ldr	r3, [pc, #592]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ef      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d166      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004346:	4b8f      	ldr	r3, [pc, #572]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004348:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004350:	4053      	eors	r3, r2
 8004352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004356:	2b00      	cmp	r3, #0
 8004358:	d013      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800435a:	4b8a      	ldr	r3, [pc, #552]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004362:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004364:	4b87      	ldr	r3, [pc, #540]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004368:	4a86      	ldr	r2, [pc, #536]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004370:	4b84      	ldr	r3, [pc, #528]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	4a83      	ldr	r2, [pc, #524]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800437c:	4a81      	ldr	r2, [pc, #516]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438c:	d115      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438e:	f7fd fc87 	bl	8001ca0 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004394:	e00b      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fd fc83 	bl	8001ca0 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d902      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
          {
            ret = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	75fb      	strb	r3, [r7, #23]
            break;
 80043ac:	e005      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x676>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ae:	4b75      	ldr	r3, [pc, #468]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ed      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x652>
          }
        }
      }

      if(ret == HAL_OK)
 80043ba:	7dfb      	ldrb	r3, [r7, #23]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d126      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ce:	d10d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x6a8>
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043de:	0919      	lsrs	r1, r3, #4
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80043e2:	400b      	ands	r3, r1
 80043e4:	4967      	ldr	r1, [pc, #412]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]
 80043ea:	e005      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 80043ec:	4b65      	ldr	r3, [pc, #404]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4a64      	ldr	r2, [pc, #400]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043f6:	6113      	str	r3, [r2, #16]
 80043f8:	4b62      	ldr	r3, [pc, #392]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80043fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	495f      	ldr	r1, [pc, #380]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004408:	4313      	orrs	r3, r2
 800440a:	670b      	str	r3, [r1, #112]	; 0x70
 800440c:	e004      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800440e:	7dfb      	ldrb	r3, [r7, #23]
 8004410:	75bb      	strb	r3, [r7, #22]
 8004412:	e001      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d07f      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800442a:	2b28      	cmp	r3, #40	; 0x28
 800442c:	d866      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 800442e:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <HAL_RCCEx_PeriphCLKConfig+0x6f0>)
 8004430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004434:	08004503 	.word	0x08004503
 8004438:	080044fd 	.word	0x080044fd
 800443c:	080044fd 	.word	0x080044fd
 8004440:	080044fd 	.word	0x080044fd
 8004444:	080044fd 	.word	0x080044fd
 8004448:	080044fd 	.word	0x080044fd
 800444c:	080044fd 	.word	0x080044fd
 8004450:	080044fd 	.word	0x080044fd
 8004454:	080044d9 	.word	0x080044d9
 8004458:	080044fd 	.word	0x080044fd
 800445c:	080044fd 	.word	0x080044fd
 8004460:	080044fd 	.word	0x080044fd
 8004464:	080044fd 	.word	0x080044fd
 8004468:	080044fd 	.word	0x080044fd
 800446c:	080044fd 	.word	0x080044fd
 8004470:	080044fd 	.word	0x080044fd
 8004474:	080044eb 	.word	0x080044eb
 8004478:	080044fd 	.word	0x080044fd
 800447c:	080044fd 	.word	0x080044fd
 8004480:	080044fd 	.word	0x080044fd
 8004484:	080044fd 	.word	0x080044fd
 8004488:	080044fd 	.word	0x080044fd
 800448c:	080044fd 	.word	0x080044fd
 8004490:	080044fd 	.word	0x080044fd
 8004494:	08004503 	.word	0x08004503
 8004498:	080044fd 	.word	0x080044fd
 800449c:	080044fd 	.word	0x080044fd
 80044a0:	080044fd 	.word	0x080044fd
 80044a4:	080044fd 	.word	0x080044fd
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	080044fd 	.word	0x080044fd
 80044b4:	08004503 	.word	0x08004503
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044fd 	.word	0x080044fd
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004503 	.word	0x08004503
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fdfa 	bl	80050d8 <RCCEx_PLL2_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044e8:	e00c      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c0>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3324      	adds	r3, #36	; 0x24
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 fea3 	bl	800523c <RCCEx_PLL3_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80044fa:	e003      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004500:	e000      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      break;
 8004502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004504:	7dfb      	ldrb	r3, [r7, #23]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004518:	491a      	ldr	r1, [pc, #104]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800451a:	4313      	orrs	r3, r2
 800451c:	654b      	str	r3, [r1, #84]	; 0x54
 800451e:	e001      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d03f      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004534:	2b05      	cmp	r3, #5
 8004536:	d821      	bhi.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004538:	a201      	add	r2, pc, #4	; (adr r2, 8004540 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453e:	bf00      	nop
 8004540:	08004591 	.word	0x08004591
 8004544:	08004559 	.word	0x08004559
 8004548:	0800456b 	.word	0x0800456b
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004591 	.word	0x08004591
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	2101      	movs	r1, #1
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fdba 	bl	80050d8 <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004568:	e013      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	3324      	adds	r3, #36	; 0x24
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fe63 	bl	800523c <RCCEx_PLL3_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800457a:	e00a      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
      break;
 8004580:	e007      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	58024800 	.word	0x58024800
 800458c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004592:	7dfb      	ldrb	r3, [r7, #23]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004598:	4b9f      	ldr	r3, [pc, #636]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	f023 0207 	bic.w	r2, r3, #7
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a4:	499c      	ldr	r1, [pc, #624]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	654b      	str	r3, [r1, #84]	; 0x54
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d039      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d820      	bhi.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	0800460f 	.word	0x0800460f
 80045d0:	080045e5 	.word	0x080045e5
 80045d4:	080045f7 	.word	0x080045f7
 80045d8:	0800460f 	.word	0x0800460f
 80045dc:	0800460f 	.word	0x0800460f
 80045e0:	0800460f 	.word	0x0800460f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	2101      	movs	r1, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fd74 	bl	80050d8 <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80045f4:	e00c      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fe1d 	bl	800523c <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75fb      	strb	r3, [r7, #23]
      break;
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800460e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004616:	4b80      	ldr	r3, [pc, #512]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461a:	f023 0207 	bic.w	r2, r3, #7
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004624:	497c      	ldr	r1, [pc, #496]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	658b      	str	r3, [r1, #88]	; 0x58
 800462a:	e001      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0320 	and.w	r3, r3, #32
 8004638:	2b00      	cmp	r3, #0
 800463a:	d04b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004646:	d02e      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800464c:	d828      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d02a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d822      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800465a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800465e:	d026      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004664:	d81c      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800466a:	d010      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800466c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004670:	d816      	bhi.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01d      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800467a:	d111      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd28 	bl	80050d8 <RCCEx_PLL2_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800468c:	e012      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fdd1 	bl	800523c <RCCEx_PLL3_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800469e:	e009      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
      break;
 80046a4:	e006      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046a6:	bf00      	nop
 80046a8:	e004      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 80046b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b4:	7dfb      	ldrb	r3, [r7, #23]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10a      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ba:	4b57      	ldr	r3, [pc, #348]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c8:	4953      	ldr	r1, [pc, #332]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	654b      	str	r3, [r1, #84]	; 0x54
 80046ce:	e001      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d04b      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046ea:	d02e      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80046ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046f0:	d828      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d02a      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80046f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fc:	d822      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 80046fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004702:	d026      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004708:	d81c      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470e:	d010      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004714:	d816      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01d      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800471a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471e:	d111      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fcd6 	bl	80050d8 <RCCEx_PLL2_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004730:	e012      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3324      	adds	r3, #36	; 0x24
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fd7f 	bl	800523c <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004742:	e009      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	75fb      	strb	r3, [r7, #23]
      break;
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800474a:	bf00      	nop
 800474c:	e004      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800474e:	bf00      	nop
 8004750:	e002      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004752:	bf00      	nop
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004758:	7dfb      	ldrb	r3, [r7, #23]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800476c:	492a      	ldr	r1, [pc, #168]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	658b      	str	r3, [r1, #88]	; 0x58
 8004772:	e001      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	7dfb      	ldrb	r3, [r7, #23]
 8004776:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d04d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800478a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800478e:	d02e      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004790:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004794:	d828      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479a:	d02a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800479c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a0:	d822      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047a6:	d026      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80047a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ac:	d81c      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b2:	d010      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 80047b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b8:	d816      	bhi.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01d      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xab6>
 80047be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c2:	d111      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fc84 	bl	80050d8 <RCCEx_PLL2_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047d4:	e012      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3324      	adds	r3, #36	; 0x24
 80047da:	2102      	movs	r1, #2
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 fd2d 	bl	800523c <RCCEx_PLL3_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047e6:	e009      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
      break;
 80047ec:	e006      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e004      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047f2:	bf00      	nop
 80047f4:	e002      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047f6:	bf00      	nop
 80047f8:	e000      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 80047fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004810:	4901      	ldr	r1, [pc, #4]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	658b      	str	r3, [r1, #88]	; 0x58
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004836:	d10a      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	2102      	movs	r1, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fcfc 	bl	800523c <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800484e:	4b8c      	ldr	r3, [pc, #560]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485c:	4988      	ldr	r1, [pc, #544]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800485e:	4313      	orrs	r3, r2
 8004860:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d10a      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fcdb 	bl	800523c <RCCEx_PLL3_Config>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004890:	4b7b      	ldr	r3, [pc, #492]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489e:	4978      	ldr	r1, [pc, #480]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d034      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ba:	d01d      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 80048bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048c0:	d817      	bhi.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d009      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80048cc:	e011      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fbff 	bl	80050d8 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048de:	e00c      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3324      	adds	r3, #36	; 0x24
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fca8 	bl	800523c <RCCEx_PLL3_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048f0:	e003      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	75fb      	strb	r3, [r7, #23]
      break;
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 80048f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004900:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800490e:	495c      	ldr	r1, [pc, #368]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004910:	4313      	orrs	r3, r2
 8004912:	658b      	str	r3, [r1, #88]	; 0x58
 8004914:	e001      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
 8004918:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d033      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004930:	d01c      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004932:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004936:	d816      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004938:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493c:	d003      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 800493e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004942:	d007      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004944:	e00f      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004946:	4b4e      	ldr	r3, [pc, #312]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	4a4d      	ldr	r2, [pc, #308]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 800494c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004950:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004952:	e00c      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3324      	adds	r3, #36	; 0x24
 8004958:	2101      	movs	r1, #1
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fc6e 	bl	800523c <RCCEx_PLL3_Config>
 8004960:	4603      	mov	r3, r0
 8004962:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004964:	e003      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
      break;
 800496a:	e000      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800496c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800496e:	7dfb      	ldrb	r3, [r7, #23]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004974:	4b42      	ldr	r3, [pc, #264]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004982:	493f      	ldr	r1, [pc, #252]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	654b      	str	r3, [r1, #84]	; 0x54
 8004988:	e001      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d029      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80049a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a6:	d007      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80049a8:	e00f      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xc86>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049aa:	4b35      	ldr	r3, [pc, #212]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049b6:	e00b      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3304      	adds	r3, #4
 80049bc:	2102      	movs	r1, #2
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fb8a 	bl	80050d8 <RCCEx_PLL2_Config>
 80049c4:	4603      	mov	r3, r0
 80049c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049c8:	e002      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xc8c>

    default:
      ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
      break;
 80049ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xca6>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e2:	4927      	ldr	r1, [pc, #156]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049e8:	e001      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xcaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fc1b 	bl	800523c <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xccc>
    {
      status=HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d035      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a26:	d017      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a2c:	d811      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a32:	d013      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d80b      	bhi.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d010      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8004a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a42:	d106      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	4a0d      	ldr	r2, [pc, #52]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a50:	e007      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	75fb      	strb	r3, [r7, #23]
      break;
 8004a56:	e004      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a58:	bf00      	nop
 8004a5a:	e002      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a5c:	bf00      	nop
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a76:	4902      	ldr	r1, [pc, #8]	; (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	654b      	str	r3, [r1, #84]	; 0x54
 8004a7c:	e004      	b.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d008      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a94:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa0:	492d      	ldr	r1, [pc, #180]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ab2:	4b29      	ldr	r3, [pc, #164]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abe:	4926      	ldr	r1, [pc, #152]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004ad0:	4b21      	ldr	r3, [pc, #132]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	491e      	ldr	r1, [pc, #120]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4a19      	ldr	r2, [pc, #100]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004af8:	6113      	str	r3, [r2, #16]
 8004afa:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004afc:	691a      	ldr	r2, [r3, #16]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004b04:	4914      	ldr	r1, [pc, #80]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	da08      	bge.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	490e      	ldr	r1, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d009      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	4906      	ldr	r1, [pc, #24]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004b44:	7dbb      	ldrb	r3, [r7, #22]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	58024400 	.word	0x58024400

08004b5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8004b60:	f7ff f894 	bl	8003c8c <HAL_RCC_GetHCLKFreq>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	091b      	lsrs	r3, r3, #4
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	4904      	ldr	r1, [pc, #16]	; (8004b84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b72:	5ccb      	ldrb	r3, [r1, r3]
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	58024400 	.word	0x58024400
 8004b84:	080066f8 	.word	0x080066f8

08004b88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b089      	sub	sp, #36	; 0x24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b90:	4ba1      	ldr	r3, [pc, #644]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b9a:	4b9f      	ldr	r3, [pc, #636]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	0b1b      	lsrs	r3, r3, #12
 8004ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ba6:	4b9c      	ldr	r3, [pc, #624]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	091b      	lsrs	r3, r3, #4
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004bb2:	4b99      	ldr	r3, [pc, #612]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	08db      	lsrs	r3, r3, #3
 8004bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8111 	beq.w	8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	f000 8083 	beq.w	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	f200 80a1 	bhi.w	8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d056      	beq.n	8004ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bf2:	e099      	b.n	8004d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bf4:	4b88      	ldr	r3, [pc, #544]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02d      	beq.n	8004c5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c00:	4b85      	ldr	r3, [pc, #532]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	08db      	lsrs	r3, r3, #3
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	4a84      	ldr	r2, [pc, #528]	; (8004e1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c2a:	4b7b      	ldr	r3, [pc, #492]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c32:	ee07 3a90 	vmov	s15, r3
 8004c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c5a:	e087      	b.n	8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	4b6a      	ldr	r3, [pc, #424]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c9e:	e065      	b.n	8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cb2:	4b59      	ldr	r3, [pc, #356]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cba:	ee07 3a90 	vmov	s15, r3
 8004cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ce2:	e043      	b.n	8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf6:	4b48      	ldr	r3, [pc, #288]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d26:	e021      	b.n	8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d3a:	4b37      	ldr	r3, [pc, #220]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d6c:	4b2a      	ldr	r3, [pc, #168]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	0a5b      	lsrs	r3, r3, #9
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d92:	ee17 2a90 	vmov	r2, s15
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d9a:	4b1f      	ldr	r3, [pc, #124]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	0c1b      	lsrs	r3, r3, #16
 8004da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc0:	ee17 2a90 	vmov	r2, s15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	0e1b      	lsrs	r3, r3, #24
 8004dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dee:	ee17 2a90 	vmov	r2, s15
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004df6:	e008      	b.n	8004e0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	bf00      	nop
 8004e0c:	3724      	adds	r7, #36	; 0x24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	58024400 	.word	0x58024400
 8004e1c:	03d09000 	.word	0x03d09000
 8004e20:	46000000 	.word	0x46000000
 8004e24:	4c742400 	.word	0x4c742400
 8004e28:	4a742400 	.word	0x4a742400
 8004e2c:	4af42400 	.word	0x4af42400

08004e30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e38:	4ba1      	ldr	r3, [pc, #644]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e42:	4b9f      	ldr	r3, [pc, #636]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	0d1b      	lsrs	r3, r3, #20
 8004e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e4e:	4b9c      	ldr	r3, [pc, #624]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e52:	0a1b      	lsrs	r3, r3, #8
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e5a:	4b99      	ldr	r3, [pc, #612]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8111 	beq.w	80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	f000 8083 	beq.w	8004f8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f200 80a1 	bhi.w	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d056      	beq.n	8004f48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e9a:	e099      	b.n	8004fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e9c:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02d      	beq.n	8004f04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ea8:	4b85      	ldr	r3, [pc, #532]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	08db      	lsrs	r3, r3, #3
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	4a84      	ldr	r2, [pc, #528]	; (80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed2:	4b7b      	ldr	r3, [pc, #492]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004f02:	e087      	b.n	8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80050cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b6a      	ldr	r3, [pc, #424]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f46:	e065      	b.n	8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f8a:	e043      	b.n	8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80050d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b48      	ldr	r3, [pc, #288]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fce:	e021      	b.n	8005014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80050d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ff6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005012:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005014:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	0a5b      	lsrs	r3, r3, #9
 800501a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800502e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503a:	ee17 2a90 	vmov	r2, s15
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005042:	4b1f      	ldr	r3, [pc, #124]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800505c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005068:	ee17 2a90 	vmov	r2, s15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005070:	4b13      	ldr	r3, [pc, #76]	; (80050c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	0e1b      	lsrs	r3, r3, #24
 8005076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800508a:	edd7 6a07 	vldr	s13, [r7, #28]
 800508e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005096:	ee17 2a90 	vmov	r2, s15
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800509e:	e008      	b.n	80050b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	bf00      	nop
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	58024400 	.word	0x58024400
 80050c4:	03d09000 	.word	0x03d09000
 80050c8:	46000000 	.word	0x46000000
 80050cc:	4c742400 	.word	0x4c742400
 80050d0:	4a742400 	.word	0x4a742400
 80050d4:	4af42400 	.word	0x4af42400

080050d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050e6:	4b53      	ldr	r3, [pc, #332]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d101      	bne.n	80050f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e099      	b.n	800522a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050f6:	4b4f      	ldr	r3, [pc, #316]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a4e      	ldr	r2, [pc, #312]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80050fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005102:	f7fc fdcd 	bl	8001ca0 <HAL_GetTick>
 8005106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005108:	e008      	b.n	800511c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800510a:	f7fc fdc9 	bl	8001ca0 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e086      	b.n	800522a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800511c:	4b45      	ldr	r3, [pc, #276]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f0      	bne.n	800510a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005128:	4b42      	ldr	r3, [pc, #264]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	031b      	lsls	r3, r3, #12
 8005136:	493f      	ldr	r1, [pc, #252]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	628b      	str	r3, [r1, #40]	; 0x28
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	3b01      	subs	r3, #1
 8005142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	3b01      	subs	r3, #1
 800514c:	025b      	lsls	r3, r3, #9
 800514e:	b29b      	uxth	r3, r3
 8005150:	431a      	orrs	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	3b01      	subs	r3, #1
 8005158:	041b      	lsls	r3, r3, #16
 800515a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	3b01      	subs	r3, #1
 8005166:	061b      	lsls	r3, r3, #24
 8005168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800516c:	4931      	ldr	r1, [pc, #196]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005172:	4b30      	ldr	r3, [pc, #192]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	492d      	ldr	r1, [pc, #180]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005180:	4313      	orrs	r3, r2
 8005182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005184:	4b2b      	ldr	r3, [pc, #172]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	f023 0220 	bic.w	r2, r3, #32
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	4928      	ldr	r1, [pc, #160]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005196:	4b27      	ldr	r3, [pc, #156]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 8005198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519a:	4a26      	ldr	r2, [pc, #152]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 800519c:	f023 0310 	bic.w	r3, r3, #16
 80051a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80051a2:	4b24      	ldr	r3, [pc, #144]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a6:	4b24      	ldr	r3, [pc, #144]	; (8005238 <RCCEx_PLL2_Config+0x160>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	69d2      	ldr	r2, [r2, #28]
 80051ae:	00d2      	lsls	r2, r2, #3
 80051b0:	4920      	ldr	r1, [pc, #128]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f043 0310 	orr.w	r3, r3, #16
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d106      	bne.n	80051d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80051c8:	4b1a      	ldr	r3, [pc, #104]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a19      	ldr	r2, [pc, #100]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d4:	e00f      	b.n	80051f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d106      	bne.n	80051ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051dc:	4b15      	ldr	r3, [pc, #84]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	4a14      	ldr	r2, [pc, #80]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051e8:	e005      	b.n	80051f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	4a11      	ldr	r2, [pc, #68]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 80051fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005202:	f7fc fd4d 	bl	8001ca0 <HAL_GetTick>
 8005206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005208:	e008      	b.n	800521c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800520a:	f7fc fd49 	bl	8001ca0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e006      	b.n	800522a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <RCCEx_PLL2_Config+0x15c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	ffff0007 	.word	0xffff0007

0800523c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800524a:	4b53      	ldr	r3, [pc, #332]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d101      	bne.n	800525a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e099      	b.n	800538e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800525a:	4b4f      	ldr	r3, [pc, #316]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a4e      	ldr	r2, [pc, #312]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005266:	f7fc fd1b 	bl	8001ca0 <HAL_GetTick>
 800526a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800526c:	e008      	b.n	8005280 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800526e:	f7fc fd17 	bl	8001ca0 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e086      	b.n	800538e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005280:	4b45      	ldr	r3, [pc, #276]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1f0      	bne.n	800526e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800528c:	4b42      	ldr	r3, [pc, #264]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	051b      	lsls	r3, r3, #20
 800529a:	493f      	ldr	r1, [pc, #252]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800529c:	4313      	orrs	r3, r2
 800529e:	628b      	str	r3, [r1, #40]	; 0x28
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	025b      	lsls	r3, r3, #9
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052d0:	4931      	ldr	r1, [pc, #196]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052d6:	4b30      	ldr	r3, [pc, #192]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	492d      	ldr	r1, [pc, #180]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052e4:	4313      	orrs	r3, r2
 80052e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052e8:	4b2b      	ldr	r3, [pc, #172]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	4928      	ldr	r1, [pc, #160]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052fa:	4b27      	ldr	r3, [pc, #156]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	4a26      	ldr	r2, [pc, #152]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005306:	4b24      	ldr	r3, [pc, #144]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530a:	4b24      	ldr	r3, [pc, #144]	; (800539c <RCCEx_PLL3_Config+0x160>)
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	69d2      	ldr	r2, [r2, #28]
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	4920      	ldr	r1, [pc, #128]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800531a:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	4a1e      	ldr	r2, [pc, #120]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800532e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005332:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005336:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005338:	e00f      	b.n	800535a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d106      	bne.n	800534e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005340:	4b15      	ldr	r3, [pc, #84]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4a14      	ldr	r2, [pc, #80]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800534a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800534c:	e005      	b.n	800535a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	4a11      	ldr	r2, [pc, #68]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005358:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800535a:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005366:	f7fc fc9b 	bl	8001ca0 <HAL_GetTick>
 800536a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800536c:	e008      	b.n	8005380 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800536e:	f7fc fc97 	bl	8001ca0 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e006      	b.n	800538e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <RCCEx_PLL3_Config+0x15c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800538c:	7bfb      	ldrb	r3, [r7, #15]
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	58024400 	.word	0x58024400
 800539c:	ffff0007 	.word	0xffff0007

080053a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e042      	b.n	8005438 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fb fee7 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2224      	movs	r2, #36	; 0x24
 80053ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0201 	bic.w	r2, r2, #1
 80053e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f82c 	bl	8005440 <UART_SetConfig>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e022      	b.n	8005438 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fe8c 	bl	8006118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800541e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 ff13 	bl	800625c <UART_CheckIdleState>
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005444:	b092      	sub	sp, #72	; 0x48
 8005446:	af00      	add	r7, sp, #0
 8005448:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	431a      	orrs	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	431a      	orrs	r2, r3
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	4313      	orrs	r3, r2
 8005466:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	4bbe      	ldr	r3, [pc, #760]	; (8005768 <UART_SetConfig+0x328>)
 8005470:	4013      	ands	r3, r2
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005478:	430b      	orrs	r3, r1
 800547a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4ab3      	ldr	r2, [pc, #716]	; (800576c <UART_SetConfig+0x32c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a8:	4313      	orrs	r3, r2
 80054aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	4baf      	ldr	r3, [pc, #700]	; (8005770 <UART_SetConfig+0x330>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054bc:	430b      	orrs	r3, r1
 80054be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	f023 010f 	bic.w	r1, r3, #15
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4aa6      	ldr	r2, [pc, #664]	; (8005774 <UART_SetConfig+0x334>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d177      	bne.n	80055d0 <UART_SetConfig+0x190>
 80054e0:	4ba5      	ldr	r3, [pc, #660]	; (8005778 <UART_SetConfig+0x338>)
 80054e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e8:	2b28      	cmp	r3, #40	; 0x28
 80054ea:	d86d      	bhi.n	80055c8 <UART_SetConfig+0x188>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <UART_SetConfig+0xb4>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005599 	.word	0x08005599
 80054f8:	080055c9 	.word	0x080055c9
 80054fc:	080055c9 	.word	0x080055c9
 8005500:	080055c9 	.word	0x080055c9
 8005504:	080055c9 	.word	0x080055c9
 8005508:	080055c9 	.word	0x080055c9
 800550c:	080055c9 	.word	0x080055c9
 8005510:	080055c9 	.word	0x080055c9
 8005514:	080055a1 	.word	0x080055a1
 8005518:	080055c9 	.word	0x080055c9
 800551c:	080055c9 	.word	0x080055c9
 8005520:	080055c9 	.word	0x080055c9
 8005524:	080055c9 	.word	0x080055c9
 8005528:	080055c9 	.word	0x080055c9
 800552c:	080055c9 	.word	0x080055c9
 8005530:	080055c9 	.word	0x080055c9
 8005534:	080055a9 	.word	0x080055a9
 8005538:	080055c9 	.word	0x080055c9
 800553c:	080055c9 	.word	0x080055c9
 8005540:	080055c9 	.word	0x080055c9
 8005544:	080055c9 	.word	0x080055c9
 8005548:	080055c9 	.word	0x080055c9
 800554c:	080055c9 	.word	0x080055c9
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055b1 	.word	0x080055b1
 8005558:	080055c9 	.word	0x080055c9
 800555c:	080055c9 	.word	0x080055c9
 8005560:	080055c9 	.word	0x080055c9
 8005564:	080055c9 	.word	0x080055c9
 8005568:	080055c9 	.word	0x080055c9
 800556c:	080055c9 	.word	0x080055c9
 8005570:	080055c9 	.word	0x080055c9
 8005574:	080055b9 	.word	0x080055b9
 8005578:	080055c9 	.word	0x080055c9
 800557c:	080055c9 	.word	0x080055c9
 8005580:	080055c9 	.word	0x080055c9
 8005584:	080055c9 	.word	0x080055c9
 8005588:	080055c9 	.word	0x080055c9
 800558c:	080055c9 	.word	0x080055c9
 8005590:	080055c9 	.word	0x080055c9
 8005594:	080055c1 	.word	0x080055c1
 8005598:	2301      	movs	r3, #1
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559e:	e326      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055a0:	2304      	movs	r3, #4
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a6:	e322      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055a8:	2308      	movs	r3, #8
 80055aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ae:	e31e      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055b0:	2310      	movs	r3, #16
 80055b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b6:	e31a      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055b8:	2320      	movs	r3, #32
 80055ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055be:	e316      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055c0:	2340      	movs	r3, #64	; 0x40
 80055c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055c6:	e312      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ce:	e30e      	b.n	8005bee <UART_SetConfig+0x7ae>
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a69      	ldr	r2, [pc, #420]	; (800577c <UART_SetConfig+0x33c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d130      	bne.n	800563c <UART_SetConfig+0x1fc>
 80055da:	4b67      	ldr	r3, [pc, #412]	; (8005778 <UART_SetConfig+0x338>)
 80055dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	2b05      	cmp	r3, #5
 80055e4:	d826      	bhi.n	8005634 <UART_SetConfig+0x1f4>
 80055e6:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <UART_SetConfig+0x1ac>)
 80055e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ec:	08005605 	.word	0x08005605
 80055f0:	0800560d 	.word	0x0800560d
 80055f4:	08005615 	.word	0x08005615
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005625 	.word	0x08005625
 8005600:	0800562d 	.word	0x0800562d
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e2f0      	b.n	8005bee <UART_SetConfig+0x7ae>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e2ec      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e2e8      	b.n	8005bee <UART_SetConfig+0x7ae>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005622:	e2e4      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005624:	2320      	movs	r3, #32
 8005626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800562a:	e2e0      	b.n	8005bee <UART_SetConfig+0x7ae>
 800562c:	2340      	movs	r3, #64	; 0x40
 800562e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005632:	e2dc      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800563a:	e2d8      	b.n	8005bee <UART_SetConfig+0x7ae>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a4f      	ldr	r2, [pc, #316]	; (8005780 <UART_SetConfig+0x340>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d130      	bne.n	80056a8 <UART_SetConfig+0x268>
 8005646:	4b4c      	ldr	r3, [pc, #304]	; (8005778 <UART_SetConfig+0x338>)
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	f003 0307 	and.w	r3, r3, #7
 800564e:	2b05      	cmp	r3, #5
 8005650:	d826      	bhi.n	80056a0 <UART_SetConfig+0x260>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <UART_SetConfig+0x218>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	08005671 	.word	0x08005671
 800565c:	08005679 	.word	0x08005679
 8005660:	08005681 	.word	0x08005681
 8005664:	08005689 	.word	0x08005689
 8005668:	08005691 	.word	0x08005691
 800566c:	08005699 	.word	0x08005699
 8005670:	2300      	movs	r3, #0
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e2ba      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005678:	2304      	movs	r3, #4
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e2b6      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e2b2      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005688:	2310      	movs	r3, #16
 800568a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800568e:	e2ae      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005690:	2320      	movs	r3, #32
 8005692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005696:	e2aa      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e2a6      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e2a2      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a35      	ldr	r2, [pc, #212]	; (8005784 <UART_SetConfig+0x344>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d130      	bne.n	8005714 <UART_SetConfig+0x2d4>
 80056b2:	4b31      	ldr	r3, [pc, #196]	; (8005778 <UART_SetConfig+0x338>)
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d826      	bhi.n	800570c <UART_SetConfig+0x2cc>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x284>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056dd 	.word	0x080056dd
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	080056ed 	.word	0x080056ed
 80056d0:	080056f5 	.word	0x080056f5
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005705 	.word	0x08005705
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e284      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056e4:	2304      	movs	r3, #4
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e280      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056ec:	2308      	movs	r3, #8
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e27c      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056fa:	e278      	b.n	8005bee <UART_SetConfig+0x7ae>
 80056fc:	2320      	movs	r3, #32
 80056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005702:	e274      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800570a:	e270      	b.n	8005bee <UART_SetConfig+0x7ae>
 800570c:	2380      	movs	r3, #128	; 0x80
 800570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005712:	e26c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <UART_SetConfig+0x348>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d142      	bne.n	80057a4 <UART_SetConfig+0x364>
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <UART_SetConfig+0x338>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b05      	cmp	r3, #5
 8005728:	d838      	bhi.n	800579c <UART_SetConfig+0x35c>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <UART_SetConfig+0x2f0>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005749 	.word	0x08005749
 8005734:	08005751 	.word	0x08005751
 8005738:	08005759 	.word	0x08005759
 800573c:	08005761 	.word	0x08005761
 8005740:	0800578d 	.word	0x0800578d
 8005744:	08005795 	.word	0x08005795
 8005748:	2300      	movs	r3, #0
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e24e      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005750:	2304      	movs	r3, #4
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e24a      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005758:	2308      	movs	r3, #8
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e246      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005766:	e242      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005768:	cfff69f3 	.word	0xcfff69f3
 800576c:	58000c00 	.word	0x58000c00
 8005770:	11fff4ff 	.word	0x11fff4ff
 8005774:	40011000 	.word	0x40011000
 8005778:	58024400 	.word	0x58024400
 800577c:	40004400 	.word	0x40004400
 8005780:	40004800 	.word	0x40004800
 8005784:	40004c00 	.word	0x40004c00
 8005788:	40005000 	.word	0x40005000
 800578c:	2320      	movs	r3, #32
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005792:	e22c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579a:	e228      	b.n	8005bee <UART_SetConfig+0x7ae>
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a2:	e224      	b.n	8005bee <UART_SetConfig+0x7ae>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4ab1      	ldr	r2, [pc, #708]	; (8005a70 <UART_SetConfig+0x630>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d176      	bne.n	800589c <UART_SetConfig+0x45c>
 80057ae:	4bb1      	ldr	r3, [pc, #708]	; (8005a74 <UART_SetConfig+0x634>)
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b6:	2b28      	cmp	r3, #40	; 0x28
 80057b8:	d86c      	bhi.n	8005894 <UART_SetConfig+0x454>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <UART_SetConfig+0x380>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	08005865 	.word	0x08005865
 80057c4:	08005895 	.word	0x08005895
 80057c8:	08005895 	.word	0x08005895
 80057cc:	08005895 	.word	0x08005895
 80057d0:	08005895 	.word	0x08005895
 80057d4:	08005895 	.word	0x08005895
 80057d8:	08005895 	.word	0x08005895
 80057dc:	08005895 	.word	0x08005895
 80057e0:	0800586d 	.word	0x0800586d
 80057e4:	08005895 	.word	0x08005895
 80057e8:	08005895 	.word	0x08005895
 80057ec:	08005895 	.word	0x08005895
 80057f0:	08005895 	.word	0x08005895
 80057f4:	08005895 	.word	0x08005895
 80057f8:	08005895 	.word	0x08005895
 80057fc:	08005895 	.word	0x08005895
 8005800:	08005875 	.word	0x08005875
 8005804:	08005895 	.word	0x08005895
 8005808:	08005895 	.word	0x08005895
 800580c:	08005895 	.word	0x08005895
 8005810:	08005895 	.word	0x08005895
 8005814:	08005895 	.word	0x08005895
 8005818:	08005895 	.word	0x08005895
 800581c:	08005895 	.word	0x08005895
 8005820:	0800587d 	.word	0x0800587d
 8005824:	08005895 	.word	0x08005895
 8005828:	08005895 	.word	0x08005895
 800582c:	08005895 	.word	0x08005895
 8005830:	08005895 	.word	0x08005895
 8005834:	08005895 	.word	0x08005895
 8005838:	08005895 	.word	0x08005895
 800583c:	08005895 	.word	0x08005895
 8005840:	08005885 	.word	0x08005885
 8005844:	08005895 	.word	0x08005895
 8005848:	08005895 	.word	0x08005895
 800584c:	08005895 	.word	0x08005895
 8005850:	08005895 	.word	0x08005895
 8005854:	08005895 	.word	0x08005895
 8005858:	08005895 	.word	0x08005895
 800585c:	08005895 	.word	0x08005895
 8005860:	0800588d 	.word	0x0800588d
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586a:	e1c0      	b.n	8005bee <UART_SetConfig+0x7ae>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005872:	e1bc      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587a:	e1b8      	b.n	8005bee <UART_SetConfig+0x7ae>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005882:	e1b4      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005884:	2320      	movs	r3, #32
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800588a:	e1b0      	b.n	8005bee <UART_SetConfig+0x7ae>
 800588c:	2340      	movs	r3, #64	; 0x40
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005892:	e1ac      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e1a8      	b.n	8005bee <UART_SetConfig+0x7ae>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a75      	ldr	r2, [pc, #468]	; (8005a78 <UART_SetConfig+0x638>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d130      	bne.n	8005908 <UART_SetConfig+0x4c8>
 80058a6:	4b73      	ldr	r3, [pc, #460]	; (8005a74 <UART_SetConfig+0x634>)
 80058a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d826      	bhi.n	8005900 <UART_SetConfig+0x4c0>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <UART_SetConfig+0x478>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	080058d1 	.word	0x080058d1
 80058bc:	080058d9 	.word	0x080058d9
 80058c0:	080058e1 	.word	0x080058e1
 80058c4:	080058e9 	.word	0x080058e9
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f9 	.word	0x080058f9
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d6:	e18a      	b.n	8005bee <UART_SetConfig+0x7ae>
 80058d8:	2304      	movs	r3, #4
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058de:	e186      	b.n	8005bee <UART_SetConfig+0x7ae>
 80058e0:	2308      	movs	r3, #8
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e6:	e182      	b.n	8005bee <UART_SetConfig+0x7ae>
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ee:	e17e      	b.n	8005bee <UART_SetConfig+0x7ae>
 80058f0:	2320      	movs	r3, #32
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058f6:	e17a      	b.n	8005bee <UART_SetConfig+0x7ae>
 80058f8:	2340      	movs	r3, #64	; 0x40
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058fe:	e176      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005900:	2380      	movs	r3, #128	; 0x80
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e172      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a5b      	ldr	r2, [pc, #364]	; (8005a7c <UART_SetConfig+0x63c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d130      	bne.n	8005974 <UART_SetConfig+0x534>
 8005912:	4b58      	ldr	r3, [pc, #352]	; (8005a74 <UART_SetConfig+0x634>)
 8005914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	2b05      	cmp	r3, #5
 800591c:	d826      	bhi.n	800596c <UART_SetConfig+0x52c>
 800591e:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x4e4>)
 8005920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005924:	0800593d 	.word	0x0800593d
 8005928:	08005945 	.word	0x08005945
 800592c:	0800594d 	.word	0x0800594d
 8005930:	08005955 	.word	0x08005955
 8005934:	0800595d 	.word	0x0800595d
 8005938:	08005965 	.word	0x08005965
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005942:	e154      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005944:	2304      	movs	r3, #4
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800594a:	e150      	b.n	8005bee <UART_SetConfig+0x7ae>
 800594c:	2308      	movs	r3, #8
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005952:	e14c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005954:	2310      	movs	r3, #16
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e148      	b.n	8005bee <UART_SetConfig+0x7ae>
 800595c:	2320      	movs	r3, #32
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e144      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005964:	2340      	movs	r3, #64	; 0x40
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e140      	b.n	8005bee <UART_SetConfig+0x7ae>
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e13c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <UART_SetConfig+0x640>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f040 8082 	bne.w	8005a84 <UART_SetConfig+0x644>
 8005980:	4b3c      	ldr	r3, [pc, #240]	; (8005a74 <UART_SetConfig+0x634>)
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005988:	2b28      	cmp	r3, #40	; 0x28
 800598a:	d86d      	bhi.n	8005a68 <UART_SetConfig+0x628>
 800598c:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <UART_SetConfig+0x554>)
 800598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005992:	bf00      	nop
 8005994:	08005a39 	.word	0x08005a39
 8005998:	08005a69 	.word	0x08005a69
 800599c:	08005a69 	.word	0x08005a69
 80059a0:	08005a69 	.word	0x08005a69
 80059a4:	08005a69 	.word	0x08005a69
 80059a8:	08005a69 	.word	0x08005a69
 80059ac:	08005a69 	.word	0x08005a69
 80059b0:	08005a69 	.word	0x08005a69
 80059b4:	08005a41 	.word	0x08005a41
 80059b8:	08005a69 	.word	0x08005a69
 80059bc:	08005a69 	.word	0x08005a69
 80059c0:	08005a69 	.word	0x08005a69
 80059c4:	08005a69 	.word	0x08005a69
 80059c8:	08005a69 	.word	0x08005a69
 80059cc:	08005a69 	.word	0x08005a69
 80059d0:	08005a69 	.word	0x08005a69
 80059d4:	08005a49 	.word	0x08005a49
 80059d8:	08005a69 	.word	0x08005a69
 80059dc:	08005a69 	.word	0x08005a69
 80059e0:	08005a69 	.word	0x08005a69
 80059e4:	08005a69 	.word	0x08005a69
 80059e8:	08005a69 	.word	0x08005a69
 80059ec:	08005a69 	.word	0x08005a69
 80059f0:	08005a69 	.word	0x08005a69
 80059f4:	08005a51 	.word	0x08005a51
 80059f8:	08005a69 	.word	0x08005a69
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005a69 	.word	0x08005a69
 8005a04:	08005a69 	.word	0x08005a69
 8005a08:	08005a69 	.word	0x08005a69
 8005a0c:	08005a69 	.word	0x08005a69
 8005a10:	08005a69 	.word	0x08005a69
 8005a14:	08005a59 	.word	0x08005a59
 8005a18:	08005a69 	.word	0x08005a69
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a69 	.word	0x08005a69
 8005a24:	08005a69 	.word	0x08005a69
 8005a28:	08005a69 	.word	0x08005a69
 8005a2c:	08005a69 	.word	0x08005a69
 8005a30:	08005a69 	.word	0x08005a69
 8005a34:	08005a61 	.word	0x08005a61
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3e:	e0d6      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a46:	e0d2      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4e:	e0ce      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a56:	e0ca      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5e:	e0c6      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a60:	2340      	movs	r3, #64	; 0x40
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e0c2      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e0be      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005a70:	40011400 	.word	0x40011400
 8005a74:	58024400 	.word	0x58024400
 8005a78:	40007800 	.word	0x40007800
 8005a7c:	40007c00 	.word	0x40007c00
 8005a80:	40011800 	.word	0x40011800
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4aad      	ldr	r2, [pc, #692]	; (8005d40 <UART_SetConfig+0x900>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d176      	bne.n	8005b7c <UART_SetConfig+0x73c>
 8005a8e:	4bad      	ldr	r3, [pc, #692]	; (8005d44 <UART_SetConfig+0x904>)
 8005a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a96:	2b28      	cmp	r3, #40	; 0x28
 8005a98:	d86c      	bhi.n	8005b74 <UART_SetConfig+0x734>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <UART_SetConfig+0x660>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005b45 	.word	0x08005b45
 8005aa4:	08005b75 	.word	0x08005b75
 8005aa8:	08005b75 	.word	0x08005b75
 8005aac:	08005b75 	.word	0x08005b75
 8005ab0:	08005b75 	.word	0x08005b75
 8005ab4:	08005b75 	.word	0x08005b75
 8005ab8:	08005b75 	.word	0x08005b75
 8005abc:	08005b75 	.word	0x08005b75
 8005ac0:	08005b4d 	.word	0x08005b4d
 8005ac4:	08005b75 	.word	0x08005b75
 8005ac8:	08005b75 	.word	0x08005b75
 8005acc:	08005b75 	.word	0x08005b75
 8005ad0:	08005b75 	.word	0x08005b75
 8005ad4:	08005b75 	.word	0x08005b75
 8005ad8:	08005b75 	.word	0x08005b75
 8005adc:	08005b75 	.word	0x08005b75
 8005ae0:	08005b55 	.word	0x08005b55
 8005ae4:	08005b75 	.word	0x08005b75
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	08005b75 	.word	0x08005b75
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005b75 	.word	0x08005b75
 8005af8:	08005b75 	.word	0x08005b75
 8005afc:	08005b75 	.word	0x08005b75
 8005b00:	08005b5d 	.word	0x08005b5d
 8005b04:	08005b75 	.word	0x08005b75
 8005b08:	08005b75 	.word	0x08005b75
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005b75 	.word	0x08005b75
 8005b14:	08005b75 	.word	0x08005b75
 8005b18:	08005b75 	.word	0x08005b75
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b65 	.word	0x08005b65
 8005b24:	08005b75 	.word	0x08005b75
 8005b28:	08005b75 	.word	0x08005b75
 8005b2c:	08005b75 	.word	0x08005b75
 8005b30:	08005b75 	.word	0x08005b75
 8005b34:	08005b75 	.word	0x08005b75
 8005b38:	08005b75 	.word	0x08005b75
 8005b3c:	08005b75 	.word	0x08005b75
 8005b40:	08005b6d 	.word	0x08005b6d
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4a:	e050      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b52:	e04c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b54:	2308      	movs	r3, #8
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5a:	e048      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b5c:	2310      	movs	r3, #16
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b62:	e044      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b64:	2320      	movs	r3, #32
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6a:	e040      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b6c:	2340      	movs	r3, #64	; 0x40
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e03c      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e038      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a71      	ldr	r2, [pc, #452]	; (8005d48 <UART_SetConfig+0x908>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d130      	bne.n	8005be8 <UART_SetConfig+0x7a8>
 8005b86:	4b6f      	ldr	r3, [pc, #444]	; (8005d44 <UART_SetConfig+0x904>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b05      	cmp	r3, #5
 8005b90:	d826      	bhi.n	8005be0 <UART_SetConfig+0x7a0>
 8005b92:	a201      	add	r2, pc, #4	; (adr r2, 8005b98 <UART_SetConfig+0x758>)
 8005b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b98:	08005bb1 	.word	0x08005bb1
 8005b9c:	08005bb9 	.word	0x08005bb9
 8005ba0:	08005bc1 	.word	0x08005bc1
 8005ba4:	08005bc9 	.word	0x08005bc9
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd9 	.word	0x08005bd9
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e01a      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005bb8:	2304      	movs	r3, #4
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e016      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005bc0:	2308      	movs	r3, #8
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e012      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e00e      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005bd0:	2320      	movs	r3, #32
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e00a      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005bd8:	2340      	movs	r3, #64	; 0x40
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e006      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e002      	b.n	8005bee <UART_SetConfig+0x7ae>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a55      	ldr	r2, [pc, #340]	; (8005d48 <UART_SetConfig+0x908>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 80f8 	bne.w	8005dea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	dc46      	bgt.n	8005c90 <UART_SetConfig+0x850>
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	db75      	blt.n	8005cf2 <UART_SetConfig+0x8b2>
 8005c06:	3b02      	subs	r3, #2
 8005c08:	2b1e      	cmp	r3, #30
 8005c0a:	d872      	bhi.n	8005cf2 <UART_SetConfig+0x8b2>
 8005c0c:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <UART_SetConfig+0x7d4>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005c97 	.word	0x08005c97
 8005c18:	08005cf3 	.word	0x08005cf3
 8005c1c:	08005c9f 	.word	0x08005c9f
 8005c20:	08005cf3 	.word	0x08005cf3
 8005c24:	08005cf3 	.word	0x08005cf3
 8005c28:	08005cf3 	.word	0x08005cf3
 8005c2c:	08005caf 	.word	0x08005caf
 8005c30:	08005cf3 	.word	0x08005cf3
 8005c34:	08005cf3 	.word	0x08005cf3
 8005c38:	08005cf3 	.word	0x08005cf3
 8005c3c:	08005cf3 	.word	0x08005cf3
 8005c40:	08005cf3 	.word	0x08005cf3
 8005c44:	08005cf3 	.word	0x08005cf3
 8005c48:	08005cf3 	.word	0x08005cf3
 8005c4c:	08005cbf 	.word	0x08005cbf
 8005c50:	08005cf3 	.word	0x08005cf3
 8005c54:	08005cf3 	.word	0x08005cf3
 8005c58:	08005cf3 	.word	0x08005cf3
 8005c5c:	08005cf3 	.word	0x08005cf3
 8005c60:	08005cf3 	.word	0x08005cf3
 8005c64:	08005cf3 	.word	0x08005cf3
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005cf3 	.word	0x08005cf3
 8005c70:	08005cf3 	.word	0x08005cf3
 8005c74:	08005cf3 	.word	0x08005cf3
 8005c78:	08005cf3 	.word	0x08005cf3
 8005c7c:	08005cf3 	.word	0x08005cf3
 8005c80:	08005cf3 	.word	0x08005cf3
 8005c84:	08005cf3 	.word	0x08005cf3
 8005c88:	08005cf3 	.word	0x08005cf3
 8005c8c:	08005ce5 	.word	0x08005ce5
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	d02a      	beq.n	8005cea <UART_SetConfig+0x8aa>
 8005c94:	e02d      	b.n	8005cf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005c96:	f7fe ff61 	bl	8004b5c <HAL_RCCEx_GetD3PCLK1Freq>
 8005c9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005c9c:	e02f      	b.n	8005cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe ff70 	bl	8004b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cac:	e027      	b.n	8005cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cae:	f107 0318 	add.w	r3, r7, #24
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff f8bc 	bl	8004e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbc:	e01f      	b.n	8005cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cbe:	4b21      	ldr	r3, [pc, #132]	; (8005d44 <UART_SetConfig+0x904>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cca:	4b1e      	ldr	r3, [pc, #120]	; (8005d44 <UART_SetConfig+0x904>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <UART_SetConfig+0x90c>)
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cdc:	e00f      	b.n	8005cfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <UART_SetConfig+0x90c>)
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce2:	e00c      	b.n	8005cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ce4:	4b1a      	ldr	r3, [pc, #104]	; (8005d50 <UART_SetConfig+0x910>)
 8005ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ce8:	e009      	b.n	8005cfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cf0:	e005      	b.n	8005cfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 81ee 	beq.w	80060e2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	4a12      	ldr	r2, [pc, #72]	; (8005d54 <UART_SetConfig+0x914>)
 8005d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d18:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d305      	bcc.n	8005d36 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d910      	bls.n	8005d58 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005d3c:	e1d1      	b.n	80060e2 <UART_SetConfig+0xca2>
 8005d3e:	bf00      	nop
 8005d40:	40011c00 	.word	0x40011c00
 8005d44:	58024400 	.word	0x58024400
 8005d48:	58000c00 	.word	0x58000c00
 8005d4c:	03d09000 	.word	0x03d09000
 8005d50:	003d0900 	.word	0x003d0900
 8005d54:	08006708 	.word	0x08006708
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	60fa      	str	r2, [r7, #12]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	4ac0      	ldr	r2, [pc, #768]	; (8006068 <UART_SetConfig+0xc28>)
 8005d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	607a      	str	r2, [r7, #4]
 8005d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d7a:	f7fa fc75 	bl	8000668 <__aeabi_uldivmod>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	460b      	mov	r3, r1
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	f04f 0300 	mov.w	r3, #0
 8005d8e:	020b      	lsls	r3, r1, #8
 8005d90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d94:	0202      	lsls	r2, r0, #8
 8005d96:	6979      	ldr	r1, [r7, #20]
 8005d98:	6849      	ldr	r1, [r1, #4]
 8005d9a:	0849      	lsrs	r1, r1, #1
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	4605      	mov	r5, r0
 8005da2:	eb12 0804 	adds.w	r8, r2, r4
 8005da6:	eb43 0905 	adc.w	r9, r3, r5
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	469a      	mov	sl, r3
 8005db2:	4693      	mov	fp, r2
 8005db4:	4652      	mov	r2, sl
 8005db6:	465b      	mov	r3, fp
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7fa fc54 	bl	8000668 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dce:	d308      	bcc.n	8005de2 <UART_SetConfig+0x9a2>
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd6:	d204      	bcs.n	8005de2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dde:	60da      	str	r2, [r3, #12]
 8005de0:	e17f      	b.n	80060e2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005de8:	e17b      	b.n	80060e2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	69db      	ldr	r3, [r3, #28]
 8005dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df2:	f040 80bd 	bne.w	8005f70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005df6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	dc48      	bgt.n	8005e90 <UART_SetConfig+0xa50>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	db7b      	blt.n	8005efa <UART_SetConfig+0xaba>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d879      	bhi.n	8005efa <UART_SetConfig+0xaba>
 8005e06:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <UART_SetConfig+0x9cc>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e97 	.word	0x08005e97
 8005e10:	08005e9f 	.word	0x08005e9f
 8005e14:	08005efb 	.word	0x08005efb
 8005e18:	08005efb 	.word	0x08005efb
 8005e1c:	08005ea7 	.word	0x08005ea7
 8005e20:	08005efb 	.word	0x08005efb
 8005e24:	08005efb 	.word	0x08005efb
 8005e28:	08005efb 	.word	0x08005efb
 8005e2c:	08005eb7 	.word	0x08005eb7
 8005e30:	08005efb 	.word	0x08005efb
 8005e34:	08005efb 	.word	0x08005efb
 8005e38:	08005efb 	.word	0x08005efb
 8005e3c:	08005efb 	.word	0x08005efb
 8005e40:	08005efb 	.word	0x08005efb
 8005e44:	08005efb 	.word	0x08005efb
 8005e48:	08005efb 	.word	0x08005efb
 8005e4c:	08005ec7 	.word	0x08005ec7
 8005e50:	08005efb 	.word	0x08005efb
 8005e54:	08005efb 	.word	0x08005efb
 8005e58:	08005efb 	.word	0x08005efb
 8005e5c:	08005efb 	.word	0x08005efb
 8005e60:	08005efb 	.word	0x08005efb
 8005e64:	08005efb 	.word	0x08005efb
 8005e68:	08005efb 	.word	0x08005efb
 8005e6c:	08005efb 	.word	0x08005efb
 8005e70:	08005efb 	.word	0x08005efb
 8005e74:	08005efb 	.word	0x08005efb
 8005e78:	08005efb 	.word	0x08005efb
 8005e7c:	08005efb 	.word	0x08005efb
 8005e80:	08005efb 	.word	0x08005efb
 8005e84:	08005efb 	.word	0x08005efb
 8005e88:	08005efb 	.word	0x08005efb
 8005e8c:	08005eed 	.word	0x08005eed
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	d02e      	beq.n	8005ef2 <UART_SetConfig+0xab2>
 8005e94:	e031      	b.n	8005efa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e96:	f7fd ff29 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8005e9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005e9c:	e033      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e9e:	f7fd ff3b 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005ea2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ea4:	e02f      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fe fe6c 	bl	8004b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eb4:	e027      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb6:	f107 0318 	add.w	r3, r7, #24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe ffb8 	bl	8004e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ec4:	e01f      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec6:	4b69      	ldr	r3, [pc, #420]	; (800606c <UART_SetConfig+0xc2c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ed2:	4b66      	ldr	r3, [pc, #408]	; (800606c <UART_SetConfig+0xc2c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	08db      	lsrs	r3, r3, #3
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	4a64      	ldr	r2, [pc, #400]	; (8006070 <UART_SetConfig+0xc30>)
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ee4:	e00f      	b.n	8005f06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005ee6:	4b62      	ldr	r3, [pc, #392]	; (8006070 <UART_SetConfig+0xc30>)
 8005ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eea:	e00c      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eec:	4b61      	ldr	r3, [pc, #388]	; (8006074 <UART_SetConfig+0xc34>)
 8005eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef0:	e009      	b.n	8005f06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ef8:	e005      	b.n	8005f06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 80ea 	beq.w	80060e2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	4a55      	ldr	r2, [pc, #340]	; (8006068 <UART_SetConfig+0xc28>)
 8005f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f20:	005a      	lsls	r2, r3, #1
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	441a      	add	r2, r3
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d916      	bls.n	8005f68 <UART_SetConfig+0xb28>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d212      	bcs.n	8005f68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f023 030f 	bic.w	r3, r3, #15
 8005f4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4e:	085b      	lsrs	r3, r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f64:	60da      	str	r2, [r3, #12]
 8005f66:	e0bc      	b.n	80060e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005f6e:	e0b8      	b.n	80060e2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	dc4b      	bgt.n	8006010 <UART_SetConfig+0xbd0>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f2c0 8087 	blt.w	800608c <UART_SetConfig+0xc4c>
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	f200 8084 	bhi.w	800608c <UART_SetConfig+0xc4c>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <UART_SetConfig+0xb4c>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08006017 	.word	0x08006017
 8005f90:	0800601f 	.word	0x0800601f
 8005f94:	0800608d 	.word	0x0800608d
 8005f98:	0800608d 	.word	0x0800608d
 8005f9c:	08006027 	.word	0x08006027
 8005fa0:	0800608d 	.word	0x0800608d
 8005fa4:	0800608d 	.word	0x0800608d
 8005fa8:	0800608d 	.word	0x0800608d
 8005fac:	08006037 	.word	0x08006037
 8005fb0:	0800608d 	.word	0x0800608d
 8005fb4:	0800608d 	.word	0x0800608d
 8005fb8:	0800608d 	.word	0x0800608d
 8005fbc:	0800608d 	.word	0x0800608d
 8005fc0:	0800608d 	.word	0x0800608d
 8005fc4:	0800608d 	.word	0x0800608d
 8005fc8:	0800608d 	.word	0x0800608d
 8005fcc:	08006047 	.word	0x08006047
 8005fd0:	0800608d 	.word	0x0800608d
 8005fd4:	0800608d 	.word	0x0800608d
 8005fd8:	0800608d 	.word	0x0800608d
 8005fdc:	0800608d 	.word	0x0800608d
 8005fe0:	0800608d 	.word	0x0800608d
 8005fe4:	0800608d 	.word	0x0800608d
 8005fe8:	0800608d 	.word	0x0800608d
 8005fec:	0800608d 	.word	0x0800608d
 8005ff0:	0800608d 	.word	0x0800608d
 8005ff4:	0800608d 	.word	0x0800608d
 8005ff8:	0800608d 	.word	0x0800608d
 8005ffc:	0800608d 	.word	0x0800608d
 8006000:	0800608d 	.word	0x0800608d
 8006004:	0800608d 	.word	0x0800608d
 8006008:	0800608d 	.word	0x0800608d
 800600c:	0800607f 	.word	0x0800607f
 8006010:	2b40      	cmp	r3, #64	; 0x40
 8006012:	d037      	beq.n	8006084 <UART_SetConfig+0xc44>
 8006014:	e03a      	b.n	800608c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006016:	f7fd fe69 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 800601a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800601c:	e03c      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800601e:	f7fd fe7b 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8006022:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006024:	e038      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fdac 	bl	8004b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006034:	e030      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006036:	f107 0318 	add.w	r3, r7, #24
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe fef8 	bl	8004e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006044:	e028      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006046:	4b09      	ldr	r3, [pc, #36]	; (800606c <UART_SetConfig+0xc2c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006052:	4b06      	ldr	r3, [pc, #24]	; (800606c <UART_SetConfig+0xc2c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	08db      	lsrs	r3, r3, #3
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	4a04      	ldr	r2, [pc, #16]	; (8006070 <UART_SetConfig+0xc30>)
 800605e:	fa22 f303 	lsr.w	r3, r2, r3
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006064:	e018      	b.n	8006098 <UART_SetConfig+0xc58>
 8006066:	bf00      	nop
 8006068:	08006708 	.word	0x08006708
 800606c:	58024400 	.word	0x58024400
 8006070:	03d09000 	.word	0x03d09000
 8006074:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006078:	4b24      	ldr	r3, [pc, #144]	; (800610c <UART_SetConfig+0xccc>)
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800607c:	e00c      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800607e:	4b24      	ldr	r3, [pc, #144]	; (8006110 <UART_SetConfig+0xcd0>)
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006082:	e009      	b.n	8006098 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800608a:	e005      	b.n	8006098 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006096:	bf00      	nop
    }

    if (pclk != 0U)
 8006098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d021      	beq.n	80060e2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <UART_SetConfig+0xcd4>)
 80060a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a8:	461a      	mov	r2, r3
 80060aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	441a      	add	r2, r3
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c4:	2b0f      	cmp	r3, #15
 80060c6:	d909      	bls.n	80060dc <UART_SetConfig+0xc9c>
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ce:	d205      	bcs.n	80060dc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60da      	str	r2, [r3, #12]
 80060da:	e002      	b.n	80060e2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2200      	movs	r2, #0
 80060f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80060fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006102:	4618      	mov	r0, r3
 8006104:	3748      	adds	r7, #72	; 0x48
 8006106:	46bd      	mov	sp, r7
 8006108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800610c:	03d09000 	.word	0x03d09000
 8006110:	003d0900 	.word	0x003d0900
 8006114:	08006708 	.word	0x08006708

08006118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01a      	beq.n	800622e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006216:	d10a      	bne.n	800622e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	430a      	orrs	r2, r1
 800624e:	605a      	str	r2, [r3, #4]
  }
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af02      	add	r7, sp, #8
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800626c:	f7fb fd18 	bl	8001ca0 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b08      	cmp	r3, #8
 800627e:	d10e      	bne.n	800629e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f82f 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e025      	b.n	80062ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0304 	and.w	r3, r3, #4
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d10e      	bne.n	80062ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062b0:	9300      	str	r3, [sp, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f819 	bl	80062f2 <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e00f      	b.n	80062ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b09c      	sub	sp, #112	; 0x70
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	603b      	str	r3, [r7, #0]
 80062fe:	4613      	mov	r3, r2
 8006300:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006302:	e0a9      	b.n	8006458 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	f000 80a5 	beq.w	8006458 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800630e:	f7fb fcc7 	bl	8001ca0 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800631a:	429a      	cmp	r2, r3
 800631c:	d302      	bcc.n	8006324 <UART_WaitOnFlagUntilTimeout+0x32>
 800631e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006320:	2b00      	cmp	r3, #0
 8006322:	d140      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006334:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006338:	667b      	str	r3, [r7, #100]	; 0x64
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006344:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800634a:	e841 2300 	strex	r3, r2, [r1]
 800634e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e6      	bne.n	8006324 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	f023 0301 	bic.w	r3, r3, #1
 800636c:	663b      	str	r3, [r7, #96]	; 0x60
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3308      	adds	r3, #8
 8006374:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006376:	64ba      	str	r2, [r7, #72]	; 0x48
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e5      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e069      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0304 	and.w	r3, r3, #4
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d051      	beq.n	8006458 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c2:	d149      	bne.n	8006458 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	e853 3f00 	ldrex	r3, [r3]
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
 80063ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063f4:	e841 2300 	strex	r3, r2, [r1]
 80063f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e6      	bne.n	80063ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	e853 3f00 	ldrex	r3, [r3]
 800640e:	613b      	str	r3, [r7, #16]
   return(result);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f023 0301 	bic.w	r3, r3, #1
 8006416:	66bb      	str	r3, [r7, #104]	; 0x68
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3308      	adds	r3, #8
 800641e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006420:	623a      	str	r2, [r7, #32]
 8006422:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	6a3a      	ldr	r2, [r7, #32]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	61bb      	str	r3, [r7, #24]
   return(result);
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e5      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e010      	b.n	800647a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	69da      	ldr	r2, [r3, #28]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	4013      	ands	r3, r2
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	429a      	cmp	r2, r3
 8006466:	bf0c      	ite	eq
 8006468:	2301      	moveq	r3, #1
 800646a:	2300      	movne	r3, #0
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	429a      	cmp	r2, r3
 8006474:	f43f af46 	beq.w	8006304 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3770      	adds	r7, #112	; 0x70
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b085      	sub	sp, #20
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006490:	2b01      	cmp	r3, #1
 8006492:	d101      	bne.n	8006498 <HAL_UARTEx_DisableFifoMode+0x16>
 8006494:	2302      	movs	r3, #2
 8006496:	e027      	b.n	80064e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2224      	movs	r2, #36	; 0x24
 80064a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e02d      	b.n	8006568 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	; 0x24
 8006518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f84f 	bl	80065ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006580:	2b01      	cmp	r3, #1
 8006582:	d101      	bne.n	8006588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006584:	2302      	movs	r3, #2
 8006586:	e02d      	b.n	80065e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2224      	movs	r2, #36	; 0x24
 8006594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0201 	bic.w	r2, r2, #1
 80065ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f811 	bl	80065ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d108      	bne.n	800660e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800660c:	e031      	b.n	8006672 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800660e:	2310      	movs	r3, #16
 8006610:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006612:	2310      	movs	r3, #16
 8006614:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	0e5b      	lsrs	r3, r3, #25
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	0f5b      	lsrs	r3, r3, #29
 800662e:	b2db      	uxtb	r3, r3
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	7b3a      	ldrb	r2, [r7, #12]
 800663a:	4911      	ldr	r1, [pc, #68]	; (8006680 <UARTEx_SetNbDataToProcess+0x94>)
 800663c:	5c8a      	ldrb	r2, [r1, r2]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006642:	7b3a      	ldrb	r2, [r7, #12]
 8006644:	490f      	ldr	r1, [pc, #60]	; (8006684 <UARTEx_SetNbDataToProcess+0x98>)
 8006646:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006648:	fb93 f3f2 	sdiv	r3, r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	7b7a      	ldrb	r2, [r7, #13]
 8006658:	4909      	ldr	r1, [pc, #36]	; (8006680 <UARTEx_SetNbDataToProcess+0x94>)
 800665a:	5c8a      	ldrb	r2, [r1, r2]
 800665c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006660:	7b7a      	ldrb	r2, [r7, #13]
 8006662:	4908      	ldr	r1, [pc, #32]	; (8006684 <UARTEx_SetNbDataToProcess+0x98>)
 8006664:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006666:	fb93 f3f2 	sdiv	r3, r3, r2
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006672:	bf00      	nop
 8006674:	3714      	adds	r7, #20
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	08006720 	.word	0x08006720
 8006684:	08006728 	.word	0x08006728

08006688 <__libc_init_array>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4d0d      	ldr	r5, [pc, #52]	; (80066c0 <__libc_init_array+0x38>)
 800668c:	4c0d      	ldr	r4, [pc, #52]	; (80066c4 <__libc_init_array+0x3c>)
 800668e:	1b64      	subs	r4, r4, r5
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	2600      	movs	r6, #0
 8006694:	42a6      	cmp	r6, r4
 8006696:	d109      	bne.n	80066ac <__libc_init_array+0x24>
 8006698:	4d0b      	ldr	r5, [pc, #44]	; (80066c8 <__libc_init_array+0x40>)
 800669a:	4c0c      	ldr	r4, [pc, #48]	; (80066cc <__libc_init_array+0x44>)
 800669c:	f000 f820 	bl	80066e0 <_init>
 80066a0:	1b64      	subs	r4, r4, r5
 80066a2:	10a4      	asrs	r4, r4, #2
 80066a4:	2600      	movs	r6, #0
 80066a6:	42a6      	cmp	r6, r4
 80066a8:	d105      	bne.n	80066b6 <__libc_init_array+0x2e>
 80066aa:	bd70      	pop	{r4, r5, r6, pc}
 80066ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b0:	4798      	blx	r3
 80066b2:	3601      	adds	r6, #1
 80066b4:	e7ee      	b.n	8006694 <__libc_init_array+0xc>
 80066b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ba:	4798      	blx	r3
 80066bc:	3601      	adds	r6, #1
 80066be:	e7f2      	b.n	80066a6 <__libc_init_array+0x1e>
 80066c0:	08006738 	.word	0x08006738
 80066c4:	08006738 	.word	0x08006738
 80066c8:	08006738 	.word	0x08006738
 80066cc:	0800673c 	.word	0x0800673c

080066d0 <memset>:
 80066d0:	4402      	add	r2, r0
 80066d2:	4603      	mov	r3, r0
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d100      	bne.n	80066da <memset+0xa>
 80066d8:	4770      	bx	lr
 80066da:	f803 1b01 	strb.w	r1, [r3], #1
 80066de:	e7f9      	b.n	80066d4 <memset+0x4>

080066e0 <_init>:
 80066e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e2:	bf00      	nop
 80066e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066e6:	bc08      	pop	{r3}
 80066e8:	469e      	mov	lr, r3
 80066ea:	4770      	bx	lr

080066ec <_fini>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	bf00      	nop
 80066f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f2:	bc08      	pop	{r3}
 80066f4:	469e      	mov	lr, r3
 80066f6:	4770      	bx	lr
